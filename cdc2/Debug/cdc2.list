
cdc2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065f8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08006780  08006780  00016780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006800  08006800  00020200  2**0
                  CONTENTS
  4 .ARM          00000008  08006800  08006800  00016800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006808  08006808  00020200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006808  08006808  00016808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800680c  0800680c  0001680c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  08006810  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020e8  20000200  08006a10  00020200  2**2
                  ALLOC
 10 ._user_heap_stack 00000a00  200022e8  08006a10  000222e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012b4d  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d4a  00000000  00000000  00032d7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b68  00000000  00000000  00035ac8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a10  00000000  00000000  00036630  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002319b  00000000  00000000  00037040  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c890  00000000  00000000  0005a1db  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c3b2c  00000000  00000000  00066a6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012a597  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002de4  00000000  00000000  0012a614  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000200 	.word	0x20000200
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006768 	.word	0x08006768

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000204 	.word	0x20000204
 80001c4:	08006768 	.word	0x08006768

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b590      	push	{r4, r7, lr}
 80004da:	b08b      	sub	sp, #44	; 0x2c
 80004dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004de:	f000 fac7 	bl	8000a70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e2:	f000 f84d 	bl	8000580 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e6:	f000 f8b5 	bl	8000654 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004ea:	f005 faf1 	bl	8005ad0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  uint8_t Buf2[20]="E.t rulezz\r\n";
 80004ee:	4b21      	ldr	r3, [pc, #132]	; (8000574 <main+0x9c>)
 80004f0:	f107 0414 	add.w	r4, r7, #20
 80004f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80004f6:	c407      	stmia	r4!, {r0, r1, r2}
 80004f8:	7023      	strb	r3, [r4, #0]
 80004fa:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80004fe:	2200      	movs	r2, #0
 8000500:	601a      	str	r2, [r3, #0]
 8000502:	f8c3 2003 	str.w	r2, [r3, #3]
  uint8_t Buf3[20]="Hail E.t\r\n";
 8000506:	4a1c      	ldr	r2, [pc, #112]	; (8000578 <main+0xa0>)
 8000508:	463b      	mov	r3, r7
 800050a:	ca07      	ldmia	r2, {r0, r1, r2}
 800050c:	c303      	stmia	r3!, {r0, r1}
 800050e:	801a      	strh	r2, [r3, #0]
 8000510:	3302      	adds	r3, #2
 8000512:	0c12      	lsrs	r2, r2, #16
 8000514:	701a      	strb	r2, [r3, #0]
 8000516:	f107 030b 	add.w	r3, r7, #11
 800051a:	2200      	movs	r2, #0
 800051c:	601a      	str	r2, [r3, #0]
 800051e:	605a      	str	r2, [r3, #4]
 8000520:	721a      	strb	r2, [r3, #8]
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
   // CDC_Transmit_FS(Buf, strlen(Buf));
	  myusbttransmit(Buf, strlen(Buf));
 8000522:	4816      	ldr	r0, [pc, #88]	; (800057c <main+0xa4>)
 8000524:	f7ff fe50 	bl	80001c8 <strlen>
 8000528:	4603      	mov	r3, r0
 800052a:	4619      	mov	r1, r3
 800052c:	4813      	ldr	r0, [pc, #76]	; (800057c <main+0xa4>)
 800052e:	f000 f8b9 	bl	80006a4 <myusbttransmit>


  HAL_Delay(50);
 8000532:	2032      	movs	r0, #50	; 0x32
 8000534:	f000 fb0e 	bl	8000b54 <HAL_Delay>

	 myusbttransmit(Buf2, strlen(Buf2));
 8000538:	f107 0314 	add.w	r3, r7, #20
 800053c:	4618      	mov	r0, r3
 800053e:	f7ff fe43 	bl	80001c8 <strlen>
 8000542:	4602      	mov	r2, r0
 8000544:	f107 0314 	add.w	r3, r7, #20
 8000548:	4611      	mov	r1, r2
 800054a:	4618      	mov	r0, r3
 800054c:	f000 f8aa 	bl	80006a4 <myusbttransmit>

 HAL_Delay(50);
 8000550:	2032      	movs	r0, #50	; 0x32
 8000552:	f000 faff 	bl	8000b54 <HAL_Delay>
 myusbttransmit(Buf3, strlen(Buf3));
 8000556:	463b      	mov	r3, r7
 8000558:	4618      	mov	r0, r3
 800055a:	f7ff fe35 	bl	80001c8 <strlen>
 800055e:	4602      	mov	r2, r0
 8000560:	463b      	mov	r3, r7
 8000562:	4611      	mov	r1, r2
 8000564:	4618      	mov	r0, r3
 8000566:	f000 f89d 	bl	80006a4 <myusbttransmit>
 HAL_Delay(50);
 800056a:	2032      	movs	r0, #50	; 0x32
 800056c:	f000 faf2 	bl	8000b54 <HAL_Delay>
  {
 8000570:	e7d7      	b.n	8000522 <main+0x4a>
 8000572:	bf00      	nop
 8000574:	08006780 	.word	0x08006780
 8000578:	08006794 	.word	0x08006794
 800057c:	20000000 	.word	0x20000000

08000580 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b094      	sub	sp, #80	; 0x50
 8000584:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000586:	f107 0320 	add.w	r3, r7, #32
 800058a:	2230      	movs	r2, #48	; 0x30
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f006 f828 	bl	80065e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000594:	f107 030c 	add.w	r3, r7, #12
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
 800059c:	605a      	str	r2, [r3, #4]
 800059e:	609a      	str	r2, [r3, #8]
 80005a0:	60da      	str	r2, [r3, #12]
 80005a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a4:	2300      	movs	r3, #0
 80005a6:	60bb      	str	r3, [r7, #8]
 80005a8:	4b28      	ldr	r3, [pc, #160]	; (800064c <SystemClock_Config+0xcc>)
 80005aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ac:	4a27      	ldr	r2, [pc, #156]	; (800064c <SystemClock_Config+0xcc>)
 80005ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005b2:	6413      	str	r3, [r2, #64]	; 0x40
 80005b4:	4b25      	ldr	r3, [pc, #148]	; (800064c <SystemClock_Config+0xcc>)
 80005b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005bc:	60bb      	str	r3, [r7, #8]
 80005be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c0:	2300      	movs	r3, #0
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	4b22      	ldr	r3, [pc, #136]	; (8000650 <SystemClock_Config+0xd0>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a21      	ldr	r2, [pc, #132]	; (8000650 <SystemClock_Config+0xd0>)
 80005ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ce:	6013      	str	r3, [r2, #0]
 80005d0:	4b1f      	ldr	r3, [pc, #124]	; (8000650 <SystemClock_Config+0xd0>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005d8:	607b      	str	r3, [r7, #4]
 80005da:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005dc:	2301      	movs	r3, #1
 80005de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e6:	2302      	movs	r3, #2
 80005e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005f0:	2308      	movs	r3, #8
 80005f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005f4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005fa:	2302      	movs	r3, #2
 80005fc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005fe:	2307      	movs	r3, #7
 8000600:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000602:	f107 0320 	add.w	r3, r7, #32
 8000606:	4618      	mov	r0, r3
 8000608:	f001 fef6 	bl	80023f8 <HAL_RCC_OscConfig>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000612:	f000 f88f 	bl	8000734 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000616:	230f      	movs	r3, #15
 8000618:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800061a:	2302      	movs	r3, #2
 800061c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061e:	2300      	movs	r3, #0
 8000620:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000622:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000626:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000628:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800062c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800062e:	f107 030c 	add.w	r3, r7, #12
 8000632:	2105      	movs	r1, #5
 8000634:	4618      	mov	r0, r3
 8000636:	f002 f94f 	bl	80028d8 <HAL_RCC_ClockConfig>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000640:	f000 f878 	bl	8000734 <Error_Handler>
  }
}
 8000644:	bf00      	nop
 8000646:	3750      	adds	r7, #80	; 0x50
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	40023800 	.word	0x40023800
 8000650:	40007000 	.word	0x40007000

08000654 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800065a:	2300      	movs	r3, #0
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	4b10      	ldr	r3, [pc, #64]	; (80006a0 <MX_GPIO_Init+0x4c>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	4a0f      	ldr	r2, [pc, #60]	; (80006a0 <MX_GPIO_Init+0x4c>)
 8000664:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000668:	6313      	str	r3, [r2, #48]	; 0x30
 800066a:	4b0d      	ldr	r3, [pc, #52]	; (80006a0 <MX_GPIO_Init+0x4c>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000676:	2300      	movs	r3, #0
 8000678:	603b      	str	r3, [r7, #0]
 800067a:	4b09      	ldr	r3, [pc, #36]	; (80006a0 <MX_GPIO_Init+0x4c>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	4a08      	ldr	r2, [pc, #32]	; (80006a0 <MX_GPIO_Init+0x4c>)
 8000680:	f043 0301 	orr.w	r3, r3, #1
 8000684:	6313      	str	r3, [r2, #48]	; 0x30
 8000686:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <MX_GPIO_Init+0x4c>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	f003 0301 	and.w	r3, r3, #1
 800068e:	603b      	str	r3, [r7, #0]
 8000690:	683b      	ldr	r3, [r7, #0]

}
 8000692:	bf00      	nop
 8000694:	370c      	adds	r7, #12
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	40023800 	.word	0x40023800

080006a4 <myusbttransmit>:

/* USER CODE BEGIN 4 */
void myusbttransmit(uint8_t* pData, uint16_t Len)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
 80006ac:	460b      	mov	r3, r1
 80006ae:	807b      	strh	r3, [r7, #2]
	if (CDC_Transmit_FS(pData, strlen(pData))!=USBD_OK)
 80006b0:	6878      	ldr	r0, [r7, #4]
 80006b2:	f7ff fd89 	bl	80001c8 <strlen>
 80006b6:	4603      	mov	r3, r0
 80006b8:	b29b      	uxth	r3, r3
 80006ba:	4619      	mov	r1, r3
 80006bc:	6878      	ldr	r0, [r7, #4]
 80006be:	f005 fb15 	bl	8005cec <CDC_Transmit_FS>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d00b      	beq.n	80006e0 <myusbttransmit+0x3c>
	{
		if(RingBuffer_Write(&txBuf, pData, strlen(pData)) != RING_BUFFER_OK)
 80006c8:	6878      	ldr	r0, [r7, #4]
 80006ca:	f7ff fd7d 	bl	80001c8 <strlen>
 80006ce:	4603      	mov	r3, r0
 80006d0:	b29b      	uxth	r3, r3
 80006d2:	461a      	mov	r2, r3
 80006d4:	6879      	ldr	r1, [r7, #4]
 80006d6:	4804      	ldr	r0, [pc, #16]	; (80006e8 <myusbttransmit+0x44>)
 80006d8:	f000 f8b4 	bl	8000844 <RingBuffer_Write>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
		{
		return 0;
		}

	}
	return 1;
 80006e0:	bf00      	nop
}
 80006e2:	3708      	adds	r7, #8
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	20000230 	.word	0x20000230

080006ec <mynonstatictxcomplete>:
 void mynonstatictxcomplete()
 {
 80006ec:	b598      	push	{r3, r4, r7, lr}
 80006ee:	af00      	add	r7, sp, #0
	 if(RingBuffer_GetDataLength(&txBuf) > 0) {
 80006f0:	480e      	ldr	r0, [pc, #56]	; (800072c <mynonstatictxcomplete+0x40>)
 80006f2:	f000 f856 	bl	80007a2 <RingBuffer_GetDataLength>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d014      	beq.n	8000726 <mynonstatictxcomplete+0x3a>
	 	 RingBuffer_Read(&txBuf, txData, 1);
 80006fc:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <mynonstatictxcomplete+0x44>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	2201      	movs	r2, #1
 8000702:	4619      	mov	r1, r3
 8000704:	4809      	ldr	r0, [pc, #36]	; (800072c <mynonstatictxcomplete+0x40>)
 8000706:	f000 f85d 	bl	80007c4 <RingBuffer_Read>
	 	CDC_Transmit_FS(txData, strlen(*txData));
 800070a:	4b09      	ldr	r3, [pc, #36]	; (8000730 <mynonstatictxcomplete+0x44>)
 800070c:	681c      	ldr	r4, [r3, #0]
 800070e:	4b08      	ldr	r3, [pc, #32]	; (8000730 <mynonstatictxcomplete+0x44>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	4618      	mov	r0, r3
 8000716:	f7ff fd57 	bl	80001c8 <strlen>
 800071a:	4603      	mov	r3, r0
 800071c:	b29b      	uxth	r3, r3
 800071e:	4619      	mov	r1, r3
 8000720:	4620      	mov	r0, r4
 8000722:	f005 fae3 	bl	8005cec <CDC_Transmit_FS>
	 	 }

 }
 8000726:	bf00      	nop
 8000728:	bd98      	pop	{r3, r4, r7, pc}
 800072a:	bf00      	nop
 800072c:	20000230 	.word	0x20000230
 8000730:	2000022c 	.word	0x2000022c

08000734 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000738:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800073a:	e7fe      	b.n	800073a <Error_Handler+0x6>

0800073c <RingBuffer_GetFreeSpace>:
#include "ringbuffer.h"
#include <string.h>

uint16_t RingBuffer_GetFreeSpace(RingBuffer *buf) {
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
	if(buf->tail == buf->head)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	f8b3 23ea 	ldrh.w	r2, [r3, #1002]	; 0x3ea
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	f8b3 33e8 	ldrh.w	r3, [r3, #1000]	; 0x3e8
 8000750:	429a      	cmp	r2, r3
 8000752:	d102      	bne.n	800075a <RingBuffer_GetFreeSpace+0x1e>
		return RING_BUFFER_LENGTH - 1;
 8000754:	f240 33e7 	movw	r3, #999	; 0x3e7
 8000758:	e01d      	b.n	8000796 <RingBuffer_GetFreeSpace+0x5a>

	if(buf->head > buf->tail)
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	f8b3 23e8 	ldrh.w	r2, [r3, #1000]	; 0x3e8
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	f8b3 33ea 	ldrh.w	r3, [r3, #1002]	; 0x3ea
 8000766:	429a      	cmp	r2, r3
 8000768:	d90b      	bls.n	8000782 <RingBuffer_GetFreeSpace+0x46>
		return RING_BUFFER_LENGTH - ((buf->head - buf->tail) + 1);
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	f8b3 23ea 	ldrh.w	r2, [r3, #1002]	; 0x3ea
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	f8b3 33e8 	ldrh.w	r3, [r3, #1000]	; 0x3e8
 8000776:	1ad3      	subs	r3, r2, r3
 8000778:	b29b      	uxth	r3, r3
 800077a:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 800077e:	b29b      	uxth	r3, r3
 8000780:	e009      	b.n	8000796 <RingBuffer_GetFreeSpace+0x5a>
	else
		return  (buf->tail - buf->head) - 1;
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	f8b3 23ea 	ldrh.w	r2, [r3, #1002]	; 0x3ea
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	f8b3 33e8 	ldrh.w	r3, [r3, #1000]	; 0x3e8
 800078e:	1ad3      	subs	r3, r2, r3
 8000790:	b29b      	uxth	r3, r3
 8000792:	3b01      	subs	r3, #1
 8000794:	b29b      	uxth	r3, r3
}
 8000796:	4618      	mov	r0, r3
 8000798:	370c      	adds	r7, #12
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr

080007a2 <RingBuffer_GetDataLength>:

uint16_t RingBuffer_GetDataLength(RingBuffer *buf) {
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b082      	sub	sp, #8
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	6078      	str	r0, [r7, #4]
	return RING_BUFFER_LENGTH - (RingBuffer_GetFreeSpace(buf) + 1);
 80007aa:	6878      	ldr	r0, [r7, #4]
 80007ac:	f7ff ffc6 	bl	800073c <RingBuffer_GetFreeSpace>
 80007b0:	4603      	mov	r3, r0
 80007b2:	f5c3 7379 	rsb	r3, r3, #996	; 0x3e4
 80007b6:	3303      	adds	r3, #3
 80007b8:	b29b      	uxth	r3, r3
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
	...

080007c4 <RingBuffer_Read>:
void RingBuffer_Init(RingBuffer *buf) {
	buf->head = buf->tail = 0;
	memset(buf->buf, 0, RING_BUFFER_LENGTH);
}

uint16_t RingBuffer_Read(RingBuffer *buf, uint8_t *data, uint16_t len) {
 80007c4:	b480      	push	{r7}
 80007c6:	b087      	sub	sp, #28
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	60f8      	str	r0, [r7, #12]
 80007cc:	60b9      	str	r1, [r7, #8]
 80007ce:	4613      	mov	r3, r2
 80007d0:	80fb      	strh	r3, [r7, #6]
	uint16_t counter = 0;
 80007d2:	2300      	movs	r3, #0
 80007d4:	82fb      	strh	r3, [r7, #22]

	while(buf->tail != buf->head && counter < len) {
 80007d6:	e01f      	b.n	8000818 <RingBuffer_Read+0x54>
		data[counter++] = buf->buf[buf->tail];
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	f8b3 33ea 	ldrh.w	r3, [r3, #1002]	; 0x3ea
 80007de:	4619      	mov	r1, r3
 80007e0:	8afb      	ldrh	r3, [r7, #22]
 80007e2:	1c5a      	adds	r2, r3, #1
 80007e4:	82fa      	strh	r2, [r7, #22]
 80007e6:	461a      	mov	r2, r3
 80007e8:	68bb      	ldr	r3, [r7, #8]
 80007ea:	4413      	add	r3, r2
 80007ec:	68fa      	ldr	r2, [r7, #12]
 80007ee:	5c52      	ldrb	r2, [r2, r1]
 80007f0:	701a      	strb	r2, [r3, #0]
		buf->tail = (buf->tail + 1) % RING_BUFFER_LENGTH;
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	f8b3 33ea 	ldrh.w	r3, [r3, #1002]	; 0x3ea
 80007f8:	3301      	adds	r3, #1
 80007fa:	4a11      	ldr	r2, [pc, #68]	; (8000840 <RingBuffer_Read+0x7c>)
 80007fc:	fb82 1203 	smull	r1, r2, r2, r3
 8000800:	1191      	asrs	r1, r2, #6
 8000802:	17da      	asrs	r2, r3, #31
 8000804:	1a8a      	subs	r2, r1, r2
 8000806:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800080a:	fb01 f202 	mul.w	r2, r1, r2
 800080e:	1a9a      	subs	r2, r3, r2
 8000810:	b292      	uxth	r2, r2
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	f8a3 23ea 	strh.w	r2, [r3, #1002]	; 0x3ea
	while(buf->tail != buf->head && counter < len) {
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	f8b3 23ea 	ldrh.w	r2, [r3, #1002]	; 0x3ea
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	f8b3 33e8 	ldrh.w	r3, [r3, #1000]	; 0x3e8
 8000824:	429a      	cmp	r2, r3
 8000826:	d003      	beq.n	8000830 <RingBuffer_Read+0x6c>
 8000828:	8afa      	ldrh	r2, [r7, #22]
 800082a:	88fb      	ldrh	r3, [r7, #6]
 800082c:	429a      	cmp	r2, r3
 800082e:	d3d3      	bcc.n	80007d8 <RingBuffer_Read+0x14>
	}
	return counter;
 8000830:	8afb      	ldrh	r3, [r7, #22]
}
 8000832:	4618      	mov	r0, r3
 8000834:	371c      	adds	r7, #28
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	10624dd3 	.word	0x10624dd3

08000844 <RingBuffer_Write>:

uint8_t RingBuffer_Write(RingBuffer *buf, uint8_t *data, uint16_t len) {
 8000844:	b580      	push	{r7, lr}
 8000846:	b086      	sub	sp, #24
 8000848:	af00      	add	r7, sp, #0
 800084a:	60f8      	str	r0, [r7, #12]
 800084c:	60b9      	str	r1, [r7, #8]
 800084e:	4613      	mov	r3, r2
 8000850:	80fb      	strh	r3, [r7, #6]
	uint16_t counter = 0;
 8000852:	2300      	movs	r3, #0
 8000854:	82fb      	strh	r3, [r7, #22]
	uint16_t freeSpace = RingBuffer_GetFreeSpace(buf);
 8000856:	68f8      	ldr	r0, [r7, #12]
 8000858:	f7ff ff70 	bl	800073c <RingBuffer_GetFreeSpace>
 800085c:	4603      	mov	r3, r0
 800085e:	82bb      	strh	r3, [r7, #20]

	if(freeSpace == 0)
 8000860:	8abb      	ldrh	r3, [r7, #20]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d101      	bne.n	800086a <RingBuffer_Write+0x26>
		return RING_BUFFER_FULL;
 8000866:	2301      	movs	r3, #1
 8000868:	e029      	b.n	80008be <RingBuffer_Write+0x7a>
	else if (freeSpace < len)
 800086a:	8aba      	ldrh	r2, [r7, #20]
 800086c:	88fb      	ldrh	r3, [r7, #6]
 800086e:	429a      	cmp	r2, r3
 8000870:	d220      	bcs.n	80008b4 <RingBuffer_Write+0x70>
		return RING_BUFFER_NO_SUFFICIENT_SPACE;
 8000872:	2302      	movs	r3, #2
 8000874:	e023      	b.n	80008be <RingBuffer_Write+0x7a>

	while(counter < len) {
		buf->buf[buf->head] = data[counter++];
 8000876:	8afb      	ldrh	r3, [r7, #22]
 8000878:	1c5a      	adds	r2, r3, #1
 800087a:	82fa      	strh	r2, [r7, #22]
 800087c:	461a      	mov	r2, r3
 800087e:	68bb      	ldr	r3, [r7, #8]
 8000880:	4413      	add	r3, r2
 8000882:	68fa      	ldr	r2, [r7, #12]
 8000884:	f8b2 23e8 	ldrh.w	r2, [r2, #1000]	; 0x3e8
 8000888:	7819      	ldrb	r1, [r3, #0]
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	5499      	strb	r1, [r3, r2]
		buf->head = (buf->head + 1) % RING_BUFFER_LENGTH;
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	f8b3 33e8 	ldrh.w	r3, [r3, #1000]	; 0x3e8
 8000894:	3301      	adds	r3, #1
 8000896:	4a0c      	ldr	r2, [pc, #48]	; (80008c8 <RingBuffer_Write+0x84>)
 8000898:	fb82 1203 	smull	r1, r2, r2, r3
 800089c:	1191      	asrs	r1, r2, #6
 800089e:	17da      	asrs	r2, r3, #31
 80008a0:	1a8a      	subs	r2, r1, r2
 80008a2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80008a6:	fb01 f202 	mul.w	r2, r1, r2
 80008aa:	1a9a      	subs	r2, r3, r2
 80008ac:	b292      	uxth	r2, r2
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	f8a3 23e8 	strh.w	r2, [r3, #1000]	; 0x3e8
	while(counter < len) {
 80008b4:	8afa      	ldrh	r2, [r7, #22]
 80008b6:	88fb      	ldrh	r3, [r7, #6]
 80008b8:	429a      	cmp	r2, r3
 80008ba:	d3dc      	bcc.n	8000876 <RingBuffer_Write+0x32>
	}
 	return RING_BUFFER_OK;
 80008bc:	2300      	movs	r3, #0
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3718      	adds	r7, #24
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	10624dd3 	.word	0x10624dd3

080008cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	607b      	str	r3, [r7, #4]
 80008d6:	4b10      	ldr	r3, [pc, #64]	; (8000918 <HAL_MspInit+0x4c>)
 80008d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008da:	4a0f      	ldr	r2, [pc, #60]	; (8000918 <HAL_MspInit+0x4c>)
 80008dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008e0:	6453      	str	r3, [r2, #68]	; 0x44
 80008e2:	4b0d      	ldr	r3, [pc, #52]	; (8000918 <HAL_MspInit+0x4c>)
 80008e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	603b      	str	r3, [r7, #0]
 80008f2:	4b09      	ldr	r3, [pc, #36]	; (8000918 <HAL_MspInit+0x4c>)
 80008f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f6:	4a08      	ldr	r2, [pc, #32]	; (8000918 <HAL_MspInit+0x4c>)
 80008f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008fc:	6413      	str	r3, [r2, #64]	; 0x40
 80008fe:	4b06      	ldr	r3, [pc, #24]	; (8000918 <HAL_MspInit+0x4c>)
 8000900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000906:	603b      	str	r3, [r7, #0]
 8000908:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800090a:	2007      	movs	r0, #7
 800090c:	f000 fa14 	bl	8000d38 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000910:	bf00      	nop
 8000912:	3708      	adds	r7, #8
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	40023800 	.word	0x40023800

0800091c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000920:	e7fe      	b.n	8000920 <NMI_Handler+0x4>

08000922 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000922:	b480      	push	{r7}
 8000924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000926:	e7fe      	b.n	8000926 <HardFault_Handler+0x4>

08000928 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800092c:	e7fe      	b.n	800092c <MemManage_Handler+0x4>

0800092e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800092e:	b480      	push	{r7}
 8000930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000932:	e7fe      	b.n	8000932 <BusFault_Handler+0x4>

08000934 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000938:	e7fe      	b.n	8000938 <UsageFault_Handler+0x4>

0800093a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800093a:	b480      	push	{r7}
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800093e:	bf00      	nop
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr

08000948 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800094c:	bf00      	nop
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr

08000956 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800095a:	bf00      	nop
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr

08000964 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000968:	f000 f8d4 	bl	8000b14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800096c:	bf00      	nop
 800096e:	bd80      	pop	{r7, pc}

08000970 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000974:	4802      	ldr	r0, [pc, #8]	; (8000980 <OTG_FS_IRQHandler+0x10>)
 8000976:	f000 fd0b 	bl	8001390 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	20001edc 	.word	0x20001edc

08000984 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b086      	sub	sp, #24
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800098c:	4a14      	ldr	r2, [pc, #80]	; (80009e0 <_sbrk+0x5c>)
 800098e:	4b15      	ldr	r3, [pc, #84]	; (80009e4 <_sbrk+0x60>)
 8000990:	1ad3      	subs	r3, r2, r3
 8000992:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000998:	4b13      	ldr	r3, [pc, #76]	; (80009e8 <_sbrk+0x64>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d102      	bne.n	80009a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009a0:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <_sbrk+0x64>)
 80009a2:	4a12      	ldr	r2, [pc, #72]	; (80009ec <_sbrk+0x68>)
 80009a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009a6:	4b10      	ldr	r3, [pc, #64]	; (80009e8 <_sbrk+0x64>)
 80009a8:	681a      	ldr	r2, [r3, #0]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	4413      	add	r3, r2
 80009ae:	693a      	ldr	r2, [r7, #16]
 80009b0:	429a      	cmp	r2, r3
 80009b2:	d207      	bcs.n	80009c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009b4:	f005 fddc 	bl	8006570 <__errno>
 80009b8:	4602      	mov	r2, r0
 80009ba:	230c      	movs	r3, #12
 80009bc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80009be:	f04f 33ff 	mov.w	r3, #4294967295
 80009c2:	e009      	b.n	80009d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009c4:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <_sbrk+0x64>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009ca:	4b07      	ldr	r3, [pc, #28]	; (80009e8 <_sbrk+0x64>)
 80009cc:	681a      	ldr	r2, [r3, #0]
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4413      	add	r3, r2
 80009d2:	4a05      	ldr	r2, [pc, #20]	; (80009e8 <_sbrk+0x64>)
 80009d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009d6:	68fb      	ldr	r3, [r7, #12]
}
 80009d8:	4618      	mov	r0, r3
 80009da:	3718      	adds	r7, #24
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	20020000 	.word	0x20020000
 80009e4:	00000600 	.word	0x00000600
 80009e8:	2000021c 	.word	0x2000021c
 80009ec:	200022e8 	.word	0x200022e8

080009f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009f4:	4b08      	ldr	r3, [pc, #32]	; (8000a18 <SystemInit+0x28>)
 80009f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009fa:	4a07      	ldr	r2, [pc, #28]	; (8000a18 <SystemInit+0x28>)
 80009fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a04:	4b04      	ldr	r3, [pc, #16]	; (8000a18 <SystemInit+0x28>)
 8000a06:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a0a:	609a      	str	r2, [r3, #8]
#endif
}
 8000a0c:	bf00      	nop
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	e000ed00 	.word	0xe000ed00

08000a1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a54 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000a20:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000a22:	e003      	b.n	8000a2c <LoopCopyDataInit>

08000a24 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000a24:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000a26:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000a28:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000a2a:	3104      	adds	r1, #4

08000a2c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000a2c:	480b      	ldr	r0, [pc, #44]	; (8000a5c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000a2e:	4b0c      	ldr	r3, [pc, #48]	; (8000a60 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000a30:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000a32:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000a34:	d3f6      	bcc.n	8000a24 <CopyDataInit>
  ldr  r2, =_sbss
 8000a36:	4a0b      	ldr	r2, [pc, #44]	; (8000a64 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000a38:	e002      	b.n	8000a40 <LoopFillZerobss>

08000a3a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000a3a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000a3c:	f842 3b04 	str.w	r3, [r2], #4

08000a40 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000a40:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000a42:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000a44:	d3f9      	bcc.n	8000a3a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a46:	f7ff ffd3 	bl	80009f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a4a:	f005 fd97 	bl	800657c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a4e:	f7ff fd43 	bl	80004d8 <main>
  bx  lr    
 8000a52:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a54:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000a58:	08006810 	.word	0x08006810
  ldr  r0, =_sdata
 8000a5c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000a60:	20000200 	.word	0x20000200
  ldr  r2, =_sbss
 8000a64:	20000200 	.word	0x20000200
  ldr  r3, = _ebss
 8000a68:	200022e8 	.word	0x200022e8

08000a6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a6c:	e7fe      	b.n	8000a6c <ADC_IRQHandler>
	...

08000a70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a74:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <HAL_Init+0x40>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a0d      	ldr	r2, [pc, #52]	; (8000ab0 <HAL_Init+0x40>)
 8000a7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a80:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <HAL_Init+0x40>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a0a      	ldr	r2, [pc, #40]	; (8000ab0 <HAL_Init+0x40>)
 8000a86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a8c:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <HAL_Init+0x40>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a07      	ldr	r2, [pc, #28]	; (8000ab0 <HAL_Init+0x40>)
 8000a92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a98:	2003      	movs	r0, #3
 8000a9a:	f000 f94d 	bl	8000d38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	f000 f808 	bl	8000ab4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aa4:	f7ff ff12 	bl	80008cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aa8:	2300      	movs	r3, #0
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40023c00 	.word	0x40023c00

08000ab4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000abc:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <HAL_InitTick+0x54>)
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	4b12      	ldr	r3, [pc, #72]	; (8000b0c <HAL_InitTick+0x58>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f000 f965 	bl	8000da2 <HAL_SYSTICK_Config>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	e00e      	b.n	8000b00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	2b0f      	cmp	r3, #15
 8000ae6:	d80a      	bhi.n	8000afe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	6879      	ldr	r1, [r7, #4]
 8000aec:	f04f 30ff 	mov.w	r0, #4294967295
 8000af0:	f000 f92d 	bl	8000d4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000af4:	4a06      	ldr	r2, [pc, #24]	; (8000b10 <HAL_InitTick+0x5c>)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000afa:	2300      	movs	r3, #0
 8000afc:	e000      	b.n	8000b00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000afe:	2301      	movs	r3, #1
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	3708      	adds	r7, #8
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	20000014 	.word	0x20000014
 8000b0c:	2000001c 	.word	0x2000001c
 8000b10:	20000018 	.word	0x20000018

08000b14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b18:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <HAL_IncTick+0x20>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <HAL_IncTick+0x24>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4413      	add	r3, r2
 8000b24:	4a04      	ldr	r2, [pc, #16]	; (8000b38 <HAL_IncTick+0x24>)
 8000b26:	6013      	str	r3, [r2, #0]
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	2000001c 	.word	0x2000001c
 8000b38:	20000a08 	.word	0x20000a08

08000b3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b40:	4b03      	ldr	r3, [pc, #12]	; (8000b50 <HAL_GetTick+0x14>)
 8000b42:	681b      	ldr	r3, [r3, #0]
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	20000a08 	.word	0x20000a08

08000b54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b5c:	f7ff ffee 	bl	8000b3c <HAL_GetTick>
 8000b60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b6c:	d005      	beq.n	8000b7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b6e:	4b09      	ldr	r3, [pc, #36]	; (8000b94 <HAL_Delay+0x40>)
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	461a      	mov	r2, r3
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	4413      	add	r3, r2
 8000b78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b7a:	bf00      	nop
 8000b7c:	f7ff ffde 	bl	8000b3c <HAL_GetTick>
 8000b80:	4602      	mov	r2, r0
 8000b82:	68bb      	ldr	r3, [r7, #8]
 8000b84:	1ad3      	subs	r3, r2, r3
 8000b86:	68fa      	ldr	r2, [r7, #12]
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	d8f7      	bhi.n	8000b7c <HAL_Delay+0x28>
  {
  }
}
 8000b8c:	bf00      	nop
 8000b8e:	3710      	adds	r7, #16
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	2000001c 	.word	0x2000001c

08000b98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b085      	sub	sp, #20
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	f003 0307 	and.w	r3, r3, #7
 8000ba6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ba8:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <__NVIC_SetPriorityGrouping+0x44>)
 8000baa:	68db      	ldr	r3, [r3, #12]
 8000bac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bae:	68ba      	ldr	r2, [r7, #8]
 8000bb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bca:	4a04      	ldr	r2, [pc, #16]	; (8000bdc <__NVIC_SetPriorityGrouping+0x44>)
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	60d3      	str	r3, [r2, #12]
}
 8000bd0:	bf00      	nop
 8000bd2:	3714      	adds	r7, #20
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr
 8000bdc:	e000ed00 	.word	0xe000ed00

08000be0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000be4:	4b04      	ldr	r3, [pc, #16]	; (8000bf8 <__NVIC_GetPriorityGrouping+0x18>)
 8000be6:	68db      	ldr	r3, [r3, #12]
 8000be8:	0a1b      	lsrs	r3, r3, #8
 8000bea:	f003 0307 	and.w	r3, r3, #7
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	e000ed00 	.word	0xe000ed00

08000bfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	db0b      	blt.n	8000c26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c0e:	79fb      	ldrb	r3, [r7, #7]
 8000c10:	f003 021f 	and.w	r2, r3, #31
 8000c14:	4907      	ldr	r1, [pc, #28]	; (8000c34 <__NVIC_EnableIRQ+0x38>)
 8000c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1a:	095b      	lsrs	r3, r3, #5
 8000c1c:	2001      	movs	r0, #1
 8000c1e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c26:	bf00      	nop
 8000c28:	370c      	adds	r7, #12
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	e000e100 	.word	0xe000e100

08000c38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	6039      	str	r1, [r7, #0]
 8000c42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	db0a      	blt.n	8000c62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	b2da      	uxtb	r2, r3
 8000c50:	490c      	ldr	r1, [pc, #48]	; (8000c84 <__NVIC_SetPriority+0x4c>)
 8000c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c56:	0112      	lsls	r2, r2, #4
 8000c58:	b2d2      	uxtb	r2, r2
 8000c5a:	440b      	add	r3, r1
 8000c5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c60:	e00a      	b.n	8000c78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	b2da      	uxtb	r2, r3
 8000c66:	4908      	ldr	r1, [pc, #32]	; (8000c88 <__NVIC_SetPriority+0x50>)
 8000c68:	79fb      	ldrb	r3, [r7, #7]
 8000c6a:	f003 030f 	and.w	r3, r3, #15
 8000c6e:	3b04      	subs	r3, #4
 8000c70:	0112      	lsls	r2, r2, #4
 8000c72:	b2d2      	uxtb	r2, r2
 8000c74:	440b      	add	r3, r1
 8000c76:	761a      	strb	r2, [r3, #24]
}
 8000c78:	bf00      	nop
 8000c7a:	370c      	adds	r7, #12
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr
 8000c84:	e000e100 	.word	0xe000e100
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b089      	sub	sp, #36	; 0x24
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	60f8      	str	r0, [r7, #12]
 8000c94:	60b9      	str	r1, [r7, #8]
 8000c96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	f003 0307 	and.w	r3, r3, #7
 8000c9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ca0:	69fb      	ldr	r3, [r7, #28]
 8000ca2:	f1c3 0307 	rsb	r3, r3, #7
 8000ca6:	2b04      	cmp	r3, #4
 8000ca8:	bf28      	it	cs
 8000caa:	2304      	movcs	r3, #4
 8000cac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	3304      	adds	r3, #4
 8000cb2:	2b06      	cmp	r3, #6
 8000cb4:	d902      	bls.n	8000cbc <NVIC_EncodePriority+0x30>
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	3b03      	subs	r3, #3
 8000cba:	e000      	b.n	8000cbe <NVIC_EncodePriority+0x32>
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc0:	f04f 32ff 	mov.w	r2, #4294967295
 8000cc4:	69bb      	ldr	r3, [r7, #24]
 8000cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cca:	43da      	mvns	r2, r3
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	401a      	ands	r2, r3
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cd4:	f04f 31ff 	mov.w	r1, #4294967295
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	fa01 f303 	lsl.w	r3, r1, r3
 8000cde:	43d9      	mvns	r1, r3
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce4:	4313      	orrs	r3, r2
         );
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3724      	adds	r7, #36	; 0x24
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
	...

08000cf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	3b01      	subs	r3, #1
 8000d00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d04:	d301      	bcc.n	8000d0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d06:	2301      	movs	r3, #1
 8000d08:	e00f      	b.n	8000d2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d0a:	4a0a      	ldr	r2, [pc, #40]	; (8000d34 <SysTick_Config+0x40>)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	3b01      	subs	r3, #1
 8000d10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d12:	210f      	movs	r1, #15
 8000d14:	f04f 30ff 	mov.w	r0, #4294967295
 8000d18:	f7ff ff8e 	bl	8000c38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d1c:	4b05      	ldr	r3, [pc, #20]	; (8000d34 <SysTick_Config+0x40>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d22:	4b04      	ldr	r3, [pc, #16]	; (8000d34 <SysTick_Config+0x40>)
 8000d24:	2207      	movs	r2, #7
 8000d26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d28:	2300      	movs	r3, #0
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	e000e010 	.word	0xe000e010

08000d38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d40:	6878      	ldr	r0, [r7, #4]
 8000d42:	f7ff ff29 	bl	8000b98 <__NVIC_SetPriorityGrouping>
}
 8000d46:	bf00      	nop
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b086      	sub	sp, #24
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	4603      	mov	r3, r0
 8000d56:	60b9      	str	r1, [r7, #8]
 8000d58:	607a      	str	r2, [r7, #4]
 8000d5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d60:	f7ff ff3e 	bl	8000be0 <__NVIC_GetPriorityGrouping>
 8000d64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d66:	687a      	ldr	r2, [r7, #4]
 8000d68:	68b9      	ldr	r1, [r7, #8]
 8000d6a:	6978      	ldr	r0, [r7, #20]
 8000d6c:	f7ff ff8e 	bl	8000c8c <NVIC_EncodePriority>
 8000d70:	4602      	mov	r2, r0
 8000d72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d76:	4611      	mov	r1, r2
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f7ff ff5d 	bl	8000c38 <__NVIC_SetPriority>
}
 8000d7e:	bf00      	nop
 8000d80:	3718      	adds	r7, #24
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d86:	b580      	push	{r7, lr}
 8000d88:	b082      	sub	sp, #8
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff ff31 	bl	8000bfc <__NVIC_EnableIRQ>
}
 8000d9a:	bf00      	nop
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}

08000da2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000da2:	b580      	push	{r7, lr}
 8000da4:	b082      	sub	sp, #8
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000daa:	6878      	ldr	r0, [r7, #4]
 8000dac:	f7ff ffa2 	bl	8000cf4 <SysTick_Config>
 8000db0:	4603      	mov	r3, r0
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
	...

08000dbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b089      	sub	sp, #36	; 0x24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	61fb      	str	r3, [r7, #28]
 8000dd6:	e16b      	b.n	80010b0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000dd8:	2201      	movs	r2, #1
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	697a      	ldr	r2, [r7, #20]
 8000de8:	4013      	ands	r3, r2
 8000dea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000dec:	693a      	ldr	r2, [r7, #16]
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	f040 815a 	bne.w	80010aa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d00b      	beq.n	8000e16 <HAL_GPIO_Init+0x5a>
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	2b02      	cmp	r3, #2
 8000e04:	d007      	beq.n	8000e16 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e0a:	2b11      	cmp	r3, #17
 8000e0c:	d003      	beq.n	8000e16 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	2b12      	cmp	r3, #18
 8000e14:	d130      	bne.n	8000e78 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	689b      	ldr	r3, [r3, #8]
 8000e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e1c:	69fb      	ldr	r3, [r7, #28]
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	2203      	movs	r2, #3
 8000e22:	fa02 f303 	lsl.w	r3, r2, r3
 8000e26:	43db      	mvns	r3, r3
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	68da      	ldr	r2, [r3, #12]
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	005b      	lsls	r3, r3, #1
 8000e36:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3a:	69ba      	ldr	r2, [r7, #24]
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	69ba      	ldr	r2, [r7, #24]
 8000e44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	43db      	mvns	r3, r3
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	091b      	lsrs	r3, r3, #4
 8000e62:	f003 0201 	and.w	r2, r3, #1
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	2203      	movs	r2, #3
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	43db      	mvns	r3, r3
 8000e8a:	69ba      	ldr	r2, [r7, #24]
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	689a      	ldr	r2, [r3, #8]
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	2b02      	cmp	r3, #2
 8000eae:	d003      	beq.n	8000eb8 <HAL_GPIO_Init+0xfc>
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	2b12      	cmp	r3, #18
 8000eb6:	d123      	bne.n	8000f00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	08da      	lsrs	r2, r3, #3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	3208      	adds	r2, #8
 8000ec0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	f003 0307 	and.w	r3, r3, #7
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	220f      	movs	r2, #15
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	691a      	ldr	r2, [r3, #16]
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	f003 0307 	and.w	r3, r3, #7
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	08da      	lsrs	r2, r3, #3
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	3208      	adds	r2, #8
 8000efa:	69b9      	ldr	r1, [r7, #24]
 8000efc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	2203      	movs	r2, #3
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	43db      	mvns	r3, r3
 8000f12:	69ba      	ldr	r2, [r7, #24]
 8000f14:	4013      	ands	r3, r2
 8000f16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f003 0203 	and.w	r2, r3, #3
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	f000 80b4 	beq.w	80010aa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	60fb      	str	r3, [r7, #12]
 8000f46:	4b5f      	ldr	r3, [pc, #380]	; (80010c4 <HAL_GPIO_Init+0x308>)
 8000f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4a:	4a5e      	ldr	r2, [pc, #376]	; (80010c4 <HAL_GPIO_Init+0x308>)
 8000f4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f50:	6453      	str	r3, [r2, #68]	; 0x44
 8000f52:	4b5c      	ldr	r3, [pc, #368]	; (80010c4 <HAL_GPIO_Init+0x308>)
 8000f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f5e:	4a5a      	ldr	r2, [pc, #360]	; (80010c8 <HAL_GPIO_Init+0x30c>)
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	089b      	lsrs	r3, r3, #2
 8000f64:	3302      	adds	r3, #2
 8000f66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	f003 0303 	and.w	r3, r3, #3
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	220f      	movs	r2, #15
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	43db      	mvns	r3, r3
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a51      	ldr	r2, [pc, #324]	; (80010cc <HAL_GPIO_Init+0x310>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d02b      	beq.n	8000fe2 <HAL_GPIO_Init+0x226>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a50      	ldr	r2, [pc, #320]	; (80010d0 <HAL_GPIO_Init+0x314>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d025      	beq.n	8000fde <HAL_GPIO_Init+0x222>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a4f      	ldr	r2, [pc, #316]	; (80010d4 <HAL_GPIO_Init+0x318>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d01f      	beq.n	8000fda <HAL_GPIO_Init+0x21e>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a4e      	ldr	r2, [pc, #312]	; (80010d8 <HAL_GPIO_Init+0x31c>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d019      	beq.n	8000fd6 <HAL_GPIO_Init+0x21a>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a4d      	ldr	r2, [pc, #308]	; (80010dc <HAL_GPIO_Init+0x320>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d013      	beq.n	8000fd2 <HAL_GPIO_Init+0x216>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a4c      	ldr	r2, [pc, #304]	; (80010e0 <HAL_GPIO_Init+0x324>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d00d      	beq.n	8000fce <HAL_GPIO_Init+0x212>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a4b      	ldr	r2, [pc, #300]	; (80010e4 <HAL_GPIO_Init+0x328>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d007      	beq.n	8000fca <HAL_GPIO_Init+0x20e>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a4a      	ldr	r2, [pc, #296]	; (80010e8 <HAL_GPIO_Init+0x32c>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d101      	bne.n	8000fc6 <HAL_GPIO_Init+0x20a>
 8000fc2:	2307      	movs	r3, #7
 8000fc4:	e00e      	b.n	8000fe4 <HAL_GPIO_Init+0x228>
 8000fc6:	2308      	movs	r3, #8
 8000fc8:	e00c      	b.n	8000fe4 <HAL_GPIO_Init+0x228>
 8000fca:	2306      	movs	r3, #6
 8000fcc:	e00a      	b.n	8000fe4 <HAL_GPIO_Init+0x228>
 8000fce:	2305      	movs	r3, #5
 8000fd0:	e008      	b.n	8000fe4 <HAL_GPIO_Init+0x228>
 8000fd2:	2304      	movs	r3, #4
 8000fd4:	e006      	b.n	8000fe4 <HAL_GPIO_Init+0x228>
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	e004      	b.n	8000fe4 <HAL_GPIO_Init+0x228>
 8000fda:	2302      	movs	r3, #2
 8000fdc:	e002      	b.n	8000fe4 <HAL_GPIO_Init+0x228>
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e000      	b.n	8000fe4 <HAL_GPIO_Init+0x228>
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	69fa      	ldr	r2, [r7, #28]
 8000fe6:	f002 0203 	and.w	r2, r2, #3
 8000fea:	0092      	lsls	r2, r2, #2
 8000fec:	4093      	lsls	r3, r2
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ff4:	4934      	ldr	r1, [pc, #208]	; (80010c8 <HAL_GPIO_Init+0x30c>)
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	089b      	lsrs	r3, r3, #2
 8000ffa:	3302      	adds	r3, #2
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001002:	4b3a      	ldr	r3, [pc, #232]	; (80010ec <HAL_GPIO_Init+0x330>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	43db      	mvns	r3, r3
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	4013      	ands	r3, r2
 8001010:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800101a:	2b00      	cmp	r3, #0
 800101c:	d003      	beq.n	8001026 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	4313      	orrs	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001026:	4a31      	ldr	r2, [pc, #196]	; (80010ec <HAL_GPIO_Init+0x330>)
 8001028:	69bb      	ldr	r3, [r7, #24]
 800102a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800102c:	4b2f      	ldr	r3, [pc, #188]	; (80010ec <HAL_GPIO_Init+0x330>)
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	43db      	mvns	r3, r3
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4013      	ands	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001044:	2b00      	cmp	r3, #0
 8001046:	d003      	beq.n	8001050 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	4313      	orrs	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001050:	4a26      	ldr	r2, [pc, #152]	; (80010ec <HAL_GPIO_Init+0x330>)
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001056:	4b25      	ldr	r3, [pc, #148]	; (80010ec <HAL_GPIO_Init+0x330>)
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	43db      	mvns	r3, r3
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	4013      	ands	r3, r2
 8001064:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800106e:	2b00      	cmp	r3, #0
 8001070:	d003      	beq.n	800107a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	4313      	orrs	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800107a:	4a1c      	ldr	r2, [pc, #112]	; (80010ec <HAL_GPIO_Init+0x330>)
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001080:	4b1a      	ldr	r3, [pc, #104]	; (80010ec <HAL_GPIO_Init+0x330>)
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	43db      	mvns	r3, r3
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	4013      	ands	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001098:	2b00      	cmp	r3, #0
 800109a:	d003      	beq.n	80010a4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010a4:	4a11      	ldr	r2, [pc, #68]	; (80010ec <HAL_GPIO_Init+0x330>)
 80010a6:	69bb      	ldr	r3, [r7, #24]
 80010a8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	3301      	adds	r3, #1
 80010ae:	61fb      	str	r3, [r7, #28]
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	2b0f      	cmp	r3, #15
 80010b4:	f67f ae90 	bls.w	8000dd8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010b8:	bf00      	nop
 80010ba:	3724      	adds	r7, #36	; 0x24
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	40023800 	.word	0x40023800
 80010c8:	40013800 	.word	0x40013800
 80010cc:	40020000 	.word	0x40020000
 80010d0:	40020400 	.word	0x40020400
 80010d4:	40020800 	.word	0x40020800
 80010d8:	40020c00 	.word	0x40020c00
 80010dc:	40021000 	.word	0x40021000
 80010e0:	40021400 	.word	0x40021400
 80010e4:	40021800 	.word	0x40021800
 80010e8:	40021c00 	.word	0x40021c00
 80010ec:	40013c00 	.word	0x40013c00

080010f0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80010f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010f2:	b08f      	sub	sp, #60	; 0x3c
 80010f4:	af0a      	add	r7, sp, #40	; 0x28
 80010f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d101      	bne.n	8001102 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e10f      	b.n	8001322 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800110e:	b2db      	uxtb	r3, r3
 8001110:	2b00      	cmp	r3, #0
 8001112:	d106      	bne.n	8001122 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2200      	movs	r2, #0
 8001118:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f004 ff2b 	bl	8005f78 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2203      	movs	r2, #3
 8001126:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800112e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001132:	2b00      	cmp	r3, #0
 8001134:	d102      	bne.n	800113c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2200      	movs	r2, #0
 800113a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4618      	mov	r0, r3
 8001142:	f001 fea8 	bl	8002e96 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	603b      	str	r3, [r7, #0]
 800114c:	687e      	ldr	r6, [r7, #4]
 800114e:	466d      	mov	r5, sp
 8001150:	f106 0410 	add.w	r4, r6, #16
 8001154:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001156:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001158:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800115a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800115c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001160:	e885 0003 	stmia.w	r5, {r0, r1}
 8001164:	1d33      	adds	r3, r6, #4
 8001166:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001168:	6838      	ldr	r0, [r7, #0]
 800116a:	f001 fd7f 	bl	8002c6c <USB_CoreInit>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d005      	beq.n	8001180 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2202      	movs	r2, #2
 8001178:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800117c:	2301      	movs	r3, #1
 800117e:	e0d0      	b.n	8001322 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2100      	movs	r1, #0
 8001186:	4618      	mov	r0, r3
 8001188:	f001 fe96 	bl	8002eb8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800118c:	2300      	movs	r3, #0
 800118e:	73fb      	strb	r3, [r7, #15]
 8001190:	e04a      	b.n	8001228 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001192:	7bfa      	ldrb	r2, [r7, #15]
 8001194:	6879      	ldr	r1, [r7, #4]
 8001196:	4613      	mov	r3, r2
 8001198:	00db      	lsls	r3, r3, #3
 800119a:	1a9b      	subs	r3, r3, r2
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	440b      	add	r3, r1
 80011a0:	333d      	adds	r3, #61	; 0x3d
 80011a2:	2201      	movs	r2, #1
 80011a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80011a6:	7bfa      	ldrb	r2, [r7, #15]
 80011a8:	6879      	ldr	r1, [r7, #4]
 80011aa:	4613      	mov	r3, r2
 80011ac:	00db      	lsls	r3, r3, #3
 80011ae:	1a9b      	subs	r3, r3, r2
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	440b      	add	r3, r1
 80011b4:	333c      	adds	r3, #60	; 0x3c
 80011b6:	7bfa      	ldrb	r2, [r7, #15]
 80011b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80011ba:	7bfa      	ldrb	r2, [r7, #15]
 80011bc:	7bfb      	ldrb	r3, [r7, #15]
 80011be:	b298      	uxth	r0, r3
 80011c0:	6879      	ldr	r1, [r7, #4]
 80011c2:	4613      	mov	r3, r2
 80011c4:	00db      	lsls	r3, r3, #3
 80011c6:	1a9b      	subs	r3, r3, r2
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	440b      	add	r3, r1
 80011cc:	3342      	adds	r3, #66	; 0x42
 80011ce:	4602      	mov	r2, r0
 80011d0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80011d2:	7bfa      	ldrb	r2, [r7, #15]
 80011d4:	6879      	ldr	r1, [r7, #4]
 80011d6:	4613      	mov	r3, r2
 80011d8:	00db      	lsls	r3, r3, #3
 80011da:	1a9b      	subs	r3, r3, r2
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	440b      	add	r3, r1
 80011e0:	333f      	adds	r3, #63	; 0x3f
 80011e2:	2200      	movs	r2, #0
 80011e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80011e6:	7bfa      	ldrb	r2, [r7, #15]
 80011e8:	6879      	ldr	r1, [r7, #4]
 80011ea:	4613      	mov	r3, r2
 80011ec:	00db      	lsls	r3, r3, #3
 80011ee:	1a9b      	subs	r3, r3, r2
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	440b      	add	r3, r1
 80011f4:	3344      	adds	r3, #68	; 0x44
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80011fa:	7bfa      	ldrb	r2, [r7, #15]
 80011fc:	6879      	ldr	r1, [r7, #4]
 80011fe:	4613      	mov	r3, r2
 8001200:	00db      	lsls	r3, r3, #3
 8001202:	1a9b      	subs	r3, r3, r2
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	440b      	add	r3, r1
 8001208:	3348      	adds	r3, #72	; 0x48
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800120e:	7bfa      	ldrb	r2, [r7, #15]
 8001210:	6879      	ldr	r1, [r7, #4]
 8001212:	4613      	mov	r3, r2
 8001214:	00db      	lsls	r3, r3, #3
 8001216:	1a9b      	subs	r3, r3, r2
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	440b      	add	r3, r1
 800121c:	3350      	adds	r3, #80	; 0x50
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001222:	7bfb      	ldrb	r3, [r7, #15]
 8001224:	3301      	adds	r3, #1
 8001226:	73fb      	strb	r3, [r7, #15]
 8001228:	7bfa      	ldrb	r2, [r7, #15]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	429a      	cmp	r2, r3
 8001230:	d3af      	bcc.n	8001192 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001232:	2300      	movs	r3, #0
 8001234:	73fb      	strb	r3, [r7, #15]
 8001236:	e044      	b.n	80012c2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001238:	7bfa      	ldrb	r2, [r7, #15]
 800123a:	6879      	ldr	r1, [r7, #4]
 800123c:	4613      	mov	r3, r2
 800123e:	00db      	lsls	r3, r3, #3
 8001240:	1a9b      	subs	r3, r3, r2
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	440b      	add	r3, r1
 8001246:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800124a:	2200      	movs	r2, #0
 800124c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800124e:	7bfa      	ldrb	r2, [r7, #15]
 8001250:	6879      	ldr	r1, [r7, #4]
 8001252:	4613      	mov	r3, r2
 8001254:	00db      	lsls	r3, r3, #3
 8001256:	1a9b      	subs	r3, r3, r2
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	440b      	add	r3, r1
 800125c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001260:	7bfa      	ldrb	r2, [r7, #15]
 8001262:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001264:	7bfa      	ldrb	r2, [r7, #15]
 8001266:	6879      	ldr	r1, [r7, #4]
 8001268:	4613      	mov	r3, r2
 800126a:	00db      	lsls	r3, r3, #3
 800126c:	1a9b      	subs	r3, r3, r2
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	440b      	add	r3, r1
 8001272:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001276:	2200      	movs	r2, #0
 8001278:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800127a:	7bfa      	ldrb	r2, [r7, #15]
 800127c:	6879      	ldr	r1, [r7, #4]
 800127e:	4613      	mov	r3, r2
 8001280:	00db      	lsls	r3, r3, #3
 8001282:	1a9b      	subs	r3, r3, r2
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	440b      	add	r3, r1
 8001288:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001290:	7bfa      	ldrb	r2, [r7, #15]
 8001292:	6879      	ldr	r1, [r7, #4]
 8001294:	4613      	mov	r3, r2
 8001296:	00db      	lsls	r3, r3, #3
 8001298:	1a9b      	subs	r3, r3, r2
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	440b      	add	r3, r1
 800129e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80012a6:	7bfa      	ldrb	r2, [r7, #15]
 80012a8:	6879      	ldr	r1, [r7, #4]
 80012aa:	4613      	mov	r3, r2
 80012ac:	00db      	lsls	r3, r3, #3
 80012ae:	1a9b      	subs	r3, r3, r2
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	440b      	add	r3, r1
 80012b4:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012bc:	7bfb      	ldrb	r3, [r7, #15]
 80012be:	3301      	adds	r3, #1
 80012c0:	73fb      	strb	r3, [r7, #15]
 80012c2:	7bfa      	ldrb	r2, [r7, #15]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d3b5      	bcc.n	8001238 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	603b      	str	r3, [r7, #0]
 80012d2:	687e      	ldr	r6, [r7, #4]
 80012d4:	466d      	mov	r5, sp
 80012d6:	f106 0410 	add.w	r4, r6, #16
 80012da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012e2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80012e6:	e885 0003 	stmia.w	r5, {r0, r1}
 80012ea:	1d33      	adds	r3, r6, #4
 80012ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012ee:	6838      	ldr	r0, [r7, #0]
 80012f0:	f001 fe0c 	bl	8002f0c <USB_DevInit>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d005      	beq.n	8001306 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2202      	movs	r2, #2
 80012fe:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e00d      	b.n	8001322 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2200      	movs	r2, #0
 800130a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2201      	movs	r2, #1
 8001312:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4618      	mov	r0, r3
 800131c:	f002 fe54 	bl	8003fc8 <USB_DevDisconnect>

  return HAL_OK;
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3714      	adds	r7, #20
 8001326:	46bd      	mov	sp, r7
 8001328:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800132a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	b084      	sub	sp, #16
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800133e:	2b01      	cmp	r3, #1
 8001340:	d101      	bne.n	8001346 <HAL_PCD_Start+0x1c>
 8001342:	2302      	movs	r3, #2
 8001344:	e020      	b.n	8001388 <HAL_PCD_Start+0x5e>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2201      	movs	r2, #1
 800134a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001352:	2b01      	cmp	r3, #1
 8001354:	d109      	bne.n	800136a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800135a:	2b01      	cmp	r3, #1
 800135c:	d005      	beq.n	800136a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001362:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4618      	mov	r0, r3
 8001370:	f001 fd80 	bl	8002e74 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4618      	mov	r0, r3
 800137a:	f002 fe04 	bl	8003f86 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2200      	movs	r2, #0
 8001382:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001386:	2300      	movs	r3, #0
}
 8001388:	4618      	mov	r0, r3
 800138a:	3710      	adds	r7, #16
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001390:	b590      	push	{r4, r7, lr}
 8001392:	b08d      	sub	sp, #52	; 0x34
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800139e:	6a3b      	ldr	r3, [r7, #32]
 80013a0:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4618      	mov	r0, r3
 80013a8:	f002 fec2 	bl	8004130 <USB_GetMode>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	f040 839d 	bne.w	8001aee <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f002 fe26 	bl	800400a <USB_ReadInterrupts>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	f000 8393 	beq.w	8001aec <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f002 fe1d 	bl	800400a <USB_ReadInterrupts>
 80013d0:	4603      	mov	r3, r0
 80013d2:	f003 0302 	and.w	r3, r3, #2
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d107      	bne.n	80013ea <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	695a      	ldr	r2, [r3, #20]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f002 0202 	and.w	r2, r2, #2
 80013e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f002 fe0b 	bl	800400a <USB_ReadInterrupts>
 80013f4:	4603      	mov	r3, r0
 80013f6:	f003 0310 	and.w	r3, r3, #16
 80013fa:	2b10      	cmp	r3, #16
 80013fc:	d161      	bne.n	80014c2 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	699a      	ldr	r2, [r3, #24]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f022 0210 	bic.w	r2, r2, #16
 800140c:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800140e:	6a3b      	ldr	r3, [r7, #32]
 8001410:	6a1b      	ldr	r3, [r3, #32]
 8001412:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	f003 020f 	and.w	r2, r3, #15
 800141a:	4613      	mov	r3, r2
 800141c:	00db      	lsls	r3, r3, #3
 800141e:	1a9b      	subs	r3, r3, r2
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	4413      	add	r3, r2
 800142a:	3304      	adds	r3, #4
 800142c:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	0c5b      	lsrs	r3, r3, #17
 8001432:	f003 030f 	and.w	r3, r3, #15
 8001436:	2b02      	cmp	r3, #2
 8001438:	d124      	bne.n	8001484 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001440:	4013      	ands	r3, r2
 8001442:	2b00      	cmp	r3, #0
 8001444:	d035      	beq.n	80014b2 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	091b      	lsrs	r3, r3, #4
 800144e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001450:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001454:	b29b      	uxth	r3, r3
 8001456:	461a      	mov	r2, r3
 8001458:	6a38      	ldr	r0, [r7, #32]
 800145a:	f002 fc71 	bl	8003d40 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	68da      	ldr	r2, [r3, #12]
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	091b      	lsrs	r3, r3, #4
 8001466:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800146a:	441a      	add	r2, r3
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	699a      	ldr	r2, [r3, #24]
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	091b      	lsrs	r3, r3, #4
 8001478:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800147c:	441a      	add	r2, r3
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	619a      	str	r2, [r3, #24]
 8001482:	e016      	b.n	80014b2 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	0c5b      	lsrs	r3, r3, #17
 8001488:	f003 030f 	and.w	r3, r3, #15
 800148c:	2b06      	cmp	r3, #6
 800148e:	d110      	bne.n	80014b2 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001496:	2208      	movs	r2, #8
 8001498:	4619      	mov	r1, r3
 800149a:	6a38      	ldr	r0, [r7, #32]
 800149c:	f002 fc50 	bl	8003d40 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	699a      	ldr	r2, [r3, #24]
 80014a4:	69bb      	ldr	r3, [r7, #24]
 80014a6:	091b      	lsrs	r3, r3, #4
 80014a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014ac:	441a      	add	r2, r3
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	699a      	ldr	r2, [r3, #24]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f042 0210 	orr.w	r2, r2, #16
 80014c0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f002 fd9f 	bl	800400a <USB_ReadInterrupts>
 80014cc:	4603      	mov	r3, r0
 80014ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014d2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80014d6:	d16e      	bne.n	80015b6 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80014d8:	2300      	movs	r3, #0
 80014da:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f002 fda5 	bl	8004030 <USB_ReadDevAllOutEpInterrupt>
 80014e6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80014e8:	e062      	b.n	80015b0 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80014ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ec:	f003 0301 	and.w	r3, r3, #1
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d057      	beq.n	80015a4 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014fa:	b2d2      	uxtb	r2, r2
 80014fc:	4611      	mov	r1, r2
 80014fe:	4618      	mov	r0, r3
 8001500:	f002 fdca 	bl	8004098 <USB_ReadDevOutEPInterrupt>
 8001504:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	f003 0301 	and.w	r3, r3, #1
 800150c:	2b00      	cmp	r3, #0
 800150e:	d00c      	beq.n	800152a <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001512:	015a      	lsls	r2, r3, #5
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	4413      	add	r3, r2
 8001518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800151c:	461a      	mov	r2, r3
 800151e:	2301      	movs	r3, #1
 8001520:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001522:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f000 fdb1 	bl	800208c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	f003 0308 	and.w	r3, r3, #8
 8001530:	2b00      	cmp	r3, #0
 8001532:	d00c      	beq.n	800154e <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001536:	015a      	lsls	r2, r3, #5
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	4413      	add	r3, r2
 800153c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001540:	461a      	mov	r2, r3
 8001542:	2308      	movs	r3, #8
 8001544:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001546:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f000 feab 	bl	80022a4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	f003 0310 	and.w	r3, r3, #16
 8001554:	2b00      	cmp	r3, #0
 8001556:	d008      	beq.n	800156a <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155a:	015a      	lsls	r2, r3, #5
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	4413      	add	r3, r2
 8001560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001564:	461a      	mov	r2, r3
 8001566:	2310      	movs	r3, #16
 8001568:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	f003 0320 	and.w	r3, r3, #32
 8001570:	2b00      	cmp	r3, #0
 8001572:	d008      	beq.n	8001586 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001576:	015a      	lsls	r2, r3, #5
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	4413      	add	r3, r2
 800157c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001580:	461a      	mov	r2, r3
 8001582:	2320      	movs	r3, #32
 8001584:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800158c:	2b00      	cmp	r3, #0
 800158e:	d009      	beq.n	80015a4 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001592:	015a      	lsls	r2, r3, #5
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	4413      	add	r3, r2
 8001598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800159c:	461a      	mov	r2, r3
 800159e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015a2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80015a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a6:	3301      	adds	r3, #1
 80015a8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80015aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ac:	085b      	lsrs	r3, r3, #1
 80015ae:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80015b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d199      	bne.n	80014ea <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f002 fd25 	bl	800400a <USB_ReadInterrupts>
 80015c0:	4603      	mov	r3, r0
 80015c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015c6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80015ca:	f040 80c0 	bne.w	800174e <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f002 fd46 	bl	8004064 <USB_ReadDevAllInEpInterrupt>
 80015d8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80015da:	2300      	movs	r3, #0
 80015dc:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80015de:	e0b2      	b.n	8001746 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80015e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015e2:	f003 0301 	and.w	r3, r3, #1
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	f000 80a7 	beq.w	800173a <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015f2:	b2d2      	uxtb	r2, r2
 80015f4:	4611      	mov	r1, r2
 80015f6:	4618      	mov	r0, r3
 80015f8:	f002 fd6c 	bl	80040d4 <USB_ReadDevInEPInterrupt>
 80015fc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	f003 0301 	and.w	r3, r3, #1
 8001604:	2b00      	cmp	r3, #0
 8001606:	d057      	beq.n	80016b8 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160a:	f003 030f 	and.w	r3, r3, #15
 800160e:	2201      	movs	r2, #1
 8001610:	fa02 f303 	lsl.w	r3, r2, r3
 8001614:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800161c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	43db      	mvns	r3, r3
 8001622:	69f9      	ldr	r1, [r7, #28]
 8001624:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001628:	4013      	ands	r3, r2
 800162a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800162c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162e:	015a      	lsls	r2, r3, #5
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	4413      	add	r3, r2
 8001634:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001638:	461a      	mov	r2, r3
 800163a:	2301      	movs	r3, #1
 800163c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	691b      	ldr	r3, [r3, #16]
 8001642:	2b01      	cmp	r3, #1
 8001644:	d132      	bne.n	80016ac <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001646:	6879      	ldr	r1, [r7, #4]
 8001648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800164a:	4613      	mov	r3, r2
 800164c:	00db      	lsls	r3, r3, #3
 800164e:	1a9b      	subs	r3, r3, r2
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	440b      	add	r3, r1
 8001654:	3348      	adds	r3, #72	; 0x48
 8001656:	6819      	ldr	r1, [r3, #0]
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800165c:	4613      	mov	r3, r2
 800165e:	00db      	lsls	r3, r3, #3
 8001660:	1a9b      	subs	r3, r3, r2
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	4403      	add	r3, r0
 8001666:	3344      	adds	r3, #68	; 0x44
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4419      	add	r1, r3
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001670:	4613      	mov	r3, r2
 8001672:	00db      	lsls	r3, r3, #3
 8001674:	1a9b      	subs	r3, r3, r2
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	4403      	add	r3, r0
 800167a:	3348      	adds	r3, #72	; 0x48
 800167c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800167e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001680:	2b00      	cmp	r3, #0
 8001682:	d113      	bne.n	80016ac <HAL_PCD_IRQHandler+0x31c>
 8001684:	6879      	ldr	r1, [r7, #4]
 8001686:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001688:	4613      	mov	r3, r2
 800168a:	00db      	lsls	r3, r3, #3
 800168c:	1a9b      	subs	r3, r3, r2
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	440b      	add	r3, r1
 8001692:	3350      	adds	r3, #80	; 0x50
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d108      	bne.n	80016ac <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6818      	ldr	r0, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80016a4:	461a      	mov	r2, r3
 80016a6:	2101      	movs	r1, #1
 80016a8:	f002 fd74 	bl	8004194 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80016ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	4619      	mov	r1, r3
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f004 fce1 	bl	800607a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	f003 0308 	and.w	r3, r3, #8
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d008      	beq.n	80016d4 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80016c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c4:	015a      	lsls	r2, r3, #5
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	4413      	add	r3, r2
 80016ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016ce:	461a      	mov	r2, r3
 80016d0:	2308      	movs	r3, #8
 80016d2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	f003 0310 	and.w	r3, r3, #16
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d008      	beq.n	80016f0 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80016de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e0:	015a      	lsls	r2, r3, #5
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	4413      	add	r3, r2
 80016e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016ea:	461a      	mov	r2, r3
 80016ec:	2310      	movs	r3, #16
 80016ee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d008      	beq.n	800170c <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80016fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fc:	015a      	lsls	r2, r3, #5
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	4413      	add	r3, r2
 8001702:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001706:	461a      	mov	r2, r3
 8001708:	2340      	movs	r3, #64	; 0x40
 800170a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	2b00      	cmp	r3, #0
 8001714:	d008      	beq.n	8001728 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001718:	015a      	lsls	r2, r3, #5
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	4413      	add	r3, r2
 800171e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001722:	461a      	mov	r2, r3
 8001724:	2302      	movs	r3, #2
 8001726:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800172e:	2b00      	cmp	r3, #0
 8001730:	d003      	beq.n	800173a <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001732:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f000 fc1b 	bl	8001f70 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800173a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173c:	3301      	adds	r3, #1
 800173e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001742:	085b      	lsrs	r3, r3, #1
 8001744:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001748:	2b00      	cmp	r3, #0
 800174a:	f47f af49 	bne.w	80015e0 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4618      	mov	r0, r3
 8001754:	f002 fc59 	bl	800400a <USB_ReadInterrupts>
 8001758:	4603      	mov	r3, r0
 800175a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800175e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001762:	d122      	bne.n	80017aa <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	69fa      	ldr	r2, [r7, #28]
 800176e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001772:	f023 0301 	bic.w	r3, r3, #1
 8001776:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800177e:	2b01      	cmp	r3, #1
 8001780:	d108      	bne.n	8001794 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2200      	movs	r2, #0
 8001786:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800178a:	2100      	movs	r1, #0
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f000 fe27 	bl	80023e0 <HAL_PCDEx_LPM_Callback>
 8001792:	e002      	b.n	800179a <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f004 fce7 	bl	8006168 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	695a      	ldr	r2, [r3, #20]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80017a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f002 fc2b 	bl	800400a <USB_ReadInterrupts>
 80017b4:	4603      	mov	r3, r0
 80017b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80017be:	d112      	bne.n	80017e6 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	f003 0301 	and.w	r3, r3, #1
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d102      	bne.n	80017d6 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f004 fca3 	bl	800611c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	695a      	ldr	r2, [r3, #20]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80017e4:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4618      	mov	r0, r3
 80017ec:	f002 fc0d 	bl	800400a <USB_ReadInterrupts>
 80017f0:	4603      	mov	r3, r0
 80017f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017fa:	f040 80c7 	bne.w	800198c <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	69fa      	ldr	r2, [r7, #28]
 8001808:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800180c:	f023 0301 	bic.w	r3, r3, #1
 8001810:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2110      	movs	r1, #16
 8001818:	4618      	mov	r0, r3
 800181a:	f001 fcdb 	bl	80031d4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800181e:	2300      	movs	r3, #0
 8001820:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001822:	e056      	b.n	80018d2 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001826:	015a      	lsls	r2, r3, #5
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	4413      	add	r3, r2
 800182c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001830:	461a      	mov	r2, r3
 8001832:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001836:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800183a:	015a      	lsls	r2, r3, #5
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	4413      	add	r3, r2
 8001840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001848:	0151      	lsls	r1, r2, #5
 800184a:	69fa      	ldr	r2, [r7, #28]
 800184c:	440a      	add	r2, r1
 800184e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001852:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001856:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800185a:	015a      	lsls	r2, r3, #5
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	4413      	add	r3, r2
 8001860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001868:	0151      	lsls	r1, r2, #5
 800186a:	69fa      	ldr	r2, [r7, #28]
 800186c:	440a      	add	r2, r1
 800186e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001872:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001876:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800187a:	015a      	lsls	r2, r3, #5
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	4413      	add	r3, r2
 8001880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001884:	461a      	mov	r2, r3
 8001886:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800188a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800188c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800188e:	015a      	lsls	r2, r3, #5
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	4413      	add	r3, r2
 8001894:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800189c:	0151      	lsls	r1, r2, #5
 800189e:	69fa      	ldr	r2, [r7, #28]
 80018a0:	440a      	add	r2, r1
 80018a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80018a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80018aa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80018ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018ae:	015a      	lsls	r2, r3, #5
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	4413      	add	r3, r2
 80018b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018bc:	0151      	lsls	r1, r2, #5
 80018be:	69fa      	ldr	r2, [r7, #28]
 80018c0:	440a      	add	r2, r1
 80018c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80018c6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80018ca:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018ce:	3301      	adds	r3, #1
 80018d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018d8:	429a      	cmp	r2, r3
 80018da:	d3a3      	bcc.n	8001824 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018e2:	69db      	ldr	r3, [r3, #28]
 80018e4:	69fa      	ldr	r2, [r7, #28]
 80018e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018ea:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80018ee:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d016      	beq.n	8001926 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001902:	69fa      	ldr	r2, [r7, #28]
 8001904:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001908:	f043 030b 	orr.w	r3, r3, #11
 800190c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001918:	69fa      	ldr	r2, [r7, #28]
 800191a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800191e:	f043 030b 	orr.w	r3, r3, #11
 8001922:	6453      	str	r3, [r2, #68]	; 0x44
 8001924:	e015      	b.n	8001952 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800192c:	695b      	ldr	r3, [r3, #20]
 800192e:	69fa      	ldr	r2, [r7, #28]
 8001930:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001934:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001938:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800193c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001944:	691b      	ldr	r3, [r3, #16]
 8001946:	69fa      	ldr	r2, [r7, #28]
 8001948:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800194c:	f043 030b 	orr.w	r3, r3, #11
 8001950:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	69fa      	ldr	r2, [r7, #28]
 800195c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001960:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001964:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6818      	ldr	r0, [r3, #0]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	691b      	ldr	r3, [r3, #16]
 800196e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001976:	461a      	mov	r2, r3
 8001978:	f002 fc0c 	bl	8004194 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	695a      	ldr	r2, [r3, #20]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800198a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4618      	mov	r0, r3
 8001992:	f002 fb3a 	bl	800400a <USB_ReadInterrupts>
 8001996:	4603      	mov	r3, r0
 8001998:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800199c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019a0:	d124      	bne.n	80019ec <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f002 fbd0 	bl	800414c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f001 fc70 	bl	8003296 <USB_GetDevSpeed>
 80019b6:	4603      	mov	r3, r0
 80019b8:	461a      	mov	r2, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681c      	ldr	r4, [r3, #0]
 80019c2:	f001 f947 	bl	8002c54 <HAL_RCC_GetHCLKFreq>
 80019c6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	461a      	mov	r2, r3
 80019d0:	4620      	mov	r0, r4
 80019d2:	f001 f9ad 	bl	8002d30 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f004 fb77 	bl	80060ca <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	695a      	ldr	r2, [r3, #20]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80019ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f002 fb0a 	bl	800400a <USB_ReadInterrupts>
 80019f6:	4603      	mov	r3, r0
 80019f8:	f003 0308 	and.w	r3, r3, #8
 80019fc:	2b08      	cmp	r3, #8
 80019fe:	d10a      	bne.n	8001a16 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f004 fb54 	bl	80060ae <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	695a      	ldr	r2, [r3, #20]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f002 0208 	and.w	r2, r2, #8
 8001a14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f002 faf5 	bl	800400a <USB_ReadInterrupts>
 8001a20:	4603      	mov	r3, r0
 8001a22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a2a:	d10f      	bne.n	8001a4c <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	4619      	mov	r1, r3
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f004 fbb6 	bl	80061a8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	695a      	ldr	r2, [r3, #20]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001a4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f002 fada 	bl	800400a <USB_ReadInterrupts>
 8001a56:	4603      	mov	r3, r0
 8001a58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a5c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a60:	d10f      	bne.n	8001a82 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001a62:	2300      	movs	r3, #0
 8001a64:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f004 fb89 	bl	8006184 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	695a      	ldr	r2, [r3, #20]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001a80:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f002 fabf 	bl	800400a <USB_ReadInterrupts>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001a92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a96:	d10a      	bne.n	8001aae <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f004 fb97 	bl	80061cc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	695a      	ldr	r2, [r3, #20]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001aac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f002 faa9 	bl	800400a <USB_ReadInterrupts>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	f003 0304 	and.w	r3, r3, #4
 8001abe:	2b04      	cmp	r3, #4
 8001ac0:	d115      	bne.n	8001aee <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	f003 0304 	and.w	r3, r3, #4
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d002      	beq.n	8001ada <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f004 fb87 	bl	80061e8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	6859      	ldr	r1, [r3, #4]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	430a      	orrs	r2, r1
 8001ae8:	605a      	str	r2, [r3, #4]
 8001aea:	e000      	b.n	8001aee <HAL_PCD_IRQHandler+0x75e>
      return;
 8001aec:	bf00      	nop
    }
  }
}
 8001aee:	3734      	adds	r7, #52	; 0x34
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd90      	pop	{r4, r7, pc}

08001af4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	460b      	mov	r3, r1
 8001afe:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d101      	bne.n	8001b0e <HAL_PCD_SetAddress+0x1a>
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	e013      	b.n	8001b36 <HAL_PCD_SetAddress+0x42>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2201      	movs	r2, #1
 8001b12:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	78fa      	ldrb	r2, [r7, #3]
 8001b1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	78fa      	ldrb	r2, [r7, #3]
 8001b24:	4611      	mov	r1, r2
 8001b26:	4618      	mov	r0, r3
 8001b28:	f002 fa07 	bl	8003f3a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b084      	sub	sp, #16
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
 8001b46:	4608      	mov	r0, r1
 8001b48:	4611      	mov	r1, r2
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	70fb      	strb	r3, [r7, #3]
 8001b50:	460b      	mov	r3, r1
 8001b52:	803b      	strh	r3, [r7, #0]
 8001b54:	4613      	mov	r3, r2
 8001b56:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	da0f      	bge.n	8001b84 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b64:	78fb      	ldrb	r3, [r7, #3]
 8001b66:	f003 020f 	and.w	r2, r3, #15
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	00db      	lsls	r3, r3, #3
 8001b6e:	1a9b      	subs	r3, r3, r2
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	3338      	adds	r3, #56	; 0x38
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	4413      	add	r3, r2
 8001b78:	3304      	adds	r3, #4
 8001b7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	705a      	strb	r2, [r3, #1]
 8001b82:	e00f      	b.n	8001ba4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b84:	78fb      	ldrb	r3, [r7, #3]
 8001b86:	f003 020f 	and.w	r2, r3, #15
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	00db      	lsls	r3, r3, #3
 8001b8e:	1a9b      	subs	r3, r3, r2
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	4413      	add	r3, r2
 8001b9a:	3304      	adds	r3, #4
 8001b9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001ba4:	78fb      	ldrb	r3, [r7, #3]
 8001ba6:	f003 030f 	and.w	r3, r3, #15
 8001baa:	b2da      	uxtb	r2, r3
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001bb0:	883a      	ldrh	r2, [r7, #0]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	78ba      	ldrb	r2, [r7, #2]
 8001bba:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	785b      	ldrb	r3, [r3, #1]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d004      	beq.n	8001bce <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	b29a      	uxth	r2, r3
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001bce:	78bb      	ldrb	r3, [r7, #2]
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d102      	bne.n	8001bda <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d101      	bne.n	8001be8 <HAL_PCD_EP_Open+0xaa>
 8001be4:	2302      	movs	r3, #2
 8001be6:	e00e      	b.n	8001c06 <HAL_PCD_EP_Open+0xc8>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	68f9      	ldr	r1, [r7, #12]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f001 fb72 	bl	80032e0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001c04:	7afb      	ldrb	r3, [r7, #11]
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3710      	adds	r7, #16
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b084      	sub	sp, #16
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
 8001c16:	460b      	mov	r3, r1
 8001c18:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	da0f      	bge.n	8001c42 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c22:	78fb      	ldrb	r3, [r7, #3]
 8001c24:	f003 020f 	and.w	r2, r3, #15
 8001c28:	4613      	mov	r3, r2
 8001c2a:	00db      	lsls	r3, r3, #3
 8001c2c:	1a9b      	subs	r3, r3, r2
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	3338      	adds	r3, #56	; 0x38
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	4413      	add	r3, r2
 8001c36:	3304      	adds	r3, #4
 8001c38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	705a      	strb	r2, [r3, #1]
 8001c40:	e00f      	b.n	8001c62 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c42:	78fb      	ldrb	r3, [r7, #3]
 8001c44:	f003 020f 	and.w	r2, r3, #15
 8001c48:	4613      	mov	r3, r2
 8001c4a:	00db      	lsls	r3, r3, #3
 8001c4c:	1a9b      	subs	r3, r3, r2
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	4413      	add	r3, r2
 8001c58:	3304      	adds	r3, #4
 8001c5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001c62:	78fb      	ldrb	r3, [r7, #3]
 8001c64:	f003 030f 	and.w	r3, r3, #15
 8001c68:	b2da      	uxtb	r2, r3
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d101      	bne.n	8001c7c <HAL_PCD_EP_Close+0x6e>
 8001c78:	2302      	movs	r3, #2
 8001c7a:	e00e      	b.n	8001c9a <HAL_PCD_EP_Close+0x8c>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	68f9      	ldr	r1, [r7, #12]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f001 fbb0 	bl	80033f0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3710      	adds	r7, #16
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b086      	sub	sp, #24
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	60f8      	str	r0, [r7, #12]
 8001caa:	607a      	str	r2, [r7, #4]
 8001cac:	603b      	str	r3, [r7, #0]
 8001cae:	460b      	mov	r3, r1
 8001cb0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cb2:	7afb      	ldrb	r3, [r7, #11]
 8001cb4:	f003 020f 	and.w	r2, r3, #15
 8001cb8:	4613      	mov	r3, r2
 8001cba:	00db      	lsls	r3, r3, #3
 8001cbc:	1a9b      	subs	r3, r3, r2
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001cc4:	68fa      	ldr	r2, [r7, #12]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	3304      	adds	r3, #4
 8001cca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	683a      	ldr	r2, [r7, #0]
 8001cd6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ce4:	7afb      	ldrb	r3, [r7, #11]
 8001ce6:	f003 030f 	and.w	r3, r3, #15
 8001cea:	b2da      	uxtb	r2, r3
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	691b      	ldr	r3, [r3, #16]
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d102      	bne.n	8001cfe <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001cfe:	7afb      	ldrb	r3, [r7, #11]
 8001d00:	f003 030f 	and.w	r3, r3, #15
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d109      	bne.n	8001d1c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	6818      	ldr	r0, [r3, #0]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	691b      	ldr	r3, [r3, #16]
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	461a      	mov	r2, r3
 8001d14:	6979      	ldr	r1, [r7, #20]
 8001d16:	f001 fe8b 	bl	8003a30 <USB_EP0StartXfer>
 8001d1a:	e008      	b.n	8001d2e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	6818      	ldr	r0, [r3, #0]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	691b      	ldr	r3, [r3, #16]
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	461a      	mov	r2, r3
 8001d28:	6979      	ldr	r1, [r7, #20]
 8001d2a:	f001 fc3d 	bl	80035a8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001d2e:	2300      	movs	r3, #0
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3718      	adds	r7, #24
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	460b      	mov	r3, r1
 8001d42:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001d44:	78fb      	ldrb	r3, [r7, #3]
 8001d46:	f003 020f 	and.w	r2, r3, #15
 8001d4a:	6879      	ldr	r1, [r7, #4]
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	00db      	lsls	r3, r3, #3
 8001d50:	1a9b      	subs	r3, r3, r2
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	440b      	add	r3, r1
 8001d56:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001d5a:	681b      	ldr	r3, [r3, #0]
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	607a      	str	r2, [r7, #4]
 8001d72:	603b      	str	r3, [r7, #0]
 8001d74:	460b      	mov	r3, r1
 8001d76:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d78:	7afb      	ldrb	r3, [r7, #11]
 8001d7a:	f003 020f 	and.w	r2, r3, #15
 8001d7e:	4613      	mov	r3, r2
 8001d80:	00db      	lsls	r3, r3, #3
 8001d82:	1a9b      	subs	r3, r3, r2
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	3338      	adds	r3, #56	; 0x38
 8001d88:	68fa      	ldr	r2, [r7, #12]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	3304      	adds	r3, #4
 8001d8e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	683a      	ldr	r2, [r7, #0]
 8001d9a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	2201      	movs	r2, #1
 8001da6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001da8:	7afb      	ldrb	r3, [r7, #11]
 8001daa:	f003 030f 	and.w	r3, r3, #15
 8001dae:	b2da      	uxtb	r2, r3
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	691b      	ldr	r3, [r3, #16]
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d102      	bne.n	8001dc2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001dc2:	7afb      	ldrb	r3, [r7, #11]
 8001dc4:	f003 030f 	and.w	r3, r3, #15
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d109      	bne.n	8001de0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	6818      	ldr	r0, [r3, #0]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	691b      	ldr	r3, [r3, #16]
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	6979      	ldr	r1, [r7, #20]
 8001dda:	f001 fe29 	bl	8003a30 <USB_EP0StartXfer>
 8001dde:	e008      	b.n	8001df2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	6818      	ldr	r0, [r3, #0]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	691b      	ldr	r3, [r3, #16]
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	461a      	mov	r2, r3
 8001dec:	6979      	ldr	r1, [r7, #20]
 8001dee:	f001 fbdb 	bl	80035a8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3718      	adds	r7, #24
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	460b      	mov	r3, r1
 8001e06:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001e08:	78fb      	ldrb	r3, [r7, #3]
 8001e0a:	f003 020f 	and.w	r2, r3, #15
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d901      	bls.n	8001e1a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e050      	b.n	8001ebc <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	da0f      	bge.n	8001e42 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e22:	78fb      	ldrb	r3, [r7, #3]
 8001e24:	f003 020f 	and.w	r2, r3, #15
 8001e28:	4613      	mov	r3, r2
 8001e2a:	00db      	lsls	r3, r3, #3
 8001e2c:	1a9b      	subs	r3, r3, r2
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	3338      	adds	r3, #56	; 0x38
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	4413      	add	r3, r2
 8001e36:	3304      	adds	r3, #4
 8001e38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	705a      	strb	r2, [r3, #1]
 8001e40:	e00d      	b.n	8001e5e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001e42:	78fa      	ldrb	r2, [r7, #3]
 8001e44:	4613      	mov	r3, r2
 8001e46:	00db      	lsls	r3, r3, #3
 8001e48:	1a9b      	subs	r3, r3, r2
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	4413      	add	r3, r2
 8001e54:	3304      	adds	r3, #4
 8001e56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2201      	movs	r2, #1
 8001e62:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e64:	78fb      	ldrb	r3, [r7, #3]
 8001e66:	f003 030f 	and.w	r3, r3, #15
 8001e6a:	b2da      	uxtb	r2, r3
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d101      	bne.n	8001e7e <HAL_PCD_EP_SetStall+0x82>
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	e01e      	b.n	8001ebc <HAL_PCD_EP_SetStall+0xc0>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2201      	movs	r2, #1
 8001e82:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	68f9      	ldr	r1, [r7, #12]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f001 ff80 	bl	8003d92 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e92:	78fb      	ldrb	r3, [r7, #3]
 8001e94:	f003 030f 	and.w	r3, r3, #15
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d10a      	bne.n	8001eb2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6818      	ldr	r0, [r3, #0]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	691b      	ldr	r3, [r3, #16]
 8001ea4:	b2d9      	uxtb	r1, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001eac:	461a      	mov	r2, r3
 8001eae:	f002 f971 	bl	8004194 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001eba:	2300      	movs	r3, #0
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3710      	adds	r7, #16
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	460b      	mov	r3, r1
 8001ece:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001ed0:	78fb      	ldrb	r3, [r7, #3]
 8001ed2:	f003 020f 	and.w	r2, r3, #15
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d901      	bls.n	8001ee2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e042      	b.n	8001f68 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ee2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	da0f      	bge.n	8001f0a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001eea:	78fb      	ldrb	r3, [r7, #3]
 8001eec:	f003 020f 	and.w	r2, r3, #15
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	1a9b      	subs	r3, r3, r2
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	3338      	adds	r3, #56	; 0x38
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	4413      	add	r3, r2
 8001efe:	3304      	adds	r3, #4
 8001f00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2201      	movs	r2, #1
 8001f06:	705a      	strb	r2, [r3, #1]
 8001f08:	e00f      	b.n	8001f2a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f0a:	78fb      	ldrb	r3, [r7, #3]
 8001f0c:	f003 020f 	and.w	r2, r3, #15
 8001f10:	4613      	mov	r3, r2
 8001f12:	00db      	lsls	r3, r3, #3
 8001f14:	1a9b      	subs	r3, r3, r2
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	4413      	add	r3, r2
 8001f20:	3304      	adds	r3, #4
 8001f22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2200      	movs	r2, #0
 8001f28:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f30:	78fb      	ldrb	r3, [r7, #3]
 8001f32:	f003 030f 	and.w	r3, r3, #15
 8001f36:	b2da      	uxtb	r2, r3
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d101      	bne.n	8001f4a <HAL_PCD_EP_ClrStall+0x86>
 8001f46:	2302      	movs	r3, #2
 8001f48:	e00e      	b.n	8001f68 <HAL_PCD_EP_ClrStall+0xa4>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	68f9      	ldr	r1, [r7, #12]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f001 ff88 	bl	8003e6e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001f66:	2300      	movs	r3, #0
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3710      	adds	r7, #16
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b08a      	sub	sp, #40	; 0x28
 8001f74:	af02      	add	r7, sp, #8
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001f84:	683a      	ldr	r2, [r7, #0]
 8001f86:	4613      	mov	r3, r2
 8001f88:	00db      	lsls	r3, r3, #3
 8001f8a:	1a9b      	subs	r3, r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	3338      	adds	r3, #56	; 0x38
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	4413      	add	r3, r2
 8001f94:	3304      	adds	r3, #4
 8001f96:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	699a      	ldr	r2, [r3, #24]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	695b      	ldr	r3, [r3, #20]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d901      	bls.n	8001fa8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e06c      	b.n	8002082 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	695a      	ldr	r2, [r3, #20]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	699b      	ldr	r3, [r3, #24]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	69fa      	ldr	r2, [r7, #28]
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d902      	bls.n	8001fc4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	3303      	adds	r3, #3
 8001fc8:	089b      	lsrs	r3, r3, #2
 8001fca:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001fcc:	e02b      	b.n	8002026 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	695a      	ldr	r2, [r3, #20]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	699b      	ldr	r3, [r3, #24]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	69fa      	ldr	r2, [r7, #28]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d902      	bls.n	8001fea <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	3303      	adds	r3, #3
 8001fee:	089b      	lsrs	r3, r3, #2
 8001ff0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	68d9      	ldr	r1, [r3, #12]
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	b2da      	uxtb	r2, r3
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002002:	b2db      	uxtb	r3, r3
 8002004:	9300      	str	r3, [sp, #0]
 8002006:	4603      	mov	r3, r0
 8002008:	6978      	ldr	r0, [r7, #20]
 800200a:	f001 fe64 	bl	8003cd6 <USB_WritePacket>

    ep->xfer_buff  += len;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	68da      	ldr	r2, [r3, #12]
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	441a      	add	r2, r3
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	699a      	ldr	r2, [r3, #24]
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	441a      	add	r2, r3
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	015a      	lsls	r2, r3, #5
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	4413      	add	r3, r2
 800202e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002032:	699b      	ldr	r3, [r3, #24]
 8002034:	b29b      	uxth	r3, r3
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	429a      	cmp	r2, r3
 800203a:	d809      	bhi.n	8002050 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	699a      	ldr	r2, [r3, #24]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002044:	429a      	cmp	r2, r3
 8002046:	d203      	bcs.n	8002050 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	695b      	ldr	r3, [r3, #20]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d1be      	bne.n	8001fce <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	695a      	ldr	r2, [r3, #20]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	699b      	ldr	r3, [r3, #24]
 8002058:	429a      	cmp	r2, r3
 800205a:	d811      	bhi.n	8002080 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	f003 030f 	and.w	r3, r3, #15
 8002062:	2201      	movs	r2, #1
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002070:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	43db      	mvns	r3, r3
 8002076:	6939      	ldr	r1, [r7, #16]
 8002078:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800207c:	4013      	ands	r3, r2
 800207e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3720      	adds	r7, #32
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
	...

0800208c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b086      	sub	sp, #24
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	333c      	adds	r3, #60	; 0x3c
 80020a4:	3304      	adds	r3, #4
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	015a      	lsls	r2, r3, #5
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	4413      	add	r3, r2
 80020b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	2b01      	cmp	r3, #1
 80020c0:	f040 80a0 	bne.w	8002204 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	f003 0308 	and.w	r3, r3, #8
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d015      	beq.n	80020fa <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	4a72      	ldr	r2, [pc, #456]	; (800229c <PCD_EP_OutXfrComplete_int+0x210>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	f240 80dd 	bls.w	8002292 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80020de:	2b00      	cmp	r3, #0
 80020e0:	f000 80d7 	beq.w	8002292 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	015a      	lsls	r2, r3, #5
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	4413      	add	r3, r2
 80020ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020f0:	461a      	mov	r2, r3
 80020f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020f6:	6093      	str	r3, [r2, #8]
 80020f8:	e0cb      	b.n	8002292 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	f003 0320 	and.w	r3, r3, #32
 8002100:	2b00      	cmp	r3, #0
 8002102:	d009      	beq.n	8002118 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	015a      	lsls	r2, r3, #5
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	4413      	add	r3, r2
 800210c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002110:	461a      	mov	r2, r3
 8002112:	2320      	movs	r3, #32
 8002114:	6093      	str	r3, [r2, #8]
 8002116:	e0bc      	b.n	8002292 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800211e:	2b00      	cmp	r3, #0
 8002120:	f040 80b7 	bne.w	8002292 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	4a5d      	ldr	r2, [pc, #372]	; (800229c <PCD_EP_OutXfrComplete_int+0x210>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d90f      	bls.n	800214c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002132:	2b00      	cmp	r3, #0
 8002134:	d00a      	beq.n	800214c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	015a      	lsls	r2, r3, #5
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	4413      	add	r3, r2
 800213e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002142:	461a      	mov	r2, r3
 8002144:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002148:	6093      	str	r3, [r2, #8]
 800214a:	e0a2      	b.n	8002292 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800214c:	6879      	ldr	r1, [r7, #4]
 800214e:	683a      	ldr	r2, [r7, #0]
 8002150:	4613      	mov	r3, r2
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	1a9b      	subs	r3, r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	440b      	add	r3, r1
 800215a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800215e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	0159      	lsls	r1, r3, #5
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	440b      	add	r3, r1
 8002168:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002172:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	683a      	ldr	r2, [r7, #0]
 8002178:	4613      	mov	r3, r2
 800217a:	00db      	lsls	r3, r3, #3
 800217c:	1a9b      	subs	r3, r3, r2
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	4403      	add	r3, r0
 8002182:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002186:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002188:	6879      	ldr	r1, [r7, #4]
 800218a:	683a      	ldr	r2, [r7, #0]
 800218c:	4613      	mov	r3, r2
 800218e:	00db      	lsls	r3, r3, #3
 8002190:	1a9b      	subs	r3, r3, r2
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	440b      	add	r3, r1
 8002196:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800219a:	6819      	ldr	r1, [r3, #0]
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	683a      	ldr	r2, [r7, #0]
 80021a0:	4613      	mov	r3, r2
 80021a2:	00db      	lsls	r3, r3, #3
 80021a4:	1a9b      	subs	r3, r3, r2
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	4403      	add	r3, r0
 80021aa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4419      	add	r1, r3
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	683a      	ldr	r2, [r7, #0]
 80021b6:	4613      	mov	r3, r2
 80021b8:	00db      	lsls	r3, r3, #3
 80021ba:	1a9b      	subs	r3, r3, r2
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	4403      	add	r3, r0
 80021c0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80021c4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d114      	bne.n	80021f6 <PCD_EP_OutXfrComplete_int+0x16a>
 80021cc:	6879      	ldr	r1, [r7, #4]
 80021ce:	683a      	ldr	r2, [r7, #0]
 80021d0:	4613      	mov	r3, r2
 80021d2:	00db      	lsls	r3, r3, #3
 80021d4:	1a9b      	subs	r3, r3, r2
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	440b      	add	r3, r1
 80021da:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d108      	bne.n	80021f6 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6818      	ldr	r0, [r3, #0]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80021ee:	461a      	mov	r2, r3
 80021f0:	2101      	movs	r1, #1
 80021f2:	f001 ffcf 	bl	8004194 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	4619      	mov	r1, r3
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f003 ff21 	bl	8006044 <HAL_PCD_DataOutStageCallback>
 8002202:	e046      	b.n	8002292 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	4a26      	ldr	r2, [pc, #152]	; (80022a0 <PCD_EP_OutXfrComplete_int+0x214>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d124      	bne.n	8002256 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d00a      	beq.n	800222c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	015a      	lsls	r2, r3, #5
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	4413      	add	r3, r2
 800221e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002222:	461a      	mov	r2, r3
 8002224:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002228:	6093      	str	r3, [r2, #8]
 800222a:	e032      	b.n	8002292 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	f003 0320 	and.w	r3, r3, #32
 8002232:	2b00      	cmp	r3, #0
 8002234:	d008      	beq.n	8002248 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	015a      	lsls	r2, r3, #5
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	4413      	add	r3, r2
 800223e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002242:	461a      	mov	r2, r3
 8002244:	2320      	movs	r3, #32
 8002246:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	b2db      	uxtb	r3, r3
 800224c:	4619      	mov	r1, r3
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f003 fef8 	bl	8006044 <HAL_PCD_DataOutStageCallback>
 8002254:	e01d      	b.n	8002292 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d114      	bne.n	8002286 <PCD_EP_OutXfrComplete_int+0x1fa>
 800225c:	6879      	ldr	r1, [r7, #4]
 800225e:	683a      	ldr	r2, [r7, #0]
 8002260:	4613      	mov	r3, r2
 8002262:	00db      	lsls	r3, r3, #3
 8002264:	1a9b      	subs	r3, r3, r2
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	440b      	add	r3, r1
 800226a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d108      	bne.n	8002286 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6818      	ldr	r0, [r3, #0]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800227e:	461a      	mov	r2, r3
 8002280:	2100      	movs	r1, #0
 8002282:	f001 ff87 	bl	8004194 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	b2db      	uxtb	r3, r3
 800228a:	4619      	mov	r1, r3
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f003 fed9 	bl	8006044 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002292:	2300      	movs	r3, #0
}
 8002294:	4618      	mov	r0, r3
 8002296:	3718      	adds	r7, #24
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	4f54300a 	.word	0x4f54300a
 80022a0:	4f54310a 	.word	0x4f54310a

080022a4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b086      	sub	sp, #24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	333c      	adds	r3, #60	; 0x3c
 80022bc:	3304      	adds	r3, #4
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	015a      	lsls	r2, r3, #5
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	4413      	add	r3, r2
 80022ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	4a15      	ldr	r2, [pc, #84]	; (800232c <PCD_EP_OutSetupPacket_int+0x88>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d90e      	bls.n	80022f8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d009      	beq.n	80022f8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	015a      	lsls	r2, r3, #5
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	4413      	add	r3, r2
 80022ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022f0:	461a      	mov	r2, r3
 80022f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022f6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f003 fe91 	bl	8006020 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	4a0a      	ldr	r2, [pc, #40]	; (800232c <PCD_EP_OutSetupPacket_int+0x88>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d90c      	bls.n	8002320 <PCD_EP_OutSetupPacket_int+0x7c>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d108      	bne.n	8002320 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6818      	ldr	r0, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002318:	461a      	mov	r2, r3
 800231a:	2101      	movs	r1, #1
 800231c:	f001 ff3a 	bl	8004194 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3718      	adds	r7, #24
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	4f54300a 	.word	0x4f54300a

08002330 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002330:	b480      	push	{r7}
 8002332:	b085      	sub	sp, #20
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	460b      	mov	r3, r1
 800233a:	70fb      	strb	r3, [r7, #3]
 800233c:	4613      	mov	r3, r2
 800233e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002346:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002348:	78fb      	ldrb	r3, [r7, #3]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d107      	bne.n	800235e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800234e:	883b      	ldrh	r3, [r7, #0]
 8002350:	0419      	lsls	r1, r3, #16
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	68ba      	ldr	r2, [r7, #8]
 8002358:	430a      	orrs	r2, r1
 800235a:	629a      	str	r2, [r3, #40]	; 0x28
 800235c:	e028      	b.n	80023b0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002364:	0c1b      	lsrs	r3, r3, #16
 8002366:	68ba      	ldr	r2, [r7, #8]
 8002368:	4413      	add	r3, r2
 800236a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800236c:	2300      	movs	r3, #0
 800236e:	73fb      	strb	r3, [r7, #15]
 8002370:	e00d      	b.n	800238e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	7bfb      	ldrb	r3, [r7, #15]
 8002378:	3340      	adds	r3, #64	; 0x40
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	4413      	add	r3, r2
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	0c1b      	lsrs	r3, r3, #16
 8002382:	68ba      	ldr	r2, [r7, #8]
 8002384:	4413      	add	r3, r2
 8002386:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002388:	7bfb      	ldrb	r3, [r7, #15]
 800238a:	3301      	adds	r3, #1
 800238c:	73fb      	strb	r3, [r7, #15]
 800238e:	7bfa      	ldrb	r2, [r7, #15]
 8002390:	78fb      	ldrb	r3, [r7, #3]
 8002392:	3b01      	subs	r3, #1
 8002394:	429a      	cmp	r2, r3
 8002396:	d3ec      	bcc.n	8002372 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002398:	883b      	ldrh	r3, [r7, #0]
 800239a:	0418      	lsls	r0, r3, #16
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6819      	ldr	r1, [r3, #0]
 80023a0:	78fb      	ldrb	r3, [r7, #3]
 80023a2:	3b01      	subs	r3, #1
 80023a4:	68ba      	ldr	r2, [r7, #8]
 80023a6:	4302      	orrs	r2, r0
 80023a8:	3340      	adds	r3, #64	; 0x40
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	440b      	add	r3, r1
 80023ae:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3714      	adds	r7, #20
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr

080023be <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80023be:	b480      	push	{r7}
 80023c0:	b083      	sub	sp, #12
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
 80023c6:	460b      	mov	r3, r1
 80023c8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	887a      	ldrh	r2, [r7, #2]
 80023d0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80023d2:	2300      	movs	r3, #0
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	460b      	mov	r3, r1
 80023ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80023ec:	bf00      	nop
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b086      	sub	sp, #24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d101      	bne.n	800240a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e25b      	b.n	80028c2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	2b00      	cmp	r3, #0
 8002414:	d075      	beq.n	8002502 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002416:	4ba3      	ldr	r3, [pc, #652]	; (80026a4 <HAL_RCC_OscConfig+0x2ac>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f003 030c 	and.w	r3, r3, #12
 800241e:	2b04      	cmp	r3, #4
 8002420:	d00c      	beq.n	800243c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002422:	4ba0      	ldr	r3, [pc, #640]	; (80026a4 <HAL_RCC_OscConfig+0x2ac>)
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800242a:	2b08      	cmp	r3, #8
 800242c:	d112      	bne.n	8002454 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800242e:	4b9d      	ldr	r3, [pc, #628]	; (80026a4 <HAL_RCC_OscConfig+0x2ac>)
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002436:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800243a:	d10b      	bne.n	8002454 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800243c:	4b99      	ldr	r3, [pc, #612]	; (80026a4 <HAL_RCC_OscConfig+0x2ac>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d05b      	beq.n	8002500 <HAL_RCC_OscConfig+0x108>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d157      	bne.n	8002500 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e236      	b.n	80028c2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800245c:	d106      	bne.n	800246c <HAL_RCC_OscConfig+0x74>
 800245e:	4b91      	ldr	r3, [pc, #580]	; (80026a4 <HAL_RCC_OscConfig+0x2ac>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a90      	ldr	r2, [pc, #576]	; (80026a4 <HAL_RCC_OscConfig+0x2ac>)
 8002464:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002468:	6013      	str	r3, [r2, #0]
 800246a:	e01d      	b.n	80024a8 <HAL_RCC_OscConfig+0xb0>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002474:	d10c      	bne.n	8002490 <HAL_RCC_OscConfig+0x98>
 8002476:	4b8b      	ldr	r3, [pc, #556]	; (80026a4 <HAL_RCC_OscConfig+0x2ac>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a8a      	ldr	r2, [pc, #552]	; (80026a4 <HAL_RCC_OscConfig+0x2ac>)
 800247c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002480:	6013      	str	r3, [r2, #0]
 8002482:	4b88      	ldr	r3, [pc, #544]	; (80026a4 <HAL_RCC_OscConfig+0x2ac>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a87      	ldr	r2, [pc, #540]	; (80026a4 <HAL_RCC_OscConfig+0x2ac>)
 8002488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800248c:	6013      	str	r3, [r2, #0]
 800248e:	e00b      	b.n	80024a8 <HAL_RCC_OscConfig+0xb0>
 8002490:	4b84      	ldr	r3, [pc, #528]	; (80026a4 <HAL_RCC_OscConfig+0x2ac>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a83      	ldr	r2, [pc, #524]	; (80026a4 <HAL_RCC_OscConfig+0x2ac>)
 8002496:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800249a:	6013      	str	r3, [r2, #0]
 800249c:	4b81      	ldr	r3, [pc, #516]	; (80026a4 <HAL_RCC_OscConfig+0x2ac>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a80      	ldr	r2, [pc, #512]	; (80026a4 <HAL_RCC_OscConfig+0x2ac>)
 80024a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d013      	beq.n	80024d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b0:	f7fe fb44 	bl	8000b3c <HAL_GetTick>
 80024b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024b6:	e008      	b.n	80024ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024b8:	f7fe fb40 	bl	8000b3c <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b64      	cmp	r3, #100	; 0x64
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e1fb      	b.n	80028c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ca:	4b76      	ldr	r3, [pc, #472]	; (80026a4 <HAL_RCC_OscConfig+0x2ac>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d0f0      	beq.n	80024b8 <HAL_RCC_OscConfig+0xc0>
 80024d6:	e014      	b.n	8002502 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d8:	f7fe fb30 	bl	8000b3c <HAL_GetTick>
 80024dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024de:	e008      	b.n	80024f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024e0:	f7fe fb2c 	bl	8000b3c <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b64      	cmp	r3, #100	; 0x64
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e1e7      	b.n	80028c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024f2:	4b6c      	ldr	r3, [pc, #432]	; (80026a4 <HAL_RCC_OscConfig+0x2ac>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d1f0      	bne.n	80024e0 <HAL_RCC_OscConfig+0xe8>
 80024fe:	e000      	b.n	8002502 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002500:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	2b00      	cmp	r3, #0
 800250c:	d063      	beq.n	80025d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800250e:	4b65      	ldr	r3, [pc, #404]	; (80026a4 <HAL_RCC_OscConfig+0x2ac>)
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f003 030c 	and.w	r3, r3, #12
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00b      	beq.n	8002532 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800251a:	4b62      	ldr	r3, [pc, #392]	; (80026a4 <HAL_RCC_OscConfig+0x2ac>)
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002522:	2b08      	cmp	r3, #8
 8002524:	d11c      	bne.n	8002560 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002526:	4b5f      	ldr	r3, [pc, #380]	; (80026a4 <HAL_RCC_OscConfig+0x2ac>)
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d116      	bne.n	8002560 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002532:	4b5c      	ldr	r3, [pc, #368]	; (80026a4 <HAL_RCC_OscConfig+0x2ac>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	2b00      	cmp	r3, #0
 800253c:	d005      	beq.n	800254a <HAL_RCC_OscConfig+0x152>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d001      	beq.n	800254a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e1bb      	b.n	80028c2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800254a:	4b56      	ldr	r3, [pc, #344]	; (80026a4 <HAL_RCC_OscConfig+0x2ac>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	00db      	lsls	r3, r3, #3
 8002558:	4952      	ldr	r1, [pc, #328]	; (80026a4 <HAL_RCC_OscConfig+0x2ac>)
 800255a:	4313      	orrs	r3, r2
 800255c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800255e:	e03a      	b.n	80025d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d020      	beq.n	80025aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002568:	4b4f      	ldr	r3, [pc, #316]	; (80026a8 <HAL_RCC_OscConfig+0x2b0>)
 800256a:	2201      	movs	r2, #1
 800256c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800256e:	f7fe fae5 	bl	8000b3c <HAL_GetTick>
 8002572:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002574:	e008      	b.n	8002588 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002576:	f7fe fae1 	bl	8000b3c <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	2b02      	cmp	r3, #2
 8002582:	d901      	bls.n	8002588 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e19c      	b.n	80028c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002588:	4b46      	ldr	r3, [pc, #280]	; (80026a4 <HAL_RCC_OscConfig+0x2ac>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0302 	and.w	r3, r3, #2
 8002590:	2b00      	cmp	r3, #0
 8002592:	d0f0      	beq.n	8002576 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002594:	4b43      	ldr	r3, [pc, #268]	; (80026a4 <HAL_RCC_OscConfig+0x2ac>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	00db      	lsls	r3, r3, #3
 80025a2:	4940      	ldr	r1, [pc, #256]	; (80026a4 <HAL_RCC_OscConfig+0x2ac>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	600b      	str	r3, [r1, #0]
 80025a8:	e015      	b.n	80025d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025aa:	4b3f      	ldr	r3, [pc, #252]	; (80026a8 <HAL_RCC_OscConfig+0x2b0>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b0:	f7fe fac4 	bl	8000b3c <HAL_GetTick>
 80025b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025b6:	e008      	b.n	80025ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025b8:	f7fe fac0 	bl	8000b3c <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e17b      	b.n	80028c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ca:	4b36      	ldr	r3, [pc, #216]	; (80026a4 <HAL_RCC_OscConfig+0x2ac>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d1f0      	bne.n	80025b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0308 	and.w	r3, r3, #8
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d030      	beq.n	8002644 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d016      	beq.n	8002618 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025ea:	4b30      	ldr	r3, [pc, #192]	; (80026ac <HAL_RCC_OscConfig+0x2b4>)
 80025ec:	2201      	movs	r2, #1
 80025ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f0:	f7fe faa4 	bl	8000b3c <HAL_GetTick>
 80025f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025f6:	e008      	b.n	800260a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025f8:	f7fe faa0 	bl	8000b3c <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b02      	cmp	r3, #2
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e15b      	b.n	80028c2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800260a:	4b26      	ldr	r3, [pc, #152]	; (80026a4 <HAL_RCC_OscConfig+0x2ac>)
 800260c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d0f0      	beq.n	80025f8 <HAL_RCC_OscConfig+0x200>
 8002616:	e015      	b.n	8002644 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002618:	4b24      	ldr	r3, [pc, #144]	; (80026ac <HAL_RCC_OscConfig+0x2b4>)
 800261a:	2200      	movs	r2, #0
 800261c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800261e:	f7fe fa8d 	bl	8000b3c <HAL_GetTick>
 8002622:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002624:	e008      	b.n	8002638 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002626:	f7fe fa89 	bl	8000b3c <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	2b02      	cmp	r3, #2
 8002632:	d901      	bls.n	8002638 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e144      	b.n	80028c2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002638:	4b1a      	ldr	r3, [pc, #104]	; (80026a4 <HAL_RCC_OscConfig+0x2ac>)
 800263a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800263c:	f003 0302 	and.w	r3, r3, #2
 8002640:	2b00      	cmp	r3, #0
 8002642:	d1f0      	bne.n	8002626 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0304 	and.w	r3, r3, #4
 800264c:	2b00      	cmp	r3, #0
 800264e:	f000 80a0 	beq.w	8002792 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002652:	2300      	movs	r3, #0
 8002654:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002656:	4b13      	ldr	r3, [pc, #76]	; (80026a4 <HAL_RCC_OscConfig+0x2ac>)
 8002658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d10f      	bne.n	8002682 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002662:	2300      	movs	r3, #0
 8002664:	60bb      	str	r3, [r7, #8]
 8002666:	4b0f      	ldr	r3, [pc, #60]	; (80026a4 <HAL_RCC_OscConfig+0x2ac>)
 8002668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266a:	4a0e      	ldr	r2, [pc, #56]	; (80026a4 <HAL_RCC_OscConfig+0x2ac>)
 800266c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002670:	6413      	str	r3, [r2, #64]	; 0x40
 8002672:	4b0c      	ldr	r3, [pc, #48]	; (80026a4 <HAL_RCC_OscConfig+0x2ac>)
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800267a:	60bb      	str	r3, [r7, #8]
 800267c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800267e:	2301      	movs	r3, #1
 8002680:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002682:	4b0b      	ldr	r3, [pc, #44]	; (80026b0 <HAL_RCC_OscConfig+0x2b8>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800268a:	2b00      	cmp	r3, #0
 800268c:	d121      	bne.n	80026d2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800268e:	4b08      	ldr	r3, [pc, #32]	; (80026b0 <HAL_RCC_OscConfig+0x2b8>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a07      	ldr	r2, [pc, #28]	; (80026b0 <HAL_RCC_OscConfig+0x2b8>)
 8002694:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002698:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800269a:	f7fe fa4f 	bl	8000b3c <HAL_GetTick>
 800269e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026a0:	e011      	b.n	80026c6 <HAL_RCC_OscConfig+0x2ce>
 80026a2:	bf00      	nop
 80026a4:	40023800 	.word	0x40023800
 80026a8:	42470000 	.word	0x42470000
 80026ac:	42470e80 	.word	0x42470e80
 80026b0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026b4:	f7fe fa42 	bl	8000b3c <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e0fd      	b.n	80028c2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c6:	4b81      	ldr	r3, [pc, #516]	; (80028cc <HAL_RCC_OscConfig+0x4d4>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d0f0      	beq.n	80026b4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d106      	bne.n	80026e8 <HAL_RCC_OscConfig+0x2f0>
 80026da:	4b7d      	ldr	r3, [pc, #500]	; (80028d0 <HAL_RCC_OscConfig+0x4d8>)
 80026dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026de:	4a7c      	ldr	r2, [pc, #496]	; (80028d0 <HAL_RCC_OscConfig+0x4d8>)
 80026e0:	f043 0301 	orr.w	r3, r3, #1
 80026e4:	6713      	str	r3, [r2, #112]	; 0x70
 80026e6:	e01c      	b.n	8002722 <HAL_RCC_OscConfig+0x32a>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	2b05      	cmp	r3, #5
 80026ee:	d10c      	bne.n	800270a <HAL_RCC_OscConfig+0x312>
 80026f0:	4b77      	ldr	r3, [pc, #476]	; (80028d0 <HAL_RCC_OscConfig+0x4d8>)
 80026f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f4:	4a76      	ldr	r2, [pc, #472]	; (80028d0 <HAL_RCC_OscConfig+0x4d8>)
 80026f6:	f043 0304 	orr.w	r3, r3, #4
 80026fa:	6713      	str	r3, [r2, #112]	; 0x70
 80026fc:	4b74      	ldr	r3, [pc, #464]	; (80028d0 <HAL_RCC_OscConfig+0x4d8>)
 80026fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002700:	4a73      	ldr	r2, [pc, #460]	; (80028d0 <HAL_RCC_OscConfig+0x4d8>)
 8002702:	f043 0301 	orr.w	r3, r3, #1
 8002706:	6713      	str	r3, [r2, #112]	; 0x70
 8002708:	e00b      	b.n	8002722 <HAL_RCC_OscConfig+0x32a>
 800270a:	4b71      	ldr	r3, [pc, #452]	; (80028d0 <HAL_RCC_OscConfig+0x4d8>)
 800270c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800270e:	4a70      	ldr	r2, [pc, #448]	; (80028d0 <HAL_RCC_OscConfig+0x4d8>)
 8002710:	f023 0301 	bic.w	r3, r3, #1
 8002714:	6713      	str	r3, [r2, #112]	; 0x70
 8002716:	4b6e      	ldr	r3, [pc, #440]	; (80028d0 <HAL_RCC_OscConfig+0x4d8>)
 8002718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800271a:	4a6d      	ldr	r2, [pc, #436]	; (80028d0 <HAL_RCC_OscConfig+0x4d8>)
 800271c:	f023 0304 	bic.w	r3, r3, #4
 8002720:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d015      	beq.n	8002756 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800272a:	f7fe fa07 	bl	8000b3c <HAL_GetTick>
 800272e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002730:	e00a      	b.n	8002748 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002732:	f7fe fa03 	bl	8000b3c <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002740:	4293      	cmp	r3, r2
 8002742:	d901      	bls.n	8002748 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	e0bc      	b.n	80028c2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002748:	4b61      	ldr	r3, [pc, #388]	; (80028d0 <HAL_RCC_OscConfig+0x4d8>)
 800274a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800274c:	f003 0302 	and.w	r3, r3, #2
 8002750:	2b00      	cmp	r3, #0
 8002752:	d0ee      	beq.n	8002732 <HAL_RCC_OscConfig+0x33a>
 8002754:	e014      	b.n	8002780 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002756:	f7fe f9f1 	bl	8000b3c <HAL_GetTick>
 800275a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800275c:	e00a      	b.n	8002774 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800275e:	f7fe f9ed 	bl	8000b3c <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	f241 3288 	movw	r2, #5000	; 0x1388
 800276c:	4293      	cmp	r3, r2
 800276e:	d901      	bls.n	8002774 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e0a6      	b.n	80028c2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002774:	4b56      	ldr	r3, [pc, #344]	; (80028d0 <HAL_RCC_OscConfig+0x4d8>)
 8002776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002778:	f003 0302 	and.w	r3, r3, #2
 800277c:	2b00      	cmp	r3, #0
 800277e:	d1ee      	bne.n	800275e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002780:	7dfb      	ldrb	r3, [r7, #23]
 8002782:	2b01      	cmp	r3, #1
 8002784:	d105      	bne.n	8002792 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002786:	4b52      	ldr	r3, [pc, #328]	; (80028d0 <HAL_RCC_OscConfig+0x4d8>)
 8002788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278a:	4a51      	ldr	r2, [pc, #324]	; (80028d0 <HAL_RCC_OscConfig+0x4d8>)
 800278c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002790:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	699b      	ldr	r3, [r3, #24]
 8002796:	2b00      	cmp	r3, #0
 8002798:	f000 8092 	beq.w	80028c0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800279c:	4b4c      	ldr	r3, [pc, #304]	; (80028d0 <HAL_RCC_OscConfig+0x4d8>)
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f003 030c 	and.w	r3, r3, #12
 80027a4:	2b08      	cmp	r3, #8
 80027a6:	d05c      	beq.n	8002862 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	699b      	ldr	r3, [r3, #24]
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d141      	bne.n	8002834 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027b0:	4b48      	ldr	r3, [pc, #288]	; (80028d4 <HAL_RCC_OscConfig+0x4dc>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b6:	f7fe f9c1 	bl	8000b3c <HAL_GetTick>
 80027ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027bc:	e008      	b.n	80027d0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027be:	f7fe f9bd 	bl	8000b3c <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d901      	bls.n	80027d0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e078      	b.n	80028c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027d0:	4b3f      	ldr	r3, [pc, #252]	; (80028d0 <HAL_RCC_OscConfig+0x4d8>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d1f0      	bne.n	80027be <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	69da      	ldr	r2, [r3, #28]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a1b      	ldr	r3, [r3, #32]
 80027e4:	431a      	orrs	r2, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ea:	019b      	lsls	r3, r3, #6
 80027ec:	431a      	orrs	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f2:	085b      	lsrs	r3, r3, #1
 80027f4:	3b01      	subs	r3, #1
 80027f6:	041b      	lsls	r3, r3, #16
 80027f8:	431a      	orrs	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027fe:	061b      	lsls	r3, r3, #24
 8002800:	4933      	ldr	r1, [pc, #204]	; (80028d0 <HAL_RCC_OscConfig+0x4d8>)
 8002802:	4313      	orrs	r3, r2
 8002804:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002806:	4b33      	ldr	r3, [pc, #204]	; (80028d4 <HAL_RCC_OscConfig+0x4dc>)
 8002808:	2201      	movs	r2, #1
 800280a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800280c:	f7fe f996 	bl	8000b3c <HAL_GetTick>
 8002810:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002812:	e008      	b.n	8002826 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002814:	f7fe f992 	bl	8000b3c <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	2b02      	cmp	r3, #2
 8002820:	d901      	bls.n	8002826 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e04d      	b.n	80028c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002826:	4b2a      	ldr	r3, [pc, #168]	; (80028d0 <HAL_RCC_OscConfig+0x4d8>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d0f0      	beq.n	8002814 <HAL_RCC_OscConfig+0x41c>
 8002832:	e045      	b.n	80028c0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002834:	4b27      	ldr	r3, [pc, #156]	; (80028d4 <HAL_RCC_OscConfig+0x4dc>)
 8002836:	2200      	movs	r2, #0
 8002838:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800283a:	f7fe f97f 	bl	8000b3c <HAL_GetTick>
 800283e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002840:	e008      	b.n	8002854 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002842:	f7fe f97b 	bl	8000b3c <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	2b02      	cmp	r3, #2
 800284e:	d901      	bls.n	8002854 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e036      	b.n	80028c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002854:	4b1e      	ldr	r3, [pc, #120]	; (80028d0 <HAL_RCC_OscConfig+0x4d8>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d1f0      	bne.n	8002842 <HAL_RCC_OscConfig+0x44a>
 8002860:	e02e      	b.n	80028c0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	699b      	ldr	r3, [r3, #24]
 8002866:	2b01      	cmp	r3, #1
 8002868:	d101      	bne.n	800286e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e029      	b.n	80028c2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800286e:	4b18      	ldr	r3, [pc, #96]	; (80028d0 <HAL_RCC_OscConfig+0x4d8>)
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	69db      	ldr	r3, [r3, #28]
 800287e:	429a      	cmp	r2, r3
 8002880:	d11c      	bne.n	80028bc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800288c:	429a      	cmp	r2, r3
 800288e:	d115      	bne.n	80028bc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002896:	4013      	ands	r3, r2
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800289c:	4293      	cmp	r3, r2
 800289e:	d10d      	bne.n	80028bc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d106      	bne.n	80028bc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d001      	beq.n	80028c0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e000      	b.n	80028c2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3718      	adds	r7, #24
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	40007000 	.word	0x40007000
 80028d0:	40023800 	.word	0x40023800
 80028d4:	42470060 	.word	0x42470060

080028d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d101      	bne.n	80028ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e0cc      	b.n	8002a86 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028ec:	4b68      	ldr	r3, [pc, #416]	; (8002a90 <HAL_RCC_ClockConfig+0x1b8>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 030f 	and.w	r3, r3, #15
 80028f4:	683a      	ldr	r2, [r7, #0]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d90c      	bls.n	8002914 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028fa:	4b65      	ldr	r3, [pc, #404]	; (8002a90 <HAL_RCC_ClockConfig+0x1b8>)
 80028fc:	683a      	ldr	r2, [r7, #0]
 80028fe:	b2d2      	uxtb	r2, r2
 8002900:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002902:	4b63      	ldr	r3, [pc, #396]	; (8002a90 <HAL_RCC_ClockConfig+0x1b8>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 030f 	and.w	r3, r3, #15
 800290a:	683a      	ldr	r2, [r7, #0]
 800290c:	429a      	cmp	r2, r3
 800290e:	d001      	beq.n	8002914 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e0b8      	b.n	8002a86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	2b00      	cmp	r3, #0
 800291e:	d020      	beq.n	8002962 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0304 	and.w	r3, r3, #4
 8002928:	2b00      	cmp	r3, #0
 800292a:	d005      	beq.n	8002938 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800292c:	4b59      	ldr	r3, [pc, #356]	; (8002a94 <HAL_RCC_ClockConfig+0x1bc>)
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	4a58      	ldr	r2, [pc, #352]	; (8002a94 <HAL_RCC_ClockConfig+0x1bc>)
 8002932:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002936:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0308 	and.w	r3, r3, #8
 8002940:	2b00      	cmp	r3, #0
 8002942:	d005      	beq.n	8002950 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002944:	4b53      	ldr	r3, [pc, #332]	; (8002a94 <HAL_RCC_ClockConfig+0x1bc>)
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	4a52      	ldr	r2, [pc, #328]	; (8002a94 <HAL_RCC_ClockConfig+0x1bc>)
 800294a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800294e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002950:	4b50      	ldr	r3, [pc, #320]	; (8002a94 <HAL_RCC_ClockConfig+0x1bc>)
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	494d      	ldr	r1, [pc, #308]	; (8002a94 <HAL_RCC_ClockConfig+0x1bc>)
 800295e:	4313      	orrs	r3, r2
 8002960:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0301 	and.w	r3, r3, #1
 800296a:	2b00      	cmp	r3, #0
 800296c:	d044      	beq.n	80029f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	2b01      	cmp	r3, #1
 8002974:	d107      	bne.n	8002986 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002976:	4b47      	ldr	r3, [pc, #284]	; (8002a94 <HAL_RCC_ClockConfig+0x1bc>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d119      	bne.n	80029b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e07f      	b.n	8002a86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	2b02      	cmp	r3, #2
 800298c:	d003      	beq.n	8002996 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002992:	2b03      	cmp	r3, #3
 8002994:	d107      	bne.n	80029a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002996:	4b3f      	ldr	r3, [pc, #252]	; (8002a94 <HAL_RCC_ClockConfig+0x1bc>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d109      	bne.n	80029b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e06f      	b.n	8002a86 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029a6:	4b3b      	ldr	r3, [pc, #236]	; (8002a94 <HAL_RCC_ClockConfig+0x1bc>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d101      	bne.n	80029b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e067      	b.n	8002a86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029b6:	4b37      	ldr	r3, [pc, #220]	; (8002a94 <HAL_RCC_ClockConfig+0x1bc>)
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f023 0203 	bic.w	r2, r3, #3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	4934      	ldr	r1, [pc, #208]	; (8002a94 <HAL_RCC_ClockConfig+0x1bc>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029c8:	f7fe f8b8 	bl	8000b3c <HAL_GetTick>
 80029cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ce:	e00a      	b.n	80029e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029d0:	f7fe f8b4 	bl	8000b3c <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	f241 3288 	movw	r2, #5000	; 0x1388
 80029de:	4293      	cmp	r3, r2
 80029e0:	d901      	bls.n	80029e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e04f      	b.n	8002a86 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029e6:	4b2b      	ldr	r3, [pc, #172]	; (8002a94 <HAL_RCC_ClockConfig+0x1bc>)
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f003 020c 	and.w	r2, r3, #12
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d1eb      	bne.n	80029d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029f8:	4b25      	ldr	r3, [pc, #148]	; (8002a90 <HAL_RCC_ClockConfig+0x1b8>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 030f 	and.w	r3, r3, #15
 8002a00:	683a      	ldr	r2, [r7, #0]
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d20c      	bcs.n	8002a20 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a06:	4b22      	ldr	r3, [pc, #136]	; (8002a90 <HAL_RCC_ClockConfig+0x1b8>)
 8002a08:	683a      	ldr	r2, [r7, #0]
 8002a0a:	b2d2      	uxtb	r2, r2
 8002a0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a0e:	4b20      	ldr	r3, [pc, #128]	; (8002a90 <HAL_RCC_ClockConfig+0x1b8>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 030f 	and.w	r3, r3, #15
 8002a16:	683a      	ldr	r2, [r7, #0]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d001      	beq.n	8002a20 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e032      	b.n	8002a86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0304 	and.w	r3, r3, #4
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d008      	beq.n	8002a3e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a2c:	4b19      	ldr	r3, [pc, #100]	; (8002a94 <HAL_RCC_ClockConfig+0x1bc>)
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	4916      	ldr	r1, [pc, #88]	; (8002a94 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0308 	and.w	r3, r3, #8
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d009      	beq.n	8002a5e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a4a:	4b12      	ldr	r3, [pc, #72]	; (8002a94 <HAL_RCC_ClockConfig+0x1bc>)
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	00db      	lsls	r3, r3, #3
 8002a58:	490e      	ldr	r1, [pc, #56]	; (8002a94 <HAL_RCC_ClockConfig+0x1bc>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a5e:	f000 f821 	bl	8002aa4 <HAL_RCC_GetSysClockFreq>
 8002a62:	4601      	mov	r1, r0
 8002a64:	4b0b      	ldr	r3, [pc, #44]	; (8002a94 <HAL_RCC_ClockConfig+0x1bc>)
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	091b      	lsrs	r3, r3, #4
 8002a6a:	f003 030f 	and.w	r3, r3, #15
 8002a6e:	4a0a      	ldr	r2, [pc, #40]	; (8002a98 <HAL_RCC_ClockConfig+0x1c0>)
 8002a70:	5cd3      	ldrb	r3, [r2, r3]
 8002a72:	fa21 f303 	lsr.w	r3, r1, r3
 8002a76:	4a09      	ldr	r2, [pc, #36]	; (8002a9c <HAL_RCC_ClockConfig+0x1c4>)
 8002a78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a7a:	4b09      	ldr	r3, [pc, #36]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c8>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7fe f818 	bl	8000ab4 <HAL_InitTick>

  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3710      	adds	r7, #16
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	40023c00 	.word	0x40023c00
 8002a94:	40023800 	.word	0x40023800
 8002a98:	080067f0 	.word	0x080067f0
 8002a9c:	20000014 	.word	0x20000014
 8002aa0:	20000018 	.word	0x20000018

08002aa4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002aa6:	b085      	sub	sp, #20
 8002aa8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	607b      	str	r3, [r7, #4]
 8002aae:	2300      	movs	r3, #0
 8002ab0:	60fb      	str	r3, [r7, #12]
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002aba:	4b63      	ldr	r3, [pc, #396]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f003 030c 	and.w	r3, r3, #12
 8002ac2:	2b04      	cmp	r3, #4
 8002ac4:	d007      	beq.n	8002ad6 <HAL_RCC_GetSysClockFreq+0x32>
 8002ac6:	2b08      	cmp	r3, #8
 8002ac8:	d008      	beq.n	8002adc <HAL_RCC_GetSysClockFreq+0x38>
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	f040 80b4 	bne.w	8002c38 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ad0:	4b5e      	ldr	r3, [pc, #376]	; (8002c4c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002ad2:	60bb      	str	r3, [r7, #8]
       break;
 8002ad4:	e0b3      	b.n	8002c3e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ad6:	4b5e      	ldr	r3, [pc, #376]	; (8002c50 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002ad8:	60bb      	str	r3, [r7, #8]
      break;
 8002ada:	e0b0      	b.n	8002c3e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002adc:	4b5a      	ldr	r3, [pc, #360]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ae4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ae6:	4b58      	ldr	r3, [pc, #352]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d04a      	beq.n	8002b88 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002af2:	4b55      	ldr	r3, [pc, #340]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	099b      	lsrs	r3, r3, #6
 8002af8:	f04f 0400 	mov.w	r4, #0
 8002afc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002b00:	f04f 0200 	mov.w	r2, #0
 8002b04:	ea03 0501 	and.w	r5, r3, r1
 8002b08:	ea04 0602 	and.w	r6, r4, r2
 8002b0c:	4629      	mov	r1, r5
 8002b0e:	4632      	mov	r2, r6
 8002b10:	f04f 0300 	mov.w	r3, #0
 8002b14:	f04f 0400 	mov.w	r4, #0
 8002b18:	0154      	lsls	r4, r2, #5
 8002b1a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002b1e:	014b      	lsls	r3, r1, #5
 8002b20:	4619      	mov	r1, r3
 8002b22:	4622      	mov	r2, r4
 8002b24:	1b49      	subs	r1, r1, r5
 8002b26:	eb62 0206 	sbc.w	r2, r2, r6
 8002b2a:	f04f 0300 	mov.w	r3, #0
 8002b2e:	f04f 0400 	mov.w	r4, #0
 8002b32:	0194      	lsls	r4, r2, #6
 8002b34:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002b38:	018b      	lsls	r3, r1, #6
 8002b3a:	1a5b      	subs	r3, r3, r1
 8002b3c:	eb64 0402 	sbc.w	r4, r4, r2
 8002b40:	f04f 0100 	mov.w	r1, #0
 8002b44:	f04f 0200 	mov.w	r2, #0
 8002b48:	00e2      	lsls	r2, r4, #3
 8002b4a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002b4e:	00d9      	lsls	r1, r3, #3
 8002b50:	460b      	mov	r3, r1
 8002b52:	4614      	mov	r4, r2
 8002b54:	195b      	adds	r3, r3, r5
 8002b56:	eb44 0406 	adc.w	r4, r4, r6
 8002b5a:	f04f 0100 	mov.w	r1, #0
 8002b5e:	f04f 0200 	mov.w	r2, #0
 8002b62:	0262      	lsls	r2, r4, #9
 8002b64:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002b68:	0259      	lsls	r1, r3, #9
 8002b6a:	460b      	mov	r3, r1
 8002b6c:	4614      	mov	r4, r2
 8002b6e:	4618      	mov	r0, r3
 8002b70:	4621      	mov	r1, r4
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f04f 0400 	mov.w	r4, #0
 8002b78:	461a      	mov	r2, r3
 8002b7a:	4623      	mov	r3, r4
 8002b7c:	f7fd fb2c 	bl	80001d8 <__aeabi_uldivmod>
 8002b80:	4603      	mov	r3, r0
 8002b82:	460c      	mov	r4, r1
 8002b84:	60fb      	str	r3, [r7, #12]
 8002b86:	e049      	b.n	8002c1c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b88:	4b2f      	ldr	r3, [pc, #188]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	099b      	lsrs	r3, r3, #6
 8002b8e:	f04f 0400 	mov.w	r4, #0
 8002b92:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002b96:	f04f 0200 	mov.w	r2, #0
 8002b9a:	ea03 0501 	and.w	r5, r3, r1
 8002b9e:	ea04 0602 	and.w	r6, r4, r2
 8002ba2:	4629      	mov	r1, r5
 8002ba4:	4632      	mov	r2, r6
 8002ba6:	f04f 0300 	mov.w	r3, #0
 8002baa:	f04f 0400 	mov.w	r4, #0
 8002bae:	0154      	lsls	r4, r2, #5
 8002bb0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002bb4:	014b      	lsls	r3, r1, #5
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	4622      	mov	r2, r4
 8002bba:	1b49      	subs	r1, r1, r5
 8002bbc:	eb62 0206 	sbc.w	r2, r2, r6
 8002bc0:	f04f 0300 	mov.w	r3, #0
 8002bc4:	f04f 0400 	mov.w	r4, #0
 8002bc8:	0194      	lsls	r4, r2, #6
 8002bca:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002bce:	018b      	lsls	r3, r1, #6
 8002bd0:	1a5b      	subs	r3, r3, r1
 8002bd2:	eb64 0402 	sbc.w	r4, r4, r2
 8002bd6:	f04f 0100 	mov.w	r1, #0
 8002bda:	f04f 0200 	mov.w	r2, #0
 8002bde:	00e2      	lsls	r2, r4, #3
 8002be0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002be4:	00d9      	lsls	r1, r3, #3
 8002be6:	460b      	mov	r3, r1
 8002be8:	4614      	mov	r4, r2
 8002bea:	195b      	adds	r3, r3, r5
 8002bec:	eb44 0406 	adc.w	r4, r4, r6
 8002bf0:	f04f 0100 	mov.w	r1, #0
 8002bf4:	f04f 0200 	mov.w	r2, #0
 8002bf8:	02a2      	lsls	r2, r4, #10
 8002bfa:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002bfe:	0299      	lsls	r1, r3, #10
 8002c00:	460b      	mov	r3, r1
 8002c02:	4614      	mov	r4, r2
 8002c04:	4618      	mov	r0, r3
 8002c06:	4621      	mov	r1, r4
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f04f 0400 	mov.w	r4, #0
 8002c0e:	461a      	mov	r2, r3
 8002c10:	4623      	mov	r3, r4
 8002c12:	f7fd fae1 	bl	80001d8 <__aeabi_uldivmod>
 8002c16:	4603      	mov	r3, r0
 8002c18:	460c      	mov	r4, r1
 8002c1a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c1c:	4b0a      	ldr	r3, [pc, #40]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	0c1b      	lsrs	r3, r3, #16
 8002c22:	f003 0303 	and.w	r3, r3, #3
 8002c26:	3301      	adds	r3, #1
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c34:	60bb      	str	r3, [r7, #8]
      break;
 8002c36:	e002      	b.n	8002c3e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c38:	4b04      	ldr	r3, [pc, #16]	; (8002c4c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002c3a:	60bb      	str	r3, [r7, #8]
      break;
 8002c3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c3e:	68bb      	ldr	r3, [r7, #8]
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3714      	adds	r7, #20
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c48:	40023800 	.word	0x40023800
 8002c4c:	00f42400 	.word	0x00f42400
 8002c50:	007a1200 	.word	0x007a1200

08002c54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c54:	b480      	push	{r7}
 8002c56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c58:	4b03      	ldr	r3, [pc, #12]	; (8002c68 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	20000014 	.word	0x20000014

08002c6c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002c6c:	b084      	sub	sp, #16
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b084      	sub	sp, #16
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
 8002c76:	f107 001c 	add.w	r0, r7, #28
 8002c7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d122      	bne.n	8002cca <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c88:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002c98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002cac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d105      	bne.n	8002cbe <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f001 fac6 	bl	8004250 <USB_CoreReset>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	73fb      	strb	r3, [r7, #15]
 8002cc8:	e01a      	b.n	8002d00 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f001 faba 	bl	8004250 <USB_CoreReset>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002ce0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d106      	bne.n	8002cf4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	639a      	str	r2, [r3, #56]	; 0x38
 8002cf2:	e005      	b.n	8002d00 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d10b      	bne.n	8002d1e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	f043 0206 	orr.w	r2, r3, #6
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f043 0220 	orr.w	r2, r3, #32
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3710      	adds	r7, #16
 8002d24:	46bd      	mov	sp, r7
 8002d26:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002d2a:	b004      	add	sp, #16
 8002d2c:	4770      	bx	lr
	...

08002d30 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b087      	sub	sp, #28
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002d3e:	79fb      	ldrb	r3, [r7, #7]
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d165      	bne.n	8002e10 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	4a41      	ldr	r2, [pc, #260]	; (8002e4c <USB_SetTurnaroundTime+0x11c>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d906      	bls.n	8002d5a <USB_SetTurnaroundTime+0x2a>
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	4a40      	ldr	r2, [pc, #256]	; (8002e50 <USB_SetTurnaroundTime+0x120>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d802      	bhi.n	8002d5a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002d54:	230f      	movs	r3, #15
 8002d56:	617b      	str	r3, [r7, #20]
 8002d58:	e062      	b.n	8002e20 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	4a3c      	ldr	r2, [pc, #240]	; (8002e50 <USB_SetTurnaroundTime+0x120>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d906      	bls.n	8002d70 <USB_SetTurnaroundTime+0x40>
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	4a3b      	ldr	r2, [pc, #236]	; (8002e54 <USB_SetTurnaroundTime+0x124>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d802      	bhi.n	8002d70 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002d6a:	230e      	movs	r3, #14
 8002d6c:	617b      	str	r3, [r7, #20]
 8002d6e:	e057      	b.n	8002e20 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	4a38      	ldr	r2, [pc, #224]	; (8002e54 <USB_SetTurnaroundTime+0x124>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d906      	bls.n	8002d86 <USB_SetTurnaroundTime+0x56>
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	4a37      	ldr	r2, [pc, #220]	; (8002e58 <USB_SetTurnaroundTime+0x128>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d802      	bhi.n	8002d86 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002d80:	230d      	movs	r3, #13
 8002d82:	617b      	str	r3, [r7, #20]
 8002d84:	e04c      	b.n	8002e20 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	4a33      	ldr	r2, [pc, #204]	; (8002e58 <USB_SetTurnaroundTime+0x128>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d906      	bls.n	8002d9c <USB_SetTurnaroundTime+0x6c>
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	4a32      	ldr	r2, [pc, #200]	; (8002e5c <USB_SetTurnaroundTime+0x12c>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d802      	bhi.n	8002d9c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002d96:	230c      	movs	r3, #12
 8002d98:	617b      	str	r3, [r7, #20]
 8002d9a:	e041      	b.n	8002e20 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	4a2f      	ldr	r2, [pc, #188]	; (8002e5c <USB_SetTurnaroundTime+0x12c>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d906      	bls.n	8002db2 <USB_SetTurnaroundTime+0x82>
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	4a2e      	ldr	r2, [pc, #184]	; (8002e60 <USB_SetTurnaroundTime+0x130>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d802      	bhi.n	8002db2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002dac:	230b      	movs	r3, #11
 8002dae:	617b      	str	r3, [r7, #20]
 8002db0:	e036      	b.n	8002e20 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	4a2a      	ldr	r2, [pc, #168]	; (8002e60 <USB_SetTurnaroundTime+0x130>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d906      	bls.n	8002dc8 <USB_SetTurnaroundTime+0x98>
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	4a29      	ldr	r2, [pc, #164]	; (8002e64 <USB_SetTurnaroundTime+0x134>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d802      	bhi.n	8002dc8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002dc2:	230a      	movs	r3, #10
 8002dc4:	617b      	str	r3, [r7, #20]
 8002dc6:	e02b      	b.n	8002e20 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	4a26      	ldr	r2, [pc, #152]	; (8002e64 <USB_SetTurnaroundTime+0x134>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d906      	bls.n	8002dde <USB_SetTurnaroundTime+0xae>
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	4a25      	ldr	r2, [pc, #148]	; (8002e68 <USB_SetTurnaroundTime+0x138>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d802      	bhi.n	8002dde <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002dd8:	2309      	movs	r3, #9
 8002dda:	617b      	str	r3, [r7, #20]
 8002ddc:	e020      	b.n	8002e20 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	4a21      	ldr	r2, [pc, #132]	; (8002e68 <USB_SetTurnaroundTime+0x138>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d906      	bls.n	8002df4 <USB_SetTurnaroundTime+0xc4>
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	4a20      	ldr	r2, [pc, #128]	; (8002e6c <USB_SetTurnaroundTime+0x13c>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d802      	bhi.n	8002df4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002dee:	2308      	movs	r3, #8
 8002df0:	617b      	str	r3, [r7, #20]
 8002df2:	e015      	b.n	8002e20 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	4a1d      	ldr	r2, [pc, #116]	; (8002e6c <USB_SetTurnaroundTime+0x13c>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d906      	bls.n	8002e0a <USB_SetTurnaroundTime+0xda>
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	4a1c      	ldr	r2, [pc, #112]	; (8002e70 <USB_SetTurnaroundTime+0x140>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d802      	bhi.n	8002e0a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002e04:	2307      	movs	r3, #7
 8002e06:	617b      	str	r3, [r7, #20]
 8002e08:	e00a      	b.n	8002e20 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002e0a:	2306      	movs	r3, #6
 8002e0c:	617b      	str	r3, [r7, #20]
 8002e0e:	e007      	b.n	8002e20 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002e10:	79fb      	ldrb	r3, [r7, #7]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d102      	bne.n	8002e1c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002e16:	2309      	movs	r3, #9
 8002e18:	617b      	str	r3, [r7, #20]
 8002e1a:	e001      	b.n	8002e20 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002e1c:	2309      	movs	r3, #9
 8002e1e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	68da      	ldr	r2, [r3, #12]
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	029b      	lsls	r3, r3, #10
 8002e34:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8002e38:	431a      	orrs	r2, r3
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002e3e:	2300      	movs	r3, #0
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	371c      	adds	r7, #28
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr
 8002e4c:	00d8acbf 	.word	0x00d8acbf
 8002e50:	00e4e1bf 	.word	0x00e4e1bf
 8002e54:	00f423ff 	.word	0x00f423ff
 8002e58:	0106737f 	.word	0x0106737f
 8002e5c:	011a499f 	.word	0x011a499f
 8002e60:	01312cff 	.word	0x01312cff
 8002e64:	014ca43f 	.word	0x014ca43f
 8002e68:	016e35ff 	.word	0x016e35ff
 8002e6c:	01a6ab1f 	.word	0x01a6ab1f
 8002e70:	01e847ff 	.word	0x01e847ff

08002e74 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	f043 0201 	orr.w	r2, r3, #1
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	370c      	adds	r7, #12
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr

08002e96 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002e96:	b480      	push	{r7}
 8002e98:	b083      	sub	sp, #12
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f023 0201 	bic.w	r2, r3, #1
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002eaa:	2300      	movs	r3, #0
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002ed0:	78fb      	ldrb	r3, [r7, #3]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d106      	bne.n	8002ee4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	60da      	str	r2, [r3, #12]
 8002ee2:	e00b      	b.n	8002efc <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8002ee4:	78fb      	ldrb	r3, [r7, #3]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d106      	bne.n	8002ef8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	60da      	str	r2, [r3, #12]
 8002ef6:	e001      	b.n	8002efc <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e003      	b.n	8002f04 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8002efc:	2032      	movs	r0, #50	; 0x32
 8002efe:	f7fd fe29 	bl	8000b54 <HAL_Delay>

  return HAL_OK;
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3708      	adds	r7, #8
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002f0c:	b084      	sub	sp, #16
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b086      	sub	sp, #24
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
 8002f16:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002f1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002f26:	2300      	movs	r3, #0
 8002f28:	613b      	str	r3, [r7, #16]
 8002f2a:	e009      	b.n	8002f40 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	3340      	adds	r3, #64	; 0x40
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	4413      	add	r3, r2
 8002f36:	2200      	movs	r2, #0
 8002f38:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	613b      	str	r3, [r7, #16]
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	2b0e      	cmp	r3, #14
 8002f44:	d9f2      	bls.n	8002f2c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002f46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d11c      	bne.n	8002f86 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	68fa      	ldr	r2, [r7, #12]
 8002f56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f5a:	f043 0302 	orr.w	r3, r3, #2
 8002f5e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f64:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f70:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f7c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	639a      	str	r2, [r3, #56]	; 0x38
 8002f84:	e00b      	b.n	8002f9e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f8a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f96:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fb8:	461a      	mov	r2, r3
 8002fba:	680b      	ldr	r3, [r1, #0]
 8002fbc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d10c      	bne.n	8002fde <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d104      	bne.n	8002fd4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002fca:	2100      	movs	r1, #0
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f000 f949 	bl	8003264 <USB_SetDevSpeed>
 8002fd2:	e008      	b.n	8002fe6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002fd4:	2101      	movs	r1, #1
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f000 f944 	bl	8003264 <USB_SetDevSpeed>
 8002fdc:	e003      	b.n	8002fe6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002fde:	2103      	movs	r1, #3
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f000 f93f 	bl	8003264 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002fe6:	2110      	movs	r1, #16
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f000 f8f3 	bl	80031d4 <USB_FlushTxFifo>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d001      	beq.n	8002ff8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f000 f911 	bl	8003220 <USB_FlushRxFifo>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d001      	beq.n	8003008 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800300e:	461a      	mov	r2, r3
 8003010:	2300      	movs	r3, #0
 8003012:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800301a:	461a      	mov	r2, r3
 800301c:	2300      	movs	r3, #0
 800301e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003026:	461a      	mov	r2, r3
 8003028:	2300      	movs	r3, #0
 800302a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800302c:	2300      	movs	r3, #0
 800302e:	613b      	str	r3, [r7, #16]
 8003030:	e043      	b.n	80030ba <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	015a      	lsls	r2, r3, #5
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	4413      	add	r3, r2
 800303a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003044:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003048:	d118      	bne.n	800307c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d10a      	bne.n	8003066 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	015a      	lsls	r2, r3, #5
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	4413      	add	r3, r2
 8003058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800305c:	461a      	mov	r2, r3
 800305e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003062:	6013      	str	r3, [r2, #0]
 8003064:	e013      	b.n	800308e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	015a      	lsls	r2, r3, #5
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	4413      	add	r3, r2
 800306e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003072:	461a      	mov	r2, r3
 8003074:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003078:	6013      	str	r3, [r2, #0]
 800307a:	e008      	b.n	800308e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	015a      	lsls	r2, r3, #5
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	4413      	add	r3, r2
 8003084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003088:	461a      	mov	r2, r3
 800308a:	2300      	movs	r3, #0
 800308c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	015a      	lsls	r2, r3, #5
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	4413      	add	r3, r2
 8003096:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800309a:	461a      	mov	r2, r3
 800309c:	2300      	movs	r3, #0
 800309e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	015a      	lsls	r2, r3, #5
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	4413      	add	r3, r2
 80030a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030ac:	461a      	mov	r2, r3
 80030ae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80030b2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	3301      	adds	r3, #1
 80030b8:	613b      	str	r3, [r7, #16]
 80030ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030bc:	693a      	ldr	r2, [r7, #16]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d3b7      	bcc.n	8003032 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80030c2:	2300      	movs	r3, #0
 80030c4:	613b      	str	r3, [r7, #16]
 80030c6:	e043      	b.n	8003150 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	015a      	lsls	r2, r3, #5
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	4413      	add	r3, r2
 80030d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80030da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80030de:	d118      	bne.n	8003112 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d10a      	bne.n	80030fc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	015a      	lsls	r2, r3, #5
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	4413      	add	r3, r2
 80030ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030f2:	461a      	mov	r2, r3
 80030f4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80030f8:	6013      	str	r3, [r2, #0]
 80030fa:	e013      	b.n	8003124 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	015a      	lsls	r2, r3, #5
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	4413      	add	r3, r2
 8003104:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003108:	461a      	mov	r2, r3
 800310a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800310e:	6013      	str	r3, [r2, #0]
 8003110:	e008      	b.n	8003124 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	015a      	lsls	r2, r3, #5
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	4413      	add	r3, r2
 800311a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800311e:	461a      	mov	r2, r3
 8003120:	2300      	movs	r3, #0
 8003122:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	015a      	lsls	r2, r3, #5
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	4413      	add	r3, r2
 800312c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003130:	461a      	mov	r2, r3
 8003132:	2300      	movs	r3, #0
 8003134:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	015a      	lsls	r2, r3, #5
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	4413      	add	r3, r2
 800313e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003142:	461a      	mov	r2, r3
 8003144:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003148:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	3301      	adds	r3, #1
 800314e:	613b      	str	r3, [r7, #16]
 8003150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003152:	693a      	ldr	r2, [r7, #16]
 8003154:	429a      	cmp	r2, r3
 8003156:	d3b7      	bcc.n	80030c8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800315e:	691b      	ldr	r3, [r3, #16]
 8003160:	68fa      	ldr	r2, [r7, #12]
 8003162:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003166:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800316a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003178:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800317a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800317c:	2b00      	cmp	r3, #0
 800317e:	d105      	bne.n	800318c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	699b      	ldr	r3, [r3, #24]
 8003184:	f043 0210 	orr.w	r2, r3, #16
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	699a      	ldr	r2, [r3, #24]
 8003190:	4b0f      	ldr	r3, [pc, #60]	; (80031d0 <USB_DevInit+0x2c4>)
 8003192:	4313      	orrs	r3, r2
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003198:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800319a:	2b00      	cmp	r3, #0
 800319c:	d005      	beq.n	80031aa <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	699b      	ldr	r3, [r3, #24]
 80031a2:	f043 0208 	orr.w	r2, r3, #8
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80031aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d107      	bne.n	80031c0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	699b      	ldr	r3, [r3, #24]
 80031b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80031b8:	f043 0304 	orr.w	r3, r3, #4
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80031c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3718      	adds	r7, #24
 80031c6:	46bd      	mov	sp, r7
 80031c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80031cc:	b004      	add	sp, #16
 80031ce:	4770      	bx	lr
 80031d0:	803c3800 	.word	0x803c3800

080031d4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b085      	sub	sp, #20
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80031de:	2300      	movs	r3, #0
 80031e0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	019b      	lsls	r3, r3, #6
 80031e6:	f043 0220 	orr.w	r2, r3, #32
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	3301      	adds	r3, #1
 80031f2:	60fb      	str	r3, [r7, #12]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	4a09      	ldr	r2, [pc, #36]	; (800321c <USB_FlushTxFifo+0x48>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d901      	bls.n	8003200 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e006      	b.n	800320e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	691b      	ldr	r3, [r3, #16]
 8003204:	f003 0320 	and.w	r3, r3, #32
 8003208:	2b20      	cmp	r3, #32
 800320a:	d0f0      	beq.n	80031ee <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	3714      	adds	r7, #20
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	00030d40 	.word	0x00030d40

08003220 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003220:	b480      	push	{r7}
 8003222:	b085      	sub	sp, #20
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003228:	2300      	movs	r3, #0
 800322a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2210      	movs	r2, #16
 8003230:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	3301      	adds	r3, #1
 8003236:	60fb      	str	r3, [r7, #12]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	4a09      	ldr	r2, [pc, #36]	; (8003260 <USB_FlushRxFifo+0x40>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d901      	bls.n	8003244 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e006      	b.n	8003252 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	691b      	ldr	r3, [r3, #16]
 8003248:	f003 0310 	and.w	r3, r3, #16
 800324c:	2b10      	cmp	r3, #16
 800324e:	d0f0      	beq.n	8003232 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3714      	adds	r7, #20
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	00030d40 	.word	0x00030d40

08003264 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003264:	b480      	push	{r7}
 8003266:	b085      	sub	sp, #20
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	460b      	mov	r3, r1
 800326e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	78fb      	ldrb	r3, [r7, #3]
 800327e:	68f9      	ldr	r1, [r7, #12]
 8003280:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003284:	4313      	orrs	r3, r2
 8003286:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3714      	adds	r7, #20
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr

08003296 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003296:	b480      	push	{r7}
 8003298:	b087      	sub	sp, #28
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f003 0306 	and.w	r3, r3, #6
 80032ae:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d102      	bne.n	80032bc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80032b6:	2300      	movs	r3, #0
 80032b8:	75fb      	strb	r3, [r7, #23]
 80032ba:	e00a      	b.n	80032d2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d002      	beq.n	80032c8 <USB_GetDevSpeed+0x32>
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2b06      	cmp	r3, #6
 80032c6:	d102      	bne.n	80032ce <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80032c8:	2302      	movs	r3, #2
 80032ca:	75fb      	strb	r3, [r7, #23]
 80032cc:	e001      	b.n	80032d2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80032ce:	230f      	movs	r3, #15
 80032d0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80032d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	371c      	adds	r7, #28
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b085      	sub	sp, #20
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	785b      	ldrb	r3, [r3, #1]
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d13a      	bne.n	8003372 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003302:	69da      	ldr	r2, [r3, #28]
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	f003 030f 	and.w	r3, r3, #15
 800330c:	2101      	movs	r1, #1
 800330e:	fa01 f303 	lsl.w	r3, r1, r3
 8003312:	b29b      	uxth	r3, r3
 8003314:	68f9      	ldr	r1, [r7, #12]
 8003316:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800331a:	4313      	orrs	r3, r2
 800331c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	015a      	lsls	r2, r3, #5
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	4413      	add	r3, r2
 8003326:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d155      	bne.n	80033e0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	015a      	lsls	r2, r3, #5
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	4413      	add	r3, r2
 800333c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	78db      	ldrb	r3, [r3, #3]
 800334e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003350:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	059b      	lsls	r3, r3, #22
 8003356:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003358:	4313      	orrs	r3, r2
 800335a:	68ba      	ldr	r2, [r7, #8]
 800335c:	0151      	lsls	r1, r2, #5
 800335e:	68fa      	ldr	r2, [r7, #12]
 8003360:	440a      	add	r2, r1
 8003362:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003366:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800336a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800336e:	6013      	str	r3, [r2, #0]
 8003370:	e036      	b.n	80033e0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003378:	69da      	ldr	r2, [r3, #28]
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	781b      	ldrb	r3, [r3, #0]
 800337e:	f003 030f 	and.w	r3, r3, #15
 8003382:	2101      	movs	r1, #1
 8003384:	fa01 f303 	lsl.w	r3, r1, r3
 8003388:	041b      	lsls	r3, r3, #16
 800338a:	68f9      	ldr	r1, [r7, #12]
 800338c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003390:	4313      	orrs	r3, r2
 8003392:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	015a      	lsls	r2, r3, #5
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	4413      	add	r3, r2
 800339c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d11a      	bne.n	80033e0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	015a      	lsls	r2, r3, #5
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	4413      	add	r3, r2
 80033b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	78db      	ldrb	r3, [r3, #3]
 80033c4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80033c6:	430b      	orrs	r3, r1
 80033c8:	4313      	orrs	r3, r2
 80033ca:	68ba      	ldr	r2, [r7, #8]
 80033cc:	0151      	lsls	r1, r2, #5
 80033ce:	68fa      	ldr	r2, [r7, #12]
 80033d0:	440a      	add	r2, r1
 80033d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80033d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033de:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3714      	adds	r7, #20
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
	...

080033f0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b085      	sub	sp, #20
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	785b      	ldrb	r3, [r3, #1]
 8003408:	2b01      	cmp	r3, #1
 800340a:	d161      	bne.n	80034d0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	015a      	lsls	r2, r3, #5
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	4413      	add	r3, r2
 8003414:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800341e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003422:	d11f      	bne.n	8003464 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	015a      	lsls	r2, r3, #5
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	4413      	add	r3, r2
 800342c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	68ba      	ldr	r2, [r7, #8]
 8003434:	0151      	lsls	r1, r2, #5
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	440a      	add	r2, r1
 800343a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800343e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003442:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	015a      	lsls	r2, r3, #5
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	4413      	add	r3, r2
 800344c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68ba      	ldr	r2, [r7, #8]
 8003454:	0151      	lsls	r1, r2, #5
 8003456:	68fa      	ldr	r2, [r7, #12]
 8003458:	440a      	add	r2, r1
 800345a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800345e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003462:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800346a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	f003 030f 	and.w	r3, r3, #15
 8003474:	2101      	movs	r1, #1
 8003476:	fa01 f303 	lsl.w	r3, r1, r3
 800347a:	b29b      	uxth	r3, r3
 800347c:	43db      	mvns	r3, r3
 800347e:	68f9      	ldr	r1, [r7, #12]
 8003480:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003484:	4013      	ands	r3, r2
 8003486:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800348e:	69da      	ldr	r2, [r3, #28]
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	f003 030f 	and.w	r3, r3, #15
 8003498:	2101      	movs	r1, #1
 800349a:	fa01 f303 	lsl.w	r3, r1, r3
 800349e:	b29b      	uxth	r3, r3
 80034a0:	43db      	mvns	r3, r3
 80034a2:	68f9      	ldr	r1, [r7, #12]
 80034a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80034a8:	4013      	ands	r3, r2
 80034aa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	015a      	lsls	r2, r3, #5
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	4413      	add	r3, r2
 80034b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	0159      	lsls	r1, r3, #5
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	440b      	add	r3, r1
 80034c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034c6:	4619      	mov	r1, r3
 80034c8:	4b35      	ldr	r3, [pc, #212]	; (80035a0 <USB_DeactivateEndpoint+0x1b0>)
 80034ca:	4013      	ands	r3, r2
 80034cc:	600b      	str	r3, [r1, #0]
 80034ce:	e060      	b.n	8003592 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	015a      	lsls	r2, r3, #5
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	4413      	add	r3, r2
 80034d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80034e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034e6:	d11f      	bne.n	8003528 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	015a      	lsls	r2, r3, #5
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	4413      	add	r3, r2
 80034f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	68ba      	ldr	r2, [r7, #8]
 80034f8:	0151      	lsls	r1, r2, #5
 80034fa:	68fa      	ldr	r2, [r7, #12]
 80034fc:	440a      	add	r2, r1
 80034fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003502:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003506:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	015a      	lsls	r2, r3, #5
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	4413      	add	r3, r2
 8003510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	68ba      	ldr	r2, [r7, #8]
 8003518:	0151      	lsls	r1, r2, #5
 800351a:	68fa      	ldr	r2, [r7, #12]
 800351c:	440a      	add	r2, r1
 800351e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003522:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003526:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800352e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	f003 030f 	and.w	r3, r3, #15
 8003538:	2101      	movs	r1, #1
 800353a:	fa01 f303 	lsl.w	r3, r1, r3
 800353e:	041b      	lsls	r3, r3, #16
 8003540:	43db      	mvns	r3, r3
 8003542:	68f9      	ldr	r1, [r7, #12]
 8003544:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003548:	4013      	ands	r3, r2
 800354a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003552:	69da      	ldr	r2, [r3, #28]
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	f003 030f 	and.w	r3, r3, #15
 800355c:	2101      	movs	r1, #1
 800355e:	fa01 f303 	lsl.w	r3, r1, r3
 8003562:	041b      	lsls	r3, r3, #16
 8003564:	43db      	mvns	r3, r3
 8003566:	68f9      	ldr	r1, [r7, #12]
 8003568:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800356c:	4013      	ands	r3, r2
 800356e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	015a      	lsls	r2, r3, #5
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	4413      	add	r3, r2
 8003578:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	0159      	lsls	r1, r3, #5
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	440b      	add	r3, r1
 8003586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800358a:	4619      	mov	r1, r3
 800358c:	4b05      	ldr	r3, [pc, #20]	; (80035a4 <USB_DeactivateEndpoint+0x1b4>)
 800358e:	4013      	ands	r3, r2
 8003590:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	3714      	adds	r7, #20
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr
 80035a0:	ec337800 	.word	0xec337800
 80035a4:	eff37800 	.word	0xeff37800

080035a8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b08a      	sub	sp, #40	; 0x28
 80035ac:	af02      	add	r7, sp, #8
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	4613      	mov	r3, r2
 80035b4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	781b      	ldrb	r3, [r3, #0]
 80035be:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	785b      	ldrb	r3, [r3, #1]
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	f040 815c 	bne.w	8003882 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d132      	bne.n	8003638 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	015a      	lsls	r2, r3, #5
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	4413      	add	r3, r2
 80035da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035de:	691b      	ldr	r3, [r3, #16]
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	0151      	lsls	r1, r2, #5
 80035e4:	69fa      	ldr	r2, [r7, #28]
 80035e6:	440a      	add	r2, r1
 80035e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035ec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80035f0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80035f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	015a      	lsls	r2, r3, #5
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	4413      	add	r3, r2
 80035fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003602:	691b      	ldr	r3, [r3, #16]
 8003604:	69ba      	ldr	r2, [r7, #24]
 8003606:	0151      	lsls	r1, r2, #5
 8003608:	69fa      	ldr	r2, [r7, #28]
 800360a:	440a      	add	r2, r1
 800360c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003610:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003614:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	015a      	lsls	r2, r3, #5
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	4413      	add	r3, r2
 800361e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003622:	691b      	ldr	r3, [r3, #16]
 8003624:	69ba      	ldr	r2, [r7, #24]
 8003626:	0151      	lsls	r1, r2, #5
 8003628:	69fa      	ldr	r2, [r7, #28]
 800362a:	440a      	add	r2, r1
 800362c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003630:	0cdb      	lsrs	r3, r3, #19
 8003632:	04db      	lsls	r3, r3, #19
 8003634:	6113      	str	r3, [r2, #16]
 8003636:	e074      	b.n	8003722 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	015a      	lsls	r2, r3, #5
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	4413      	add	r3, r2
 8003640:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	69ba      	ldr	r2, [r7, #24]
 8003648:	0151      	lsls	r1, r2, #5
 800364a:	69fa      	ldr	r2, [r7, #28]
 800364c:	440a      	add	r2, r1
 800364e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003652:	0cdb      	lsrs	r3, r3, #19
 8003654:	04db      	lsls	r3, r3, #19
 8003656:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	015a      	lsls	r2, r3, #5
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	4413      	add	r3, r2
 8003660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003664:	691b      	ldr	r3, [r3, #16]
 8003666:	69ba      	ldr	r2, [r7, #24]
 8003668:	0151      	lsls	r1, r2, #5
 800366a:	69fa      	ldr	r2, [r7, #28]
 800366c:	440a      	add	r2, r1
 800366e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003672:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003676:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800367a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	015a      	lsls	r2, r3, #5
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	4413      	add	r3, r2
 8003684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003688:	691a      	ldr	r2, [r3, #16]
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	6959      	ldr	r1, [r3, #20]
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	440b      	add	r3, r1
 8003694:	1e59      	subs	r1, r3, #1
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	fbb1 f3f3 	udiv	r3, r1, r3
 800369e:	04d9      	lsls	r1, r3, #19
 80036a0:	4b9d      	ldr	r3, [pc, #628]	; (8003918 <USB_EPStartXfer+0x370>)
 80036a2:	400b      	ands	r3, r1
 80036a4:	69b9      	ldr	r1, [r7, #24]
 80036a6:	0148      	lsls	r0, r1, #5
 80036a8:	69f9      	ldr	r1, [r7, #28]
 80036aa:	4401      	add	r1, r0
 80036ac:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80036b0:	4313      	orrs	r3, r2
 80036b2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	015a      	lsls	r2, r3, #5
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	4413      	add	r3, r2
 80036bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036c0:	691a      	ldr	r2, [r3, #16]
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	695b      	ldr	r3, [r3, #20]
 80036c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036ca:	69b9      	ldr	r1, [r7, #24]
 80036cc:	0148      	lsls	r0, r1, #5
 80036ce:	69f9      	ldr	r1, [r7, #28]
 80036d0:	4401      	add	r1, r0
 80036d2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80036d6:	4313      	orrs	r3, r2
 80036d8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	78db      	ldrb	r3, [r3, #3]
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d11f      	bne.n	8003722 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	015a      	lsls	r2, r3, #5
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	4413      	add	r3, r2
 80036ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	69ba      	ldr	r2, [r7, #24]
 80036f2:	0151      	lsls	r1, r2, #5
 80036f4:	69fa      	ldr	r2, [r7, #28]
 80036f6:	440a      	add	r2, r1
 80036f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036fc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003700:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	015a      	lsls	r2, r3, #5
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	4413      	add	r3, r2
 800370a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800370e:	691b      	ldr	r3, [r3, #16]
 8003710:	69ba      	ldr	r2, [r7, #24]
 8003712:	0151      	lsls	r1, r2, #5
 8003714:	69fa      	ldr	r2, [r7, #28]
 8003716:	440a      	add	r2, r1
 8003718:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800371c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003720:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003722:	79fb      	ldrb	r3, [r7, #7]
 8003724:	2b01      	cmp	r3, #1
 8003726:	d14b      	bne.n	80037c0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	691b      	ldr	r3, [r3, #16]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d009      	beq.n	8003744 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	015a      	lsls	r2, r3, #5
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	4413      	add	r3, r2
 8003738:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800373c:	461a      	mov	r2, r3
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	78db      	ldrb	r3, [r3, #3]
 8003748:	2b01      	cmp	r3, #1
 800374a:	d128      	bne.n	800379e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003758:	2b00      	cmp	r3, #0
 800375a:	d110      	bne.n	800377e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	015a      	lsls	r2, r3, #5
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	4413      	add	r3, r2
 8003764:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	69ba      	ldr	r2, [r7, #24]
 800376c:	0151      	lsls	r1, r2, #5
 800376e:	69fa      	ldr	r2, [r7, #28]
 8003770:	440a      	add	r2, r1
 8003772:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003776:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800377a:	6013      	str	r3, [r2, #0]
 800377c:	e00f      	b.n	800379e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800377e:	69bb      	ldr	r3, [r7, #24]
 8003780:	015a      	lsls	r2, r3, #5
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	4413      	add	r3, r2
 8003786:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	69ba      	ldr	r2, [r7, #24]
 800378e:	0151      	lsls	r1, r2, #5
 8003790:	69fa      	ldr	r2, [r7, #28]
 8003792:	440a      	add	r2, r1
 8003794:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800379c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800379e:	69bb      	ldr	r3, [r7, #24]
 80037a0:	015a      	lsls	r2, r3, #5
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	4413      	add	r3, r2
 80037a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	69ba      	ldr	r2, [r7, #24]
 80037ae:	0151      	lsls	r1, r2, #5
 80037b0:	69fa      	ldr	r2, [r7, #28]
 80037b2:	440a      	add	r2, r1
 80037b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037b8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80037bc:	6013      	str	r3, [r2, #0]
 80037be:	e12f      	b.n	8003a20 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80037c0:	69bb      	ldr	r3, [r7, #24]
 80037c2:	015a      	lsls	r2, r3, #5
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	4413      	add	r3, r2
 80037c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	69ba      	ldr	r2, [r7, #24]
 80037d0:	0151      	lsls	r1, r2, #5
 80037d2:	69fa      	ldr	r2, [r7, #28]
 80037d4:	440a      	add	r2, r1
 80037d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037da:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80037de:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	78db      	ldrb	r3, [r3, #3]
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d015      	beq.n	8003814 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	695b      	ldr	r3, [r3, #20]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	f000 8117 	beq.w	8003a20 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	f003 030f 	and.w	r3, r3, #15
 8003802:	2101      	movs	r1, #1
 8003804:	fa01 f303 	lsl.w	r3, r1, r3
 8003808:	69f9      	ldr	r1, [r7, #28]
 800380a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800380e:	4313      	orrs	r3, r2
 8003810:	634b      	str	r3, [r1, #52]	; 0x34
 8003812:	e105      	b.n	8003a20 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003820:	2b00      	cmp	r3, #0
 8003822:	d110      	bne.n	8003846 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	015a      	lsls	r2, r3, #5
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	4413      	add	r3, r2
 800382c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	69ba      	ldr	r2, [r7, #24]
 8003834:	0151      	lsls	r1, r2, #5
 8003836:	69fa      	ldr	r2, [r7, #28]
 8003838:	440a      	add	r2, r1
 800383a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800383e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003842:	6013      	str	r3, [r2, #0]
 8003844:	e00f      	b.n	8003866 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	015a      	lsls	r2, r3, #5
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	4413      	add	r3, r2
 800384e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	69ba      	ldr	r2, [r7, #24]
 8003856:	0151      	lsls	r1, r2, #5
 8003858:	69fa      	ldr	r2, [r7, #28]
 800385a:	440a      	add	r2, r1
 800385c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003864:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	68d9      	ldr	r1, [r3, #12]
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	781a      	ldrb	r2, [r3, #0]
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	695b      	ldr	r3, [r3, #20]
 8003872:	b298      	uxth	r0, r3
 8003874:	79fb      	ldrb	r3, [r7, #7]
 8003876:	9300      	str	r3, [sp, #0]
 8003878:	4603      	mov	r3, r0
 800387a:	68f8      	ldr	r0, [r7, #12]
 800387c:	f000 fa2b 	bl	8003cd6 <USB_WritePacket>
 8003880:	e0ce      	b.n	8003a20 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003882:	69bb      	ldr	r3, [r7, #24]
 8003884:	015a      	lsls	r2, r3, #5
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	4413      	add	r3, r2
 800388a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800388e:	691b      	ldr	r3, [r3, #16]
 8003890:	69ba      	ldr	r2, [r7, #24]
 8003892:	0151      	lsls	r1, r2, #5
 8003894:	69fa      	ldr	r2, [r7, #28]
 8003896:	440a      	add	r2, r1
 8003898:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800389c:	0cdb      	lsrs	r3, r3, #19
 800389e:	04db      	lsls	r3, r3, #19
 80038a0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	015a      	lsls	r2, r3, #5
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	4413      	add	r3, r2
 80038aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038ae:	691b      	ldr	r3, [r3, #16]
 80038b0:	69ba      	ldr	r2, [r7, #24]
 80038b2:	0151      	lsls	r1, r2, #5
 80038b4:	69fa      	ldr	r2, [r7, #28]
 80038b6:	440a      	add	r2, r1
 80038b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80038bc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80038c0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80038c4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	695b      	ldr	r3, [r3, #20]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d126      	bne.n	800391c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80038ce:	69bb      	ldr	r3, [r7, #24]
 80038d0:	015a      	lsls	r2, r3, #5
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	4413      	add	r3, r2
 80038d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038da:	691a      	ldr	r2, [r3, #16]
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038e4:	69b9      	ldr	r1, [r7, #24]
 80038e6:	0148      	lsls	r0, r1, #5
 80038e8:	69f9      	ldr	r1, [r7, #28]
 80038ea:	4401      	add	r1, r0
 80038ec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80038f0:	4313      	orrs	r3, r2
 80038f2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80038f4:	69bb      	ldr	r3, [r7, #24]
 80038f6:	015a      	lsls	r2, r3, #5
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	4413      	add	r3, r2
 80038fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	69ba      	ldr	r2, [r7, #24]
 8003904:	0151      	lsls	r1, r2, #5
 8003906:	69fa      	ldr	r2, [r7, #28]
 8003908:	440a      	add	r2, r1
 800390a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800390e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003912:	6113      	str	r3, [r2, #16]
 8003914:	e036      	b.n	8003984 <USB_EPStartXfer+0x3dc>
 8003916:	bf00      	nop
 8003918:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	695a      	ldr	r2, [r3, #20]
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	4413      	add	r3, r2
 8003926:	1e5a      	subs	r2, r3, #1
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003930:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003932:	69bb      	ldr	r3, [r7, #24]
 8003934:	015a      	lsls	r2, r3, #5
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	4413      	add	r3, r2
 800393a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800393e:	691a      	ldr	r2, [r3, #16]
 8003940:	8afb      	ldrh	r3, [r7, #22]
 8003942:	04d9      	lsls	r1, r3, #19
 8003944:	4b39      	ldr	r3, [pc, #228]	; (8003a2c <USB_EPStartXfer+0x484>)
 8003946:	400b      	ands	r3, r1
 8003948:	69b9      	ldr	r1, [r7, #24]
 800394a:	0148      	lsls	r0, r1, #5
 800394c:	69f9      	ldr	r1, [r7, #28]
 800394e:	4401      	add	r1, r0
 8003950:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003954:	4313      	orrs	r3, r2
 8003956:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	015a      	lsls	r2, r3, #5
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	4413      	add	r3, r2
 8003960:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003964:	691a      	ldr	r2, [r3, #16]
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	8af9      	ldrh	r1, [r7, #22]
 800396c:	fb01 f303 	mul.w	r3, r1, r3
 8003970:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003974:	69b9      	ldr	r1, [r7, #24]
 8003976:	0148      	lsls	r0, r1, #5
 8003978:	69f9      	ldr	r1, [r7, #28]
 800397a:	4401      	add	r1, r0
 800397c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003980:	4313      	orrs	r3, r2
 8003982:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003984:	79fb      	ldrb	r3, [r7, #7]
 8003986:	2b01      	cmp	r3, #1
 8003988:	d10d      	bne.n	80039a6 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d009      	beq.n	80039a6 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	68d9      	ldr	r1, [r3, #12]
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	015a      	lsls	r2, r3, #5
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	4413      	add	r3, r2
 800399e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039a2:	460a      	mov	r2, r1
 80039a4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	78db      	ldrb	r3, [r3, #3]
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d128      	bne.n	8003a00 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d110      	bne.n	80039e0 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	015a      	lsls	r2, r3, #5
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	4413      	add	r3, r2
 80039c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	69ba      	ldr	r2, [r7, #24]
 80039ce:	0151      	lsls	r1, r2, #5
 80039d0:	69fa      	ldr	r2, [r7, #28]
 80039d2:	440a      	add	r2, r1
 80039d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80039dc:	6013      	str	r3, [r2, #0]
 80039de:	e00f      	b.n	8003a00 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80039e0:	69bb      	ldr	r3, [r7, #24]
 80039e2:	015a      	lsls	r2, r3, #5
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	4413      	add	r3, r2
 80039e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	69ba      	ldr	r2, [r7, #24]
 80039f0:	0151      	lsls	r1, r2, #5
 80039f2:	69fa      	ldr	r2, [r7, #28]
 80039f4:	440a      	add	r2, r1
 80039f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039fe:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	015a      	lsls	r2, r3, #5
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	4413      	add	r3, r2
 8003a08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	69ba      	ldr	r2, [r7, #24]
 8003a10:	0151      	lsls	r1, r2, #5
 8003a12:	69fa      	ldr	r2, [r7, #28]
 8003a14:	440a      	add	r2, r1
 8003a16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a1a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003a1e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3720      	adds	r7, #32
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	1ff80000 	.word	0x1ff80000

08003a30 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b087      	sub	sp, #28
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	785b      	ldrb	r3, [r3, #1]
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	f040 80cd 	bne.w	8003bec <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d132      	bne.n	8003ac0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	015a      	lsls	r2, r3, #5
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	4413      	add	r3, r2
 8003a62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a66:	691b      	ldr	r3, [r3, #16]
 8003a68:	693a      	ldr	r2, [r7, #16]
 8003a6a:	0151      	lsls	r1, r2, #5
 8003a6c:	697a      	ldr	r2, [r7, #20]
 8003a6e:	440a      	add	r2, r1
 8003a70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a74:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003a78:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003a7c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	015a      	lsls	r2, r3, #5
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	4413      	add	r3, r2
 8003a86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a8a:	691b      	ldr	r3, [r3, #16]
 8003a8c:	693a      	ldr	r2, [r7, #16]
 8003a8e:	0151      	lsls	r1, r2, #5
 8003a90:	697a      	ldr	r2, [r7, #20]
 8003a92:	440a      	add	r2, r1
 8003a94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a98:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003a9c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	015a      	lsls	r2, r3, #5
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	4413      	add	r3, r2
 8003aa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aaa:	691b      	ldr	r3, [r3, #16]
 8003aac:	693a      	ldr	r2, [r7, #16]
 8003aae:	0151      	lsls	r1, r2, #5
 8003ab0:	697a      	ldr	r2, [r7, #20]
 8003ab2:	440a      	add	r2, r1
 8003ab4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ab8:	0cdb      	lsrs	r3, r3, #19
 8003aba:	04db      	lsls	r3, r3, #19
 8003abc:	6113      	str	r3, [r2, #16]
 8003abe:	e04e      	b.n	8003b5e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	015a      	lsls	r2, r3, #5
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	4413      	add	r3, r2
 8003ac8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003acc:	691b      	ldr	r3, [r3, #16]
 8003ace:	693a      	ldr	r2, [r7, #16]
 8003ad0:	0151      	lsls	r1, r2, #5
 8003ad2:	697a      	ldr	r2, [r7, #20]
 8003ad4:	440a      	add	r2, r1
 8003ad6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ada:	0cdb      	lsrs	r3, r3, #19
 8003adc:	04db      	lsls	r3, r3, #19
 8003ade:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	015a      	lsls	r2, r3, #5
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	4413      	add	r3, r2
 8003ae8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	693a      	ldr	r2, [r7, #16]
 8003af0:	0151      	lsls	r1, r2, #5
 8003af2:	697a      	ldr	r2, [r7, #20]
 8003af4:	440a      	add	r2, r1
 8003af6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003afa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003afe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003b02:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	695a      	ldr	r2, [r3, #20]
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d903      	bls.n	8003b18 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	689a      	ldr	r2, [r3, #8]
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	015a      	lsls	r2, r3, #5
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	4413      	add	r3, r2
 8003b20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	693a      	ldr	r2, [r7, #16]
 8003b28:	0151      	lsls	r1, r2, #5
 8003b2a:	697a      	ldr	r2, [r7, #20]
 8003b2c:	440a      	add	r2, r1
 8003b2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b32:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003b36:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	015a      	lsls	r2, r3, #5
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	4413      	add	r3, r2
 8003b40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b44:	691a      	ldr	r2, [r3, #16]
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	695b      	ldr	r3, [r3, #20]
 8003b4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b4e:	6939      	ldr	r1, [r7, #16]
 8003b50:	0148      	lsls	r0, r1, #5
 8003b52:	6979      	ldr	r1, [r7, #20]
 8003b54:	4401      	add	r1, r0
 8003b56:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003b5e:	79fb      	ldrb	r3, [r7, #7]
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d11e      	bne.n	8003ba2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	691b      	ldr	r3, [r3, #16]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d009      	beq.n	8003b80 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	015a      	lsls	r2, r3, #5
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	4413      	add	r3, r2
 8003b74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b78:	461a      	mov	r2, r3
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	015a      	lsls	r2, r3, #5
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	4413      	add	r3, r2
 8003b88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	693a      	ldr	r2, [r7, #16]
 8003b90:	0151      	lsls	r1, r2, #5
 8003b92:	697a      	ldr	r2, [r7, #20]
 8003b94:	440a      	add	r2, r1
 8003b96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b9a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003b9e:	6013      	str	r3, [r2, #0]
 8003ba0:	e092      	b.n	8003cc8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	015a      	lsls	r2, r3, #5
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	4413      	add	r3, r2
 8003baa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	693a      	ldr	r2, [r7, #16]
 8003bb2:	0151      	lsls	r1, r2, #5
 8003bb4:	697a      	ldr	r2, [r7, #20]
 8003bb6:	440a      	add	r2, r1
 8003bb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bbc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003bc0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d07e      	beq.n	8003cc8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	f003 030f 	and.w	r3, r3, #15
 8003bda:	2101      	movs	r1, #1
 8003bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8003be0:	6979      	ldr	r1, [r7, #20]
 8003be2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003be6:	4313      	orrs	r3, r2
 8003be8:	634b      	str	r3, [r1, #52]	; 0x34
 8003bea:	e06d      	b.n	8003cc8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	015a      	lsls	r2, r3, #5
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	4413      	add	r3, r2
 8003bf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	693a      	ldr	r2, [r7, #16]
 8003bfc:	0151      	lsls	r1, r2, #5
 8003bfe:	697a      	ldr	r2, [r7, #20]
 8003c00:	440a      	add	r2, r1
 8003c02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c06:	0cdb      	lsrs	r3, r3, #19
 8003c08:	04db      	lsls	r3, r3, #19
 8003c0a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	015a      	lsls	r2, r3, #5
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	4413      	add	r3, r2
 8003c14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	693a      	ldr	r2, [r7, #16]
 8003c1c:	0151      	lsls	r1, r2, #5
 8003c1e:	697a      	ldr	r2, [r7, #20]
 8003c20:	440a      	add	r2, r1
 8003c22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c26:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003c2a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003c2e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	695b      	ldr	r3, [r3, #20]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d003      	beq.n	8003c40 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	689a      	ldr	r2, [r3, #8]
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	015a      	lsls	r2, r3, #5
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	4413      	add	r3, r2
 8003c48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	693a      	ldr	r2, [r7, #16]
 8003c50:	0151      	lsls	r1, r2, #5
 8003c52:	697a      	ldr	r2, [r7, #20]
 8003c54:	440a      	add	r2, r1
 8003c56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c5a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003c5e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	015a      	lsls	r2, r3, #5
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	4413      	add	r3, r2
 8003c68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c6c:	691a      	ldr	r2, [r3, #16]
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c76:	6939      	ldr	r1, [r7, #16]
 8003c78:	0148      	lsls	r0, r1, #5
 8003c7a:	6979      	ldr	r1, [r7, #20]
 8003c7c:	4401      	add	r1, r0
 8003c7e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003c82:	4313      	orrs	r3, r2
 8003c84:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8003c86:	79fb      	ldrb	r3, [r7, #7]
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d10d      	bne.n	8003ca8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d009      	beq.n	8003ca8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	68d9      	ldr	r1, [r3, #12]
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	015a      	lsls	r2, r3, #5
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	4413      	add	r3, r2
 8003ca0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ca4:	460a      	mov	r2, r1
 8003ca6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	015a      	lsls	r2, r3, #5
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	4413      	add	r3, r2
 8003cb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	693a      	ldr	r2, [r7, #16]
 8003cb8:	0151      	lsls	r1, r2, #5
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	440a      	add	r2, r1
 8003cbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cc2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003cc6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	371c      	adds	r7, #28
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr

08003cd6 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003cd6:	b480      	push	{r7}
 8003cd8:	b089      	sub	sp, #36	; 0x24
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	60f8      	str	r0, [r7, #12]
 8003cde:	60b9      	str	r1, [r7, #8]
 8003ce0:	4611      	mov	r1, r2
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	460b      	mov	r3, r1
 8003ce6:	71fb      	strb	r3, [r7, #7]
 8003ce8:	4613      	mov	r3, r2
 8003cea:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8003cf4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d11a      	bne.n	8003d32 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003cfc:	88bb      	ldrh	r3, [r7, #4]
 8003cfe:	3303      	adds	r3, #3
 8003d00:	089b      	lsrs	r3, r3, #2
 8003d02:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003d04:	2300      	movs	r3, #0
 8003d06:	61bb      	str	r3, [r7, #24]
 8003d08:	e00f      	b.n	8003d2a <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003d0a:	79fb      	ldrb	r3, [r7, #7]
 8003d0c:	031a      	lsls	r2, r3, #12
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	4413      	add	r3, r2
 8003d12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d16:	461a      	mov	r2, r3
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	3304      	adds	r3, #4
 8003d22:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	3301      	adds	r3, #1
 8003d28:	61bb      	str	r3, [r7, #24]
 8003d2a:	69ba      	ldr	r2, [r7, #24]
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d3eb      	bcc.n	8003d0a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003d32:	2300      	movs	r3, #0
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3724      	adds	r7, #36	; 0x24
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b089      	sub	sp, #36	; 0x24
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	60f8      	str	r0, [r7, #12]
 8003d48:	60b9      	str	r1, [r7, #8]
 8003d4a:	4613      	mov	r3, r2
 8003d4c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8003d56:	88fb      	ldrh	r3, [r7, #6]
 8003d58:	3303      	adds	r3, #3
 8003d5a:	089b      	lsrs	r3, r3, #2
 8003d5c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8003d5e:	2300      	movs	r3, #0
 8003d60:	61bb      	str	r3, [r7, #24]
 8003d62:	e00b      	b.n	8003d7c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	601a      	str	r2, [r3, #0]
    pDest++;
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	3304      	adds	r3, #4
 8003d74:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	3301      	adds	r3, #1
 8003d7a:	61bb      	str	r3, [r7, #24]
 8003d7c:	69ba      	ldr	r2, [r7, #24]
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d3ef      	bcc.n	8003d64 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8003d84:	69fb      	ldr	r3, [r7, #28]
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3724      	adds	r7, #36	; 0x24
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr

08003d92 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003d92:	b480      	push	{r7}
 8003d94:	b085      	sub	sp, #20
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
 8003d9a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	785b      	ldrb	r3, [r3, #1]
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d12c      	bne.n	8003e08 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	015a      	lsls	r2, r3, #5
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	4413      	add	r3, r2
 8003db6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	db12      	blt.n	8003de6 <USB_EPSetStall+0x54>
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d00f      	beq.n	8003de6 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	015a      	lsls	r2, r3, #5
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	4413      	add	r3, r2
 8003dce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	68ba      	ldr	r2, [r7, #8]
 8003dd6:	0151      	lsls	r1, r2, #5
 8003dd8:	68fa      	ldr	r2, [r7, #12]
 8003dda:	440a      	add	r2, r1
 8003ddc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003de0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003de4:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	015a      	lsls	r2, r3, #5
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	4413      	add	r3, r2
 8003dee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68ba      	ldr	r2, [r7, #8]
 8003df6:	0151      	lsls	r1, r2, #5
 8003df8:	68fa      	ldr	r2, [r7, #12]
 8003dfa:	440a      	add	r2, r1
 8003dfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e00:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003e04:	6013      	str	r3, [r2, #0]
 8003e06:	e02b      	b.n	8003e60 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	015a      	lsls	r2, r3, #5
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	4413      	add	r3, r2
 8003e10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	db12      	blt.n	8003e40 <USB_EPSetStall+0xae>
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d00f      	beq.n	8003e40 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	015a      	lsls	r2, r3, #5
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	4413      	add	r3, r2
 8003e28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	68ba      	ldr	r2, [r7, #8]
 8003e30:	0151      	lsls	r1, r2, #5
 8003e32:	68fa      	ldr	r2, [r7, #12]
 8003e34:	440a      	add	r2, r1
 8003e36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e3a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003e3e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	015a      	lsls	r2, r3, #5
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	4413      	add	r3, r2
 8003e48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	68ba      	ldr	r2, [r7, #8]
 8003e50:	0151      	lsls	r1, r2, #5
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	440a      	add	r2, r1
 8003e56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e5a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003e5e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3714      	adds	r7, #20
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr

08003e6e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003e6e:	b480      	push	{r7}
 8003e70:	b085      	sub	sp, #20
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
 8003e76:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	785b      	ldrb	r3, [r3, #1]
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d128      	bne.n	8003edc <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	015a      	lsls	r2, r3, #5
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	4413      	add	r3, r2
 8003e92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	68ba      	ldr	r2, [r7, #8]
 8003e9a:	0151      	lsls	r1, r2, #5
 8003e9c:	68fa      	ldr	r2, [r7, #12]
 8003e9e:	440a      	add	r2, r1
 8003ea0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ea4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003ea8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	78db      	ldrb	r3, [r3, #3]
 8003eae:	2b03      	cmp	r3, #3
 8003eb0:	d003      	beq.n	8003eba <USB_EPClearStall+0x4c>
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	78db      	ldrb	r3, [r3, #3]
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d138      	bne.n	8003f2c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	015a      	lsls	r2, r3, #5
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	4413      	add	r3, r2
 8003ec2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	68ba      	ldr	r2, [r7, #8]
 8003eca:	0151      	lsls	r1, r2, #5
 8003ecc:	68fa      	ldr	r2, [r7, #12]
 8003ece:	440a      	add	r2, r1
 8003ed0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ed4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ed8:	6013      	str	r3, [r2, #0]
 8003eda:	e027      	b.n	8003f2c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	015a      	lsls	r2, r3, #5
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68ba      	ldr	r2, [r7, #8]
 8003eec:	0151      	lsls	r1, r2, #5
 8003eee:	68fa      	ldr	r2, [r7, #12]
 8003ef0:	440a      	add	r2, r1
 8003ef2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ef6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003efa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	78db      	ldrb	r3, [r3, #3]
 8003f00:	2b03      	cmp	r3, #3
 8003f02:	d003      	beq.n	8003f0c <USB_EPClearStall+0x9e>
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	78db      	ldrb	r3, [r3, #3]
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d10f      	bne.n	8003f2c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	015a      	lsls	r2, r3, #5
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	4413      	add	r3, r2
 8003f14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	68ba      	ldr	r2, [r7, #8]
 8003f1c:	0151      	lsls	r1, r2, #5
 8003f1e:	68fa      	ldr	r2, [r7, #12]
 8003f20:	440a      	add	r2, r1
 8003f22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f2a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3714      	adds	r7, #20
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr

08003f3a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8003f3a:	b480      	push	{r7}
 8003f3c:	b085      	sub	sp, #20
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	6078      	str	r0, [r7, #4]
 8003f42:	460b      	mov	r3, r1
 8003f44:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	68fa      	ldr	r2, [r7, #12]
 8003f54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f58:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003f5c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	78fb      	ldrb	r3, [r7, #3]
 8003f68:	011b      	lsls	r3, r3, #4
 8003f6a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8003f6e:	68f9      	ldr	r1, [r7, #12]
 8003f70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f74:	4313      	orrs	r3, r2
 8003f76:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3714      	adds	r7, #20
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr

08003f86 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003f86:	b480      	push	{r7}
 8003f88:	b085      	sub	sp, #20
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	68fa      	ldr	r2, [r7, #12]
 8003f9c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003fa0:	f023 0303 	bic.w	r3, r3, #3
 8003fa4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	68fa      	ldr	r2, [r7, #12]
 8003fb0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fb4:	f023 0302 	bic.w	r3, r3, #2
 8003fb8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003fba:	2300      	movs	r3, #0
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3714      	adds	r7, #20
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b085      	sub	sp, #20
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	68fa      	ldr	r2, [r7, #12]
 8003fde:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003fe2:	f023 0303 	bic.w	r3, r3, #3
 8003fe6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	68fa      	ldr	r2, [r7, #12]
 8003ff2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ff6:	f043 0302 	orr.w	r3, r3, #2
 8003ffa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3714      	adds	r7, #20
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr

0800400a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800400a:	b480      	push	{r7}
 800400c:	b085      	sub	sp, #20
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	695b      	ldr	r3, [r3, #20]
 8004016:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	699b      	ldr	r3, [r3, #24]
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	4013      	ands	r3, r2
 8004020:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004022:	68fb      	ldr	r3, [r7, #12]
}
 8004024:	4618      	mov	r0, r3
 8004026:	3714      	adds	r7, #20
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr

08004030 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004030:	b480      	push	{r7}
 8004032:	b085      	sub	sp, #20
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004042:	699b      	ldr	r3, [r3, #24]
 8004044:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800404c:	69db      	ldr	r3, [r3, #28]
 800404e:	68ba      	ldr	r2, [r7, #8]
 8004050:	4013      	ands	r3, r2
 8004052:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	0c1b      	lsrs	r3, r3, #16
}
 8004058:	4618      	mov	r0, r3
 800405a:	3714      	adds	r7, #20
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004064:	b480      	push	{r7}
 8004066:	b085      	sub	sp, #20
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004076:	699b      	ldr	r3, [r3, #24]
 8004078:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004080:	69db      	ldr	r3, [r3, #28]
 8004082:	68ba      	ldr	r2, [r7, #8]
 8004084:	4013      	ands	r3, r2
 8004086:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	b29b      	uxth	r3, r3
}
 800408c:	4618      	mov	r0, r3
 800408e:	3714      	adds	r7, #20
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr

08004098 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004098:	b480      	push	{r7}
 800409a:	b085      	sub	sp, #20
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	460b      	mov	r3, r1
 80040a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80040a8:	78fb      	ldrb	r3, [r7, #3]
 80040aa:	015a      	lsls	r2, r3, #5
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	4413      	add	r3, r2
 80040b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040be:	695b      	ldr	r3, [r3, #20]
 80040c0:	68ba      	ldr	r2, [r7, #8]
 80040c2:	4013      	ands	r3, r2
 80040c4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80040c6:	68bb      	ldr	r3, [r7, #8]
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3714      	adds	r7, #20
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr

080040d4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b087      	sub	sp, #28
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	460b      	mov	r3, r1
 80040de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040ea:	691b      	ldr	r3, [r3, #16]
 80040ec:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040f6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80040f8:	78fb      	ldrb	r3, [r7, #3]
 80040fa:	f003 030f 	and.w	r3, r3, #15
 80040fe:	68fa      	ldr	r2, [r7, #12]
 8004100:	fa22 f303 	lsr.w	r3, r2, r3
 8004104:	01db      	lsls	r3, r3, #7
 8004106:	b2db      	uxtb	r3, r3
 8004108:	693a      	ldr	r2, [r7, #16]
 800410a:	4313      	orrs	r3, r2
 800410c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800410e:	78fb      	ldrb	r3, [r7, #3]
 8004110:	015a      	lsls	r2, r3, #5
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	4413      	add	r3, r2
 8004116:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	693a      	ldr	r2, [r7, #16]
 800411e:	4013      	ands	r3, r2
 8004120:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004122:	68bb      	ldr	r3, [r7, #8]
}
 8004124:	4618      	mov	r0, r3
 8004126:	371c      	adds	r7, #28
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr

08004130 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	695b      	ldr	r3, [r3, #20]
 800413c:	f003 0301 	and.w	r3, r3, #1
}
 8004140:	4618      	mov	r0, r3
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800414c:	b480      	push	{r7}
 800414e:	b085      	sub	sp, #20
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	68fa      	ldr	r2, [r7, #12]
 8004162:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004166:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800416a:	f023 0307 	bic.w	r3, r3, #7
 800416e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	68fa      	ldr	r2, [r7, #12]
 800417a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800417e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004182:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004184:	2300      	movs	r3, #0
}
 8004186:	4618      	mov	r0, r3
 8004188:	3714      	adds	r7, #20
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
	...

08004194 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004194:	b480      	push	{r7}
 8004196:	b087      	sub	sp, #28
 8004198:	af00      	add	r7, sp, #0
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	460b      	mov	r3, r1
 800419e:	607a      	str	r2, [r7, #4]
 80041a0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	333c      	adds	r3, #60	; 0x3c
 80041aa:	3304      	adds	r3, #4
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	4a26      	ldr	r2, [pc, #152]	; (800424c <USB_EP0_OutStart+0xb8>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d90a      	bls.n	80041ce <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80041c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041c8:	d101      	bne.n	80041ce <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80041ca:	2300      	movs	r3, #0
 80041cc:	e037      	b.n	800423e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041d4:	461a      	mov	r2, r3
 80041d6:	2300      	movs	r3, #0
 80041d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	697a      	ldr	r2, [r7, #20]
 80041e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80041ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	697a      	ldr	r2, [r7, #20]
 80041f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041fc:	f043 0318 	orr.w	r3, r3, #24
 8004200:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004208:	691b      	ldr	r3, [r3, #16]
 800420a:	697a      	ldr	r2, [r7, #20]
 800420c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004210:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004214:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004216:	7afb      	ldrb	r3, [r7, #11]
 8004218:	2b01      	cmp	r3, #1
 800421a:	d10f      	bne.n	800423c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004222:	461a      	mov	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	697a      	ldr	r2, [r7, #20]
 8004232:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004236:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800423a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	371c      	adds	r7, #28
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop
 800424c:	4f54300a 	.word	0x4f54300a

08004250 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004250:	b480      	push	{r7}
 8004252:	b085      	sub	sp, #20
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004258:	2300      	movs	r3, #0
 800425a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	3301      	adds	r3, #1
 8004260:	60fb      	str	r3, [r7, #12]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	4a13      	ldr	r2, [pc, #76]	; (80042b4 <USB_CoreReset+0x64>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d901      	bls.n	800426e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e01b      	b.n	80042a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	2b00      	cmp	r3, #0
 8004274:	daf2      	bge.n	800425c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004276:	2300      	movs	r3, #0
 8004278:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	691b      	ldr	r3, [r3, #16]
 800427e:	f043 0201 	orr.w	r2, r3, #1
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	3301      	adds	r3, #1
 800428a:	60fb      	str	r3, [r7, #12]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	4a09      	ldr	r2, [pc, #36]	; (80042b4 <USB_CoreReset+0x64>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d901      	bls.n	8004298 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004294:	2303      	movs	r3, #3
 8004296:	e006      	b.n	80042a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	691b      	ldr	r3, [r3, #16]
 800429c:	f003 0301 	and.w	r3, r3, #1
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d0f0      	beq.n	8004286 <USB_CoreReset+0x36>

  return HAL_OK;
 80042a4:	2300      	movs	r3, #0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3714      	adds	r7, #20
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr
 80042b2:	bf00      	nop
 80042b4:	00030d40 	.word	0x00030d40

080042b8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	460b      	mov	r3, r1
 80042c2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80042c4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80042c8:	f002 f97c 	bl	80065c4 <malloc>
 80042cc:	4603      	mov	r3, r0
 80042ce:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d105      	bne.n	80042e2 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80042de:	2302      	movs	r3, #2
 80042e0:	e066      	b.n	80043b0 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	68fa      	ldr	r2, [r7, #12]
 80042e6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	7c1b      	ldrb	r3, [r3, #16]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d119      	bne.n	8004326 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80042f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80042f6:	2202      	movs	r2, #2
 80042f8:	2181      	movs	r1, #129	; 0x81
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f001 ffe9 	bl	80062d2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004306:	f44f 7300 	mov.w	r3, #512	; 0x200
 800430a:	2202      	movs	r2, #2
 800430c:	2101      	movs	r1, #1
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f001 ffdf 	bl	80062d2 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2210      	movs	r2, #16
 8004320:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8004324:	e016      	b.n	8004354 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004326:	2340      	movs	r3, #64	; 0x40
 8004328:	2202      	movs	r2, #2
 800432a:	2181      	movs	r1, #129	; 0x81
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f001 ffd0 	bl	80062d2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2201      	movs	r2, #1
 8004336:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004338:	2340      	movs	r3, #64	; 0x40
 800433a:	2202      	movs	r2, #2
 800433c:	2101      	movs	r1, #1
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f001 ffc7 	bl	80062d2 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2210      	movs	r2, #16
 8004350:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004354:	2308      	movs	r3, #8
 8004356:	2203      	movs	r2, #3
 8004358:	2182      	movs	r1, #130	; 0x82
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f001 ffb9 	bl	80062d2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2200      	movs	r2, #0
 8004376:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2200      	movs	r2, #0
 800437e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	7c1b      	ldrb	r3, [r3, #16]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d109      	bne.n	800439e <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004390:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004394:	2101      	movs	r1, #1
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f002 f88a 	bl	80064b0 <USBD_LL_PrepareReceive>
 800439c:	e007      	b.n	80043ae <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80043a4:	2340      	movs	r3, #64	; 0x40
 80043a6:	2101      	movs	r1, #1
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f002 f881 	bl	80064b0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80043ae:	2300      	movs	r3, #0
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3710      	adds	r7, #16
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	460b      	mov	r3, r1
 80043c2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 80043c4:	2300      	movs	r3, #0
 80043c6:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80043c8:	2181      	movs	r1, #129	; 0x81
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f001 ffa7 	bl	800631e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80043d6:	2101      	movs	r1, #1
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f001 ffa0 	bl	800631e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80043e6:	2182      	movs	r1, #130	; 0x82
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f001 ff98 	bl	800631e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004404:	2b00      	cmp	r3, #0
 8004406:	d00e      	beq.n	8004426 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004418:	4618      	mov	r0, r3
 800441a:	f002 f8db 	bl	80065d4 <free>
    pdev->pClassData = NULL;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8004426:	7bfb      	ldrb	r3, [r7, #15]
}
 8004428:	4618      	mov	r0, r3
 800442a:	3710      	adds	r7, #16
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}

08004430 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b086      	sub	sp, #24
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004440:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8004442:	2300      	movs	r3, #0
 8004444:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8004446:	2300      	movs	r3, #0
 8004448:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800444a:	2300      	movs	r3, #0
 800444c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	781b      	ldrb	r3, [r3, #0]
 8004452:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004456:	2b00      	cmp	r3, #0
 8004458:	d03a      	beq.n	80044d0 <USBD_CDC_Setup+0xa0>
 800445a:	2b20      	cmp	r3, #32
 800445c:	f040 8097 	bne.w	800458e <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	88db      	ldrh	r3, [r3, #6]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d029      	beq.n	80044bc <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	b25b      	sxtb	r3, r3
 800446e:	2b00      	cmp	r3, #0
 8004470:	da11      	bge.n	8004496 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	683a      	ldr	r2, [r7, #0]
 800447c:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800447e:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004480:	683a      	ldr	r2, [r7, #0]
 8004482:	88d2      	ldrh	r2, [r2, #6]
 8004484:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8004486:	6939      	ldr	r1, [r7, #16]
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	88db      	ldrh	r3, [r3, #6]
 800448c:	461a      	mov	r2, r3
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f001 fa9d 	bl	80059ce <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8004494:	e082      	b.n	800459c <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	785a      	ldrb	r2, [r3, #1]
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	88db      	ldrh	r3, [r3, #6]
 80044a4:	b2da      	uxtb	r2, r3
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80044ac:	6939      	ldr	r1, [r7, #16]
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	88db      	ldrh	r3, [r3, #6]
 80044b2:	461a      	mov	r2, r3
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f001 fab6 	bl	8005a26 <USBD_CtlPrepareRx>
    break;
 80044ba:	e06f      	b.n	800459c <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	683a      	ldr	r2, [r7, #0]
 80044c6:	7850      	ldrb	r0, [r2, #1]
 80044c8:	2200      	movs	r2, #0
 80044ca:	6839      	ldr	r1, [r7, #0]
 80044cc:	4798      	blx	r3
    break;
 80044ce:	e065      	b.n	800459c <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	785b      	ldrb	r3, [r3, #1]
 80044d4:	2b0b      	cmp	r3, #11
 80044d6:	d84f      	bhi.n	8004578 <USBD_CDC_Setup+0x148>
 80044d8:	a201      	add	r2, pc, #4	; (adr r2, 80044e0 <USBD_CDC_Setup+0xb0>)
 80044da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044de:	bf00      	nop
 80044e0:	08004511 	.word	0x08004511
 80044e4:	08004587 	.word	0x08004587
 80044e8:	08004579 	.word	0x08004579
 80044ec:	08004579 	.word	0x08004579
 80044f0:	08004579 	.word	0x08004579
 80044f4:	08004579 	.word	0x08004579
 80044f8:	08004579 	.word	0x08004579
 80044fc:	08004579 	.word	0x08004579
 8004500:	08004579 	.word	0x08004579
 8004504:	08004579 	.word	0x08004579
 8004508:	08004539 	.word	0x08004539
 800450c:	08004561 	.word	0x08004561
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004516:	2b03      	cmp	r3, #3
 8004518:	d107      	bne.n	800452a <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800451a:	f107 030c 	add.w	r3, r7, #12
 800451e:	2202      	movs	r2, #2
 8004520:	4619      	mov	r1, r3
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f001 fa53 	bl	80059ce <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8004528:	e030      	b.n	800458c <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800452a:	6839      	ldr	r1, [r7, #0]
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f001 f9dd 	bl	80058ec <USBD_CtlError>
        ret = USBD_FAIL;
 8004532:	2303      	movs	r3, #3
 8004534:	75fb      	strb	r3, [r7, #23]
      break;
 8004536:	e029      	b.n	800458c <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800453e:	2b03      	cmp	r3, #3
 8004540:	d107      	bne.n	8004552 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004542:	f107 030f 	add.w	r3, r7, #15
 8004546:	2201      	movs	r2, #1
 8004548:	4619      	mov	r1, r3
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f001 fa3f 	bl	80059ce <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8004550:	e01c      	b.n	800458c <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8004552:	6839      	ldr	r1, [r7, #0]
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f001 f9c9 	bl	80058ec <USBD_CtlError>
        ret = USBD_FAIL;
 800455a:	2303      	movs	r3, #3
 800455c:	75fb      	strb	r3, [r7, #23]
      break;
 800455e:	e015      	b.n	800458c <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004566:	2b03      	cmp	r3, #3
 8004568:	d00f      	beq.n	800458a <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 800456a:	6839      	ldr	r1, [r7, #0]
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f001 f9bd 	bl	80058ec <USBD_CtlError>
        ret = USBD_FAIL;
 8004572:	2303      	movs	r3, #3
 8004574:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004576:	e008      	b.n	800458a <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8004578:	6839      	ldr	r1, [r7, #0]
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f001 f9b6 	bl	80058ec <USBD_CtlError>
      ret = USBD_FAIL;
 8004580:	2303      	movs	r3, #3
 8004582:	75fb      	strb	r3, [r7, #23]
      break;
 8004584:	e002      	b.n	800458c <USBD_CDC_Setup+0x15c>
      break;
 8004586:	bf00      	nop
 8004588:	e008      	b.n	800459c <USBD_CDC_Setup+0x16c>
      break;
 800458a:	bf00      	nop
    }
    break;
 800458c:	e006      	b.n	800459c <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 800458e:	6839      	ldr	r1, [r7, #0]
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f001 f9ab 	bl	80058ec <USBD_CtlError>
    ret = USBD_FAIL;
 8004596:	2303      	movs	r3, #3
 8004598:	75fb      	strb	r3, [r7, #23]
    break;
 800459a:	bf00      	nop
  }

  return (uint8_t)ret;
 800459c:	7dfb      	ldrb	r3, [r7, #23]
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3718      	adds	r7, #24
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop

080045a8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	460b      	mov	r3, r1
 80045b2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80045ba:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d101      	bne.n	80045ca <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e049      	b.n	800465e <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80045d0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80045d2:	78fa      	ldrb	r2, [r7, #3]
 80045d4:	6879      	ldr	r1, [r7, #4]
 80045d6:	4613      	mov	r3, r2
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	4413      	add	r3, r2
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	440b      	add	r3, r1
 80045e0:	3318      	adds	r3, #24
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d029      	beq.n	800463c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80045e8:	78fa      	ldrb	r2, [r7, #3]
 80045ea:	6879      	ldr	r1, [r7, #4]
 80045ec:	4613      	mov	r3, r2
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	4413      	add	r3, r2
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	440b      	add	r3, r1
 80045f6:	3318      	adds	r3, #24
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	78f9      	ldrb	r1, [r7, #3]
 80045fc:	68f8      	ldr	r0, [r7, #12]
 80045fe:	460b      	mov	r3, r1
 8004600:	00db      	lsls	r3, r3, #3
 8004602:	1a5b      	subs	r3, r3, r1
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	4403      	add	r3, r0
 8004608:	3344      	adds	r3, #68	; 0x44
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	fbb2 f1f3 	udiv	r1, r2, r3
 8004610:	fb03 f301 	mul.w	r3, r3, r1
 8004614:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004616:	2b00      	cmp	r3, #0
 8004618:	d110      	bne.n	800463c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800461a:	78fa      	ldrb	r2, [r7, #3]
 800461c:	6879      	ldr	r1, [r7, #4]
 800461e:	4613      	mov	r3, r2
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	4413      	add	r3, r2
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	440b      	add	r3, r1
 8004628:	3318      	adds	r3, #24
 800462a:	2200      	movs	r2, #0
 800462c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800462e:	78f9      	ldrb	r1, [r7, #3]
 8004630:	2300      	movs	r3, #0
 8004632:	2200      	movs	r2, #0
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f001 ff1a 	bl	800646e <USBD_LL_Transmit>
 800463a:	e00f      	b.n	800465c <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	2200      	movs	r2, #0
 8004640:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800464a:	691b      	ldr	r3, [r3, #16]
 800464c:	68ba      	ldr	r2, [r7, #8]
 800464e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8004652:	68ba      	ldr	r2, [r7, #8]
 8004654:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8004658:	78fa      	ldrb	r2, [r7, #3]
 800465a:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3710      	adds	r7, #16
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}

08004666 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004666:	b580      	push	{r7, lr}
 8004668:	b084      	sub	sp, #16
 800466a:	af00      	add	r7, sp, #0
 800466c:	6078      	str	r0, [r7, #4]
 800466e:	460b      	mov	r3, r1
 8004670:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004678:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004680:	2b00      	cmp	r3, #0
 8004682:	d101      	bne.n	8004688 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004684:	2303      	movs	r3, #3
 8004686:	e015      	b.n	80046b4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004688:	78fb      	ldrb	r3, [r7, #3]
 800468a:	4619      	mov	r1, r3
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f001 ff30 	bl	80064f2 <USBD_LL_GetRxDataSize>
 8004692:	4602      	mov	r2, r0
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	68fa      	ldr	r2, [r7, #12]
 80046a4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80046a8:	68fa      	ldr	r2, [r7, #12]
 80046aa:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80046ae:	4611      	mov	r1, r2
 80046b0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80046b2:	2300      	movs	r3, #0
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3710      	adds	r7, #16
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}

080046bc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80046ca:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d015      	beq.n	8004702 <USBD_CDC_EP0_RxReady+0x46>
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80046dc:	2bff      	cmp	r3, #255	; 0xff
 80046de:	d010      	beq.n	8004702 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	68fa      	ldr	r2, [r7, #12]
 80046ea:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80046ee:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80046f0:	68fa      	ldr	r2, [r7, #12]
 80046f2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80046f6:	b292      	uxth	r2, r2
 80046f8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	22ff      	movs	r2, #255	; 0xff
 80046fe:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8004702:	2300      	movs	r3, #0
}
 8004704:	4618      	mov	r0, r3
 8004706:	3710      	adds	r7, #16
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}

0800470c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2243      	movs	r2, #67	; 0x43
 8004718:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800471a:	4b03      	ldr	r3, [pc, #12]	; (8004728 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800471c:	4618      	mov	r0, r3
 800471e:	370c      	adds	r7, #12
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr
 8004728:	200000a8 	.word	0x200000a8

0800472c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2243      	movs	r2, #67	; 0x43
 8004738:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800473a:	4b03      	ldr	r3, [pc, #12]	; (8004748 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800473c:	4618      	mov	r0, r3
 800473e:	370c      	adds	r7, #12
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr
 8004748:	20000064 	.word	0x20000064

0800474c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2243      	movs	r2, #67	; 0x43
 8004758:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800475a:	4b03      	ldr	r3, [pc, #12]	; (8004768 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800475c:	4618      	mov	r0, r3
 800475e:	370c      	adds	r7, #12
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr
 8004768:	200000ec 	.word	0x200000ec

0800476c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800476c:	b480      	push	{r7}
 800476e:	b083      	sub	sp, #12
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	220a      	movs	r2, #10
 8004778:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800477a:	4b03      	ldr	r3, [pc, #12]	; (8004788 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800477c:	4618      	mov	r0, r3
 800477e:	370c      	adds	r7, #12
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr
 8004788:	20000020 	.word	0x20000020

0800478c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d101      	bne.n	80047a0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800479c:	2303      	movs	r3, #3
 800479e:	e004      	b.n	80047aa <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	683a      	ldr	r2, [r7, #0]
 80047a4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80047a8:	2300      	movs	r3, #0
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	370c      	adds	r7, #12
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr

080047b6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80047b6:	b480      	push	{r7}
 80047b8:	b087      	sub	sp, #28
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	60f8      	str	r0, [r7, #12]
 80047be:	60b9      	str	r1, [r7, #8]
 80047c0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80047c8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	68ba      	ldr	r2, [r7, #8]
 80047ce:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80047da:	2300      	movs	r3, #0
}
 80047dc:	4618      	mov	r0, r3
 80047de:	371c      	adds	r7, #28
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b085      	sub	sp, #20
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80047f8:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	683a      	ldr	r2, [r7, #0]
 80047fe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8004802:	2300      	movs	r3, #0
}
 8004804:	4618      	mov	r0, r3
 8004806:	3714      	adds	r7, #20
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800481e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8004820:	2301      	movs	r3, #1
 8004822:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800482a:	2b00      	cmp	r3, #0
 800482c:	d101      	bne.n	8004832 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800482e:	2303      	movs	r3, #3
 8004830:	e01a      	b.n	8004868 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004838:	2b00      	cmp	r3, #0
 800483a:	d114      	bne.n	8004866 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	2201      	movs	r2, #1
 8004840:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800485a:	2181      	movs	r1, #129	; 0x81
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f001 fe06 	bl	800646e <USBD_LL_Transmit>

    ret = USBD_OK;
 8004862:	2300      	movs	r3, #0
 8004864:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8004866:	7bfb      	ldrb	r3, [r7, #15]
}
 8004868:	4618      	mov	r0, r3
 800486a:	3710      	adds	r7, #16
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}

08004870 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b084      	sub	sp, #16
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800487e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004886:	2b00      	cmp	r3, #0
 8004888:	d101      	bne.n	800488e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800488a:	2303      	movs	r3, #3
 800488c:	e016      	b.n	80048bc <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	7c1b      	ldrb	r3, [r3, #16]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d109      	bne.n	80048aa <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800489c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80048a0:	2101      	movs	r1, #1
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f001 fe04 	bl	80064b0 <USBD_LL_PrepareReceive>
 80048a8:	e007      	b.n	80048ba <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80048b0:	2340      	movs	r3, #64	; 0x40
 80048b2:	2101      	movs	r1, #1
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f001 fdfb 	bl	80064b0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80048ba:	2300      	movs	r3, #0
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3710      	adds	r7, #16
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}

080048c4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b086      	sub	sp, #24
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	60b9      	str	r1, [r7, #8]
 80048ce:	4613      	mov	r3, r2
 80048d0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d101      	bne.n	80048dc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80048d8:	2303      	movs	r3, #3
 80048da:	e025      	b.n	8004928 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d003      	beq.n	80048ee <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d003      	beq.n	8004900 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d003      	beq.n	800490e <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	68ba      	ldr	r2, [r7, #8]
 800490a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2201      	movs	r2, #1
 8004912:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	79fa      	ldrb	r2, [r7, #7]
 800491a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800491c:	68f8      	ldr	r0, [r7, #12]
 800491e:	f001 fc71 	bl	8006204 <USBD_LL_Init>
 8004922:	4603      	mov	r3, r0
 8004924:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004926:	7dfb      	ldrb	r3, [r7, #23]
}
 8004928:	4618      	mov	r0, r3
 800492a:	3718      	adds	r7, #24
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}

08004930 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b084      	sub	sp, #16
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800493a:	2300      	movs	r3, #0
 800493c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d101      	bne.n	8004948 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8004944:	2303      	movs	r3, #3
 8004946:	e010      	b.n	800496a <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	683a      	ldr	r2, [r7, #0]
 800494c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004958:	f107 020e 	add.w	r2, r7, #14
 800495c:	4610      	mov	r0, r2
 800495e:	4798      	blx	r3
 8004960:	4602      	mov	r2, r0
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	3710      	adds	r7, #16
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}

08004972 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004972:	b580      	push	{r7, lr}
 8004974:	b082      	sub	sp, #8
 8004976:	af00      	add	r7, sp, #0
 8004978:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f001 fc8e 	bl	800629c <USBD_LL_Start>
 8004980:	4603      	mov	r3, r0
}
 8004982:	4618      	mov	r0, r3
 8004984:	3708      	adds	r7, #8
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}

0800498a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800498a:	b480      	push	{r7}
 800498c:	b083      	sub	sp, #12
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004992:	2300      	movs	r3, #0
}
 8004994:	4618      	mov	r0, r3
 8004996:	370c      	adds	r7, #12
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr

080049a0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b084      	sub	sp, #16
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	460b      	mov	r3, r1
 80049aa:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80049ac:	2303      	movs	r3, #3
 80049ae:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d009      	beq.n	80049ce <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	78fa      	ldrb	r2, [r7, #3]
 80049c4:	4611      	mov	r1, r2
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	4798      	blx	r3
 80049ca:	4603      	mov	r3, r0
 80049cc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80049ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3710      	adds	r7, #16
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b082      	sub	sp, #8
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	460b      	mov	r3, r1
 80049e2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d007      	beq.n	80049fe <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	78fa      	ldrb	r2, [r7, #3]
 80049f8:	4611      	mov	r1, r2
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	4798      	blx	r3
  }

  return USBD_OK;
 80049fe:	2300      	movs	r3, #0
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3708      	adds	r7, #8
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b084      	sub	sp, #16
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004a18:	6839      	ldr	r1, [r7, #0]
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f000 ff2c 	bl	8005878 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8004a2e:	461a      	mov	r2, r3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004a3c:	f003 031f 	and.w	r3, r3, #31
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d00e      	beq.n	8004a62 <USBD_LL_SetupStage+0x5a>
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d302      	bcc.n	8004a4e <USBD_LL_SetupStage+0x46>
 8004a48:	2b02      	cmp	r3, #2
 8004a4a:	d014      	beq.n	8004a76 <USBD_LL_SetupStage+0x6e>
 8004a4c:	e01d      	b.n	8004a8a <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004a54:	4619      	mov	r1, r3
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 fa18 	bl	8004e8c <USBD_StdDevReq>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	73fb      	strb	r3, [r7, #15]
      break;
 8004a60:	e020      	b.n	8004aa4 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004a68:	4619      	mov	r1, r3
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 fa7c 	bl	8004f68 <USBD_StdItfReq>
 8004a70:	4603      	mov	r3, r0
 8004a72:	73fb      	strb	r3, [r7, #15]
      break;
 8004a74:	e016      	b.n	8004aa4 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004a7c:	4619      	mov	r1, r3
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f000 fab8 	bl	8004ff4 <USBD_StdEPReq>
 8004a84:	4603      	mov	r3, r0
 8004a86:	73fb      	strb	r3, [r7, #15]
      break;
 8004a88:	e00c      	b.n	8004aa4 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004a90:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	4619      	mov	r1, r3
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f001 fc5f 	bl	800635c <USBD_LL_StallEP>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	73fb      	strb	r3, [r7, #15]
      break;
 8004aa2:	bf00      	nop
  }

  return ret;
 8004aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3710      	adds	r7, #16
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}

08004aae <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004aae:	b580      	push	{r7, lr}
 8004ab0:	b086      	sub	sp, #24
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	60f8      	str	r0, [r7, #12]
 8004ab6:	460b      	mov	r3, r1
 8004ab8:	607a      	str	r2, [r7, #4]
 8004aba:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004abc:	7afb      	ldrb	r3, [r7, #11]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d137      	bne.n	8004b32 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8004ac8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004ad0:	2b03      	cmp	r3, #3
 8004ad2:	d14a      	bne.n	8004b6a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	689a      	ldr	r2, [r3, #8]
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d913      	bls.n	8004b08 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	689a      	ldr	r2, [r3, #8]
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	1ad2      	subs	r2, r2, r3
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	68da      	ldr	r2, [r3, #12]
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	4293      	cmp	r3, r2
 8004af8:	bf28      	it	cs
 8004afa:	4613      	movcs	r3, r2
 8004afc:	461a      	mov	r2, r3
 8004afe:	6879      	ldr	r1, [r7, #4]
 8004b00:	68f8      	ldr	r0, [r7, #12]
 8004b02:	f000 ffad 	bl	8005a60 <USBD_CtlContinueRx>
 8004b06:	e030      	b.n	8004b6a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b0e:	691b      	ldr	r3, [r3, #16]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d00a      	beq.n	8004b2a <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004b1a:	2b03      	cmp	r3, #3
 8004b1c:	d105      	bne.n	8004b2a <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	68f8      	ldr	r0, [r7, #12]
 8004b28:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8004b2a:	68f8      	ldr	r0, [r7, #12]
 8004b2c:	f000 ffa9 	bl	8005a82 <USBD_CtlSendStatus>
 8004b30:	e01b      	b.n	8004b6a <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b38:	699b      	ldr	r3, [r3, #24]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d013      	beq.n	8004b66 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8004b44:	2b03      	cmp	r3, #3
 8004b46:	d10e      	bne.n	8004b66 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b4e:	699b      	ldr	r3, [r3, #24]
 8004b50:	7afa      	ldrb	r2, [r7, #11]
 8004b52:	4611      	mov	r1, r2
 8004b54:	68f8      	ldr	r0, [r7, #12]
 8004b56:	4798      	blx	r3
 8004b58:	4603      	mov	r3, r0
 8004b5a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8004b5c:	7dfb      	ldrb	r3, [r7, #23]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d003      	beq.n	8004b6a <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8004b62:	7dfb      	ldrb	r3, [r7, #23]
 8004b64:	e002      	b.n	8004b6c <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004b66:	2303      	movs	r3, #3
 8004b68:	e000      	b.n	8004b6c <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8004b6a:	2300      	movs	r3, #0
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3718      	adds	r7, #24
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}

08004b74 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b086      	sub	sp, #24
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	607a      	str	r2, [r7, #4]
 8004b80:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004b82:	7afb      	ldrb	r3, [r7, #11]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d16a      	bne.n	8004c5e <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	3314      	adds	r3, #20
 8004b8c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004b94:	2b02      	cmp	r3, #2
 8004b96:	d155      	bne.n	8004c44 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	689a      	ldr	r2, [r3, #8]
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d914      	bls.n	8004bce <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	689a      	ldr	r2, [r3, #8]
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	1ad2      	subs	r2, r2, r3
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	6879      	ldr	r1, [r7, #4]
 8004bba:	68f8      	ldr	r0, [r7, #12]
 8004bbc:	f000 ff22 	bl	8005a04 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	2100      	movs	r1, #0
 8004bc6:	68f8      	ldr	r0, [r7, #12]
 8004bc8:	f001 fc72 	bl	80064b0 <USBD_LL_PrepareReceive>
 8004bcc:	e03a      	b.n	8004c44 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	68da      	ldr	r2, [r3, #12]
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d11c      	bne.n	8004c14 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	685a      	ldr	r2, [r3, #4]
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d316      	bcc.n	8004c14 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	685a      	ldr	r2, [r3, #4]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d20f      	bcs.n	8004c14 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	2100      	movs	r1, #0
 8004bf8:	68f8      	ldr	r0, [r7, #12]
 8004bfa:	f000 ff03 	bl	8005a04 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004c06:	2300      	movs	r3, #0
 8004c08:	2200      	movs	r2, #0
 8004c0a:	2100      	movs	r1, #0
 8004c0c:	68f8      	ldr	r0, [r7, #12]
 8004c0e:	f001 fc4f 	bl	80064b0 <USBD_LL_PrepareReceive>
 8004c12:	e017      	b.n	8004c44 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d00a      	beq.n	8004c36 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004c26:	2b03      	cmp	r3, #3
 8004c28:	d105      	bne.n	8004c36 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	68f8      	ldr	r0, [r7, #12]
 8004c34:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004c36:	2180      	movs	r1, #128	; 0x80
 8004c38:	68f8      	ldr	r0, [r7, #12]
 8004c3a:	f001 fb8f 	bl	800635c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8004c3e:	68f8      	ldr	r0, [r7, #12]
 8004c40:	f000 ff32 	bl	8005aa8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d123      	bne.n	8004c96 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8004c4e:	68f8      	ldr	r0, [r7, #12]
 8004c50:	f7ff fe9b 	bl	800498a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8004c5c:	e01b      	b.n	8004c96 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c64:	695b      	ldr	r3, [r3, #20]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d013      	beq.n	8004c92 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8004c70:	2b03      	cmp	r3, #3
 8004c72:	d10e      	bne.n	8004c92 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c7a:	695b      	ldr	r3, [r3, #20]
 8004c7c:	7afa      	ldrb	r2, [r7, #11]
 8004c7e:	4611      	mov	r1, r2
 8004c80:	68f8      	ldr	r0, [r7, #12]
 8004c82:	4798      	blx	r3
 8004c84:	4603      	mov	r3, r0
 8004c86:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8004c88:	7dfb      	ldrb	r3, [r7, #23]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d003      	beq.n	8004c96 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8004c8e:	7dfb      	ldrb	r3, [r7, #23]
 8004c90:	e002      	b.n	8004c98 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004c92:	2303      	movs	r3, #3
 8004c94:	e000      	b.n	8004c98 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8004c96:	2300      	movs	r3, #0
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3718      	adds	r7, #24
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b082      	sub	sp, #8
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d009      	beq.n	8004ce4 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	6852      	ldr	r2, [r2, #4]
 8004cdc:	b2d2      	uxtb	r2, r2
 8004cde:	4611      	mov	r1, r2
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004ce4:	2340      	movs	r3, #64	; 0x40
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	2100      	movs	r1, #0
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f001 faf1 	bl	80062d2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2240      	movs	r2, #64	; 0x40
 8004cfc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004d00:	2340      	movs	r3, #64	; 0x40
 8004d02:	2200      	movs	r2, #0
 8004d04:	2180      	movs	r1, #128	; 0x80
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f001 fae3 	bl	80062d2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2240      	movs	r2, #64	; 0x40
 8004d16:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8004d18:	2300      	movs	r3, #0
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3708      	adds	r7, #8
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}

08004d22 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8004d22:	b480      	push	{r7}
 8004d24:	b083      	sub	sp, #12
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	6078      	str	r0, [r7, #4]
 8004d2a:	460b      	mov	r3, r1
 8004d2c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	78fa      	ldrb	r2, [r7, #3]
 8004d32:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8004d34:	2300      	movs	r3, #0
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	370c      	adds	r7, #12
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr

08004d42 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8004d42:	b480      	push	{r7}
 8004d44:	b083      	sub	sp, #12
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2204      	movs	r2, #4
 8004d5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8004d5e:	2300      	movs	r3, #0
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	370c      	adds	r7, #12
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr

08004d6c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d7a:	2b04      	cmp	r3, #4
 8004d7c:	d105      	bne.n	8004d8a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8004d8a:	2300      	movs	r3, #0
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	370c      	adds	r7, #12
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr

08004d98 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b082      	sub	sp, #8
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004da6:	2b03      	cmp	r3, #3
 8004da8:	d10b      	bne.n	8004dc2 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004db0:	69db      	ldr	r3, [r3, #28]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d005      	beq.n	8004dc2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004dbc:	69db      	ldr	r3, [r3, #28]
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004dc2:	2300      	movs	r3, #0
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3708      	adds	r7, #8
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}

08004dcc <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	460b      	mov	r3, r1
 8004dd6:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	370c      	adds	r7, #12
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr

08004de6 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8004de6:	b480      	push	{r7}
 8004de8:	b083      	sub	sp, #12
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
 8004dee:	460b      	mov	r3, r1
 8004df0:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8004df2:	2300      	movs	r3, #0
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	370c      	adds	r7, #12
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr

08004e00 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b083      	sub	sp, #12
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004e08:	2300      	movs	r3, #0
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	370c      	adds	r7, #12
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr

08004e16 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8004e16:	b580      	push	{r7, lr}
 8004e18:	b082      	sub	sp, #8
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2201      	movs	r2, #1
 8004e22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d009      	beq.n	8004e44 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	6852      	ldr	r2, [r2, #4]
 8004e3c:	b2d2      	uxtb	r2, r2
 8004e3e:	4611      	mov	r1, r2
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	4798      	blx	r3
  }

  return USBD_OK;
 8004e44:	2300      	movs	r3, #0
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3708      	adds	r7, #8
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}

08004e4e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8004e4e:	b480      	push	{r7}
 8004e50:	b087      	sub	sp, #28
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	3301      	adds	r3, #1
 8004e64:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8004e6c:	8a3b      	ldrh	r3, [r7, #16]
 8004e6e:	021b      	lsls	r3, r3, #8
 8004e70:	b21a      	sxth	r2, r3
 8004e72:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	b21b      	sxth	r3, r3
 8004e7a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8004e7c:	89fb      	ldrh	r3, [r7, #14]
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	371c      	adds	r7, #28
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr
	...

08004e8c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004e96:	2300      	movs	r3, #0
 8004e98:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	781b      	ldrb	r3, [r3, #0]
 8004e9e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004ea2:	2b20      	cmp	r3, #32
 8004ea4:	d004      	beq.n	8004eb0 <USBD_StdDevReq+0x24>
 8004ea6:	2b40      	cmp	r3, #64	; 0x40
 8004ea8:	d002      	beq.n	8004eb0 <USBD_StdDevReq+0x24>
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d00a      	beq.n	8004ec4 <USBD_StdDevReq+0x38>
 8004eae:	e050      	b.n	8004f52 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	6839      	ldr	r1, [r7, #0]
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	4798      	blx	r3
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	73fb      	strb	r3, [r7, #15]
    break;
 8004ec2:	e04b      	b.n	8004f5c <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	785b      	ldrb	r3, [r3, #1]
 8004ec8:	2b09      	cmp	r3, #9
 8004eca:	d83c      	bhi.n	8004f46 <USBD_StdDevReq+0xba>
 8004ecc:	a201      	add	r2, pc, #4	; (adr r2, 8004ed4 <USBD_StdDevReq+0x48>)
 8004ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ed2:	bf00      	nop
 8004ed4:	08004f29 	.word	0x08004f29
 8004ed8:	08004f3d 	.word	0x08004f3d
 8004edc:	08004f47 	.word	0x08004f47
 8004ee0:	08004f33 	.word	0x08004f33
 8004ee4:	08004f47 	.word	0x08004f47
 8004ee8:	08004f07 	.word	0x08004f07
 8004eec:	08004efd 	.word	0x08004efd
 8004ef0:	08004f47 	.word	0x08004f47
 8004ef4:	08004f1f 	.word	0x08004f1f
 8004ef8:	08004f11 	.word	0x08004f11
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8004efc:	6839      	ldr	r1, [r7, #0]
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f000 f9ce 	bl	80052a0 <USBD_GetDescriptor>
      break;
 8004f04:	e024      	b.n	8004f50 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8004f06:	6839      	ldr	r1, [r7, #0]
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f000 fb33 	bl	8005574 <USBD_SetAddress>
      break;
 8004f0e:	e01f      	b.n	8004f50 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8004f10:	6839      	ldr	r1, [r7, #0]
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f000 fb70 	bl	80055f8 <USBD_SetConfig>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	73fb      	strb	r3, [r7, #15]
      break;
 8004f1c:	e018      	b.n	8004f50 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8004f1e:	6839      	ldr	r1, [r7, #0]
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f000 fc0d 	bl	8005740 <USBD_GetConfig>
      break;
 8004f26:	e013      	b.n	8004f50 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8004f28:	6839      	ldr	r1, [r7, #0]
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f000 fc3c 	bl	80057a8 <USBD_GetStatus>
      break;
 8004f30:	e00e      	b.n	8004f50 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8004f32:	6839      	ldr	r1, [r7, #0]
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f000 fc6a 	bl	800580e <USBD_SetFeature>
      break;
 8004f3a:	e009      	b.n	8004f50 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8004f3c:	6839      	ldr	r1, [r7, #0]
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f000 fc79 	bl	8005836 <USBD_ClrFeature>
      break;
 8004f44:	e004      	b.n	8004f50 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8004f46:	6839      	ldr	r1, [r7, #0]
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f000 fccf 	bl	80058ec <USBD_CtlError>
      break;
 8004f4e:	bf00      	nop
    }
    break;
 8004f50:	e004      	b.n	8004f5c <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8004f52:	6839      	ldr	r1, [r7, #0]
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f000 fcc9 	bl	80058ec <USBD_CtlError>
    break;
 8004f5a:	bf00      	nop
  }

  return ret;
 8004f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3710      	adds	r7, #16
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop

08004f68 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b084      	sub	sp, #16
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004f72:	2300      	movs	r3, #0
 8004f74:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004f7e:	2b20      	cmp	r3, #32
 8004f80:	d003      	beq.n	8004f8a <USBD_StdItfReq+0x22>
 8004f82:	2b40      	cmp	r3, #64	; 0x40
 8004f84:	d001      	beq.n	8004f8a <USBD_StdItfReq+0x22>
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d12a      	bne.n	8004fe0 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f90:	3b01      	subs	r3, #1
 8004f92:	2b02      	cmp	r3, #2
 8004f94:	d81d      	bhi.n	8004fd2 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	889b      	ldrh	r3, [r3, #4]
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d813      	bhi.n	8004fc8 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	6839      	ldr	r1, [r7, #0]
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	4798      	blx	r3
 8004fae:	4603      	mov	r3, r0
 8004fb0:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	88db      	ldrh	r3, [r3, #6]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d110      	bne.n	8004fdc <USBD_StdItfReq+0x74>
 8004fba:	7bfb      	ldrb	r3, [r7, #15]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d10d      	bne.n	8004fdc <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f000 fd5e 	bl	8005a82 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8004fc6:	e009      	b.n	8004fdc <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8004fc8:	6839      	ldr	r1, [r7, #0]
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f000 fc8e 	bl	80058ec <USBD_CtlError>
      break;
 8004fd0:	e004      	b.n	8004fdc <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8004fd2:	6839      	ldr	r1, [r7, #0]
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f000 fc89 	bl	80058ec <USBD_CtlError>
      break;
 8004fda:	e000      	b.n	8004fde <USBD_StdItfReq+0x76>
      break;
 8004fdc:	bf00      	nop
    }
    break;
 8004fde:	e004      	b.n	8004fea <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8004fe0:	6839      	ldr	r1, [r7, #0]
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 fc82 	bl	80058ec <USBD_CtlError>
    break;
 8004fe8:	bf00      	nop
  }

  return ret;
 8004fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3710      	adds	r7, #16
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}

08004ff4 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8004ffe:	2300      	movs	r3, #0
 8005000:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	889b      	ldrh	r3, [r3, #4]
 8005006:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005010:	2b20      	cmp	r3, #32
 8005012:	d004      	beq.n	800501e <USBD_StdEPReq+0x2a>
 8005014:	2b40      	cmp	r3, #64	; 0x40
 8005016:	d002      	beq.n	800501e <USBD_StdEPReq+0x2a>
 8005018:	2b00      	cmp	r3, #0
 800501a:	d00a      	beq.n	8005032 <USBD_StdEPReq+0x3e>
 800501c:	e135      	b.n	800528a <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	6839      	ldr	r1, [r7, #0]
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	4798      	blx	r3
 800502c:	4603      	mov	r3, r0
 800502e:	73fb      	strb	r3, [r7, #15]
    break;
 8005030:	e130      	b.n	8005294 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	785b      	ldrb	r3, [r3, #1]
 8005036:	2b01      	cmp	r3, #1
 8005038:	d03e      	beq.n	80050b8 <USBD_StdEPReq+0xc4>
 800503a:	2b03      	cmp	r3, #3
 800503c:	d002      	beq.n	8005044 <USBD_StdEPReq+0x50>
 800503e:	2b00      	cmp	r3, #0
 8005040:	d077      	beq.n	8005132 <USBD_StdEPReq+0x13e>
 8005042:	e11c      	b.n	800527e <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800504a:	2b02      	cmp	r3, #2
 800504c:	d002      	beq.n	8005054 <USBD_StdEPReq+0x60>
 800504e:	2b03      	cmp	r3, #3
 8005050:	d015      	beq.n	800507e <USBD_StdEPReq+0x8a>
 8005052:	e02b      	b.n	80050ac <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005054:	7bbb      	ldrb	r3, [r7, #14]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d00c      	beq.n	8005074 <USBD_StdEPReq+0x80>
 800505a:	7bbb      	ldrb	r3, [r7, #14]
 800505c:	2b80      	cmp	r3, #128	; 0x80
 800505e:	d009      	beq.n	8005074 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8005060:	7bbb      	ldrb	r3, [r7, #14]
 8005062:	4619      	mov	r1, r3
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f001 f979 	bl	800635c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800506a:	2180      	movs	r1, #128	; 0x80
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f001 f975 	bl	800635c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8005072:	e020      	b.n	80050b6 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8005074:	6839      	ldr	r1, [r7, #0]
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f000 fc38 	bl	80058ec <USBD_CtlError>
        break;
 800507c:	e01b      	b.n	80050b6 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	885b      	ldrh	r3, [r3, #2]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d10e      	bne.n	80050a4 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005086:	7bbb      	ldrb	r3, [r7, #14]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d00b      	beq.n	80050a4 <USBD_StdEPReq+0xb0>
 800508c:	7bbb      	ldrb	r3, [r7, #14]
 800508e:	2b80      	cmp	r3, #128	; 0x80
 8005090:	d008      	beq.n	80050a4 <USBD_StdEPReq+0xb0>
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	88db      	ldrh	r3, [r3, #6]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d104      	bne.n	80050a4 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800509a:	7bbb      	ldrb	r3, [r7, #14]
 800509c:	4619      	mov	r1, r3
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f001 f95c 	bl	800635c <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f000 fcec 	bl	8005a82 <USBD_CtlSendStatus>

        break;
 80050aa:	e004      	b.n	80050b6 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 80050ac:	6839      	ldr	r1, [r7, #0]
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 fc1c 	bl	80058ec <USBD_CtlError>
        break;
 80050b4:	bf00      	nop
      }
      break;
 80050b6:	e0e7      	b.n	8005288 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d002      	beq.n	80050c8 <USBD_StdEPReq+0xd4>
 80050c2:	2b03      	cmp	r3, #3
 80050c4:	d015      	beq.n	80050f2 <USBD_StdEPReq+0xfe>
 80050c6:	e02d      	b.n	8005124 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80050c8:	7bbb      	ldrb	r3, [r7, #14]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d00c      	beq.n	80050e8 <USBD_StdEPReq+0xf4>
 80050ce:	7bbb      	ldrb	r3, [r7, #14]
 80050d0:	2b80      	cmp	r3, #128	; 0x80
 80050d2:	d009      	beq.n	80050e8 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80050d4:	7bbb      	ldrb	r3, [r7, #14]
 80050d6:	4619      	mov	r1, r3
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f001 f93f 	bl	800635c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80050de:	2180      	movs	r1, #128	; 0x80
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f001 f93b 	bl	800635c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80050e6:	e023      	b.n	8005130 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 80050e8:	6839      	ldr	r1, [r7, #0]
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f000 fbfe 	bl	80058ec <USBD_CtlError>
        break;
 80050f0:	e01e      	b.n	8005130 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	885b      	ldrh	r3, [r3, #2]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d119      	bne.n	800512e <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80050fa:	7bbb      	ldrb	r3, [r7, #14]
 80050fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005100:	2b00      	cmp	r3, #0
 8005102:	d004      	beq.n	800510e <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005104:	7bbb      	ldrb	r3, [r7, #14]
 8005106:	4619      	mov	r1, r3
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f001 f946 	bl	800639a <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f000 fcb7 	bl	8005a82 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	6839      	ldr	r1, [r7, #0]
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	4798      	blx	r3
        }
        break;
 8005122:	e004      	b.n	800512e <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8005124:	6839      	ldr	r1, [r7, #0]
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f000 fbe0 	bl	80058ec <USBD_CtlError>
        break;
 800512c:	e000      	b.n	8005130 <USBD_StdEPReq+0x13c>
        break;
 800512e:	bf00      	nop
      }
      break;
 8005130:	e0aa      	b.n	8005288 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005138:	2b02      	cmp	r3, #2
 800513a:	d002      	beq.n	8005142 <USBD_StdEPReq+0x14e>
 800513c:	2b03      	cmp	r3, #3
 800513e:	d032      	beq.n	80051a6 <USBD_StdEPReq+0x1b2>
 8005140:	e097      	b.n	8005272 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005142:	7bbb      	ldrb	r3, [r7, #14]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d007      	beq.n	8005158 <USBD_StdEPReq+0x164>
 8005148:	7bbb      	ldrb	r3, [r7, #14]
 800514a:	2b80      	cmp	r3, #128	; 0x80
 800514c:	d004      	beq.n	8005158 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800514e:	6839      	ldr	r1, [r7, #0]
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f000 fbcb 	bl	80058ec <USBD_CtlError>
          break;
 8005156:	e091      	b.n	800527c <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005158:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800515c:	2b00      	cmp	r3, #0
 800515e:	da0b      	bge.n	8005178 <USBD_StdEPReq+0x184>
 8005160:	7bbb      	ldrb	r3, [r7, #14]
 8005162:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005166:	4613      	mov	r3, r2
 8005168:	009b      	lsls	r3, r3, #2
 800516a:	4413      	add	r3, r2
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	3310      	adds	r3, #16
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	4413      	add	r3, r2
 8005174:	3304      	adds	r3, #4
 8005176:	e00b      	b.n	8005190 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8005178:	7bbb      	ldrb	r3, [r7, #14]
 800517a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800517e:	4613      	mov	r3, r2
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	4413      	add	r3, r2
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	4413      	add	r3, r2
 800518e:	3304      	adds	r3, #4
 8005190:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	2200      	movs	r2, #0
 8005196:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	2202      	movs	r2, #2
 800519c:	4619      	mov	r1, r3
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f000 fc15 	bl	80059ce <USBD_CtlSendData>
        break;
 80051a4:	e06a      	b.n	800527c <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 80051a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	da11      	bge.n	80051d2 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80051ae:	7bbb      	ldrb	r3, [r7, #14]
 80051b0:	f003 020f 	and.w	r2, r3, #15
 80051b4:	6879      	ldr	r1, [r7, #4]
 80051b6:	4613      	mov	r3, r2
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	4413      	add	r3, r2
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	440b      	add	r3, r1
 80051c0:	3324      	adds	r3, #36	; 0x24
 80051c2:	881b      	ldrh	r3, [r3, #0]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d117      	bne.n	80051f8 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80051c8:	6839      	ldr	r1, [r7, #0]
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 fb8e 	bl	80058ec <USBD_CtlError>
            break;
 80051d0:	e054      	b.n	800527c <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80051d2:	7bbb      	ldrb	r3, [r7, #14]
 80051d4:	f003 020f 	and.w	r2, r3, #15
 80051d8:	6879      	ldr	r1, [r7, #4]
 80051da:	4613      	mov	r3, r2
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	4413      	add	r3, r2
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	440b      	add	r3, r1
 80051e4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80051e8:	881b      	ldrh	r3, [r3, #0]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d104      	bne.n	80051f8 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80051ee:	6839      	ldr	r1, [r7, #0]
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f000 fb7b 	bl	80058ec <USBD_CtlError>
            break;
 80051f6:	e041      	b.n	800527c <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80051f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	da0b      	bge.n	8005218 <USBD_StdEPReq+0x224>
 8005200:	7bbb      	ldrb	r3, [r7, #14]
 8005202:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005206:	4613      	mov	r3, r2
 8005208:	009b      	lsls	r3, r3, #2
 800520a:	4413      	add	r3, r2
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	3310      	adds	r3, #16
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	4413      	add	r3, r2
 8005214:	3304      	adds	r3, #4
 8005216:	e00b      	b.n	8005230 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8005218:	7bbb      	ldrb	r3, [r7, #14]
 800521a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800521e:	4613      	mov	r3, r2
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	4413      	add	r3, r2
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	4413      	add	r3, r2
 800522e:	3304      	adds	r3, #4
 8005230:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005232:	7bbb      	ldrb	r3, [r7, #14]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d002      	beq.n	800523e <USBD_StdEPReq+0x24a>
 8005238:	7bbb      	ldrb	r3, [r7, #14]
 800523a:	2b80      	cmp	r3, #128	; 0x80
 800523c:	d103      	bne.n	8005246 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	2200      	movs	r2, #0
 8005242:	601a      	str	r2, [r3, #0]
 8005244:	e00e      	b.n	8005264 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005246:	7bbb      	ldrb	r3, [r7, #14]
 8005248:	4619      	mov	r1, r3
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f001 f8c4 	bl	80063d8 <USBD_LL_IsStallEP>
 8005250:	4603      	mov	r3, r0
 8005252:	2b00      	cmp	r3, #0
 8005254:	d003      	beq.n	800525e <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	2201      	movs	r2, #1
 800525a:	601a      	str	r2, [r3, #0]
 800525c:	e002      	b.n	8005264 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	2200      	movs	r2, #0
 8005262:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	2202      	movs	r2, #2
 8005268:	4619      	mov	r1, r3
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f000 fbaf 	bl	80059ce <USBD_CtlSendData>
          break;
 8005270:	e004      	b.n	800527c <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8005272:	6839      	ldr	r1, [r7, #0]
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f000 fb39 	bl	80058ec <USBD_CtlError>
        break;
 800527a:	bf00      	nop
      }
      break;
 800527c:	e004      	b.n	8005288 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800527e:	6839      	ldr	r1, [r7, #0]
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f000 fb33 	bl	80058ec <USBD_CtlError>
      break;
 8005286:	bf00      	nop
    }
    break;
 8005288:	e004      	b.n	8005294 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800528a:	6839      	ldr	r1, [r7, #0]
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f000 fb2d 	bl	80058ec <USBD_CtlError>
    break;
 8005292:	bf00      	nop
  }

  return ret;
 8005294:	7bfb      	ldrb	r3, [r7, #15]
}
 8005296:	4618      	mov	r0, r3
 8005298:	3710      	adds	r7, #16
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}
	...

080052a0 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80052aa:	2300      	movs	r3, #0
 80052ac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80052ae:	2300      	movs	r3, #0
 80052b0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80052b2:	2300      	movs	r3, #0
 80052b4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	885b      	ldrh	r3, [r3, #2]
 80052ba:	0a1b      	lsrs	r3, r3, #8
 80052bc:	b29b      	uxth	r3, r3
 80052be:	3b01      	subs	r3, #1
 80052c0:	2b06      	cmp	r3, #6
 80052c2:	f200 8128 	bhi.w	8005516 <USBD_GetDescriptor+0x276>
 80052c6:	a201      	add	r2, pc, #4	; (adr r2, 80052cc <USBD_GetDescriptor+0x2c>)
 80052c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052cc:	080052e9 	.word	0x080052e9
 80052d0:	08005301 	.word	0x08005301
 80052d4:	08005341 	.word	0x08005341
 80052d8:	08005517 	.word	0x08005517
 80052dc:	08005517 	.word	0x08005517
 80052e0:	080054b7 	.word	0x080054b7
 80052e4:	080054e3 	.word	0x080054e3
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	7c12      	ldrb	r2, [r2, #16]
 80052f4:	f107 0108 	add.w	r1, r7, #8
 80052f8:	4610      	mov	r0, r2
 80052fa:	4798      	blx	r3
 80052fc:	60f8      	str	r0, [r7, #12]
    break;
 80052fe:	e112      	b.n	8005526 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	7c1b      	ldrb	r3, [r3, #16]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d10d      	bne.n	8005324 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800530e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005310:	f107 0208 	add.w	r2, r7, #8
 8005314:	4610      	mov	r0, r2
 8005316:	4798      	blx	r3
 8005318:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	3301      	adds	r3, #1
 800531e:	2202      	movs	r2, #2
 8005320:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8005322:	e100      	b.n	8005526 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800532a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800532c:	f107 0208 	add.w	r2, r7, #8
 8005330:	4610      	mov	r0, r2
 8005332:	4798      	blx	r3
 8005334:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	3301      	adds	r3, #1
 800533a:	2202      	movs	r2, #2
 800533c:	701a      	strb	r2, [r3, #0]
    break;
 800533e:	e0f2      	b.n	8005526 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	885b      	ldrh	r3, [r3, #2]
 8005344:	b2db      	uxtb	r3, r3
 8005346:	2b05      	cmp	r3, #5
 8005348:	f200 80ac 	bhi.w	80054a4 <USBD_GetDescriptor+0x204>
 800534c:	a201      	add	r2, pc, #4	; (adr r2, 8005354 <USBD_GetDescriptor+0xb4>)
 800534e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005352:	bf00      	nop
 8005354:	0800536d 	.word	0x0800536d
 8005358:	080053a1 	.word	0x080053a1
 800535c:	080053d5 	.word	0x080053d5
 8005360:	08005409 	.word	0x08005409
 8005364:	0800543d 	.word	0x0800543d
 8005368:	08005471 	.word	0x08005471
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d00b      	beq.n	8005390 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	7c12      	ldrb	r2, [r2, #16]
 8005384:	f107 0108 	add.w	r1, r7, #8
 8005388:	4610      	mov	r0, r2
 800538a:	4798      	blx	r3
 800538c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800538e:	e091      	b.n	80054b4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005390:	6839      	ldr	r1, [r7, #0]
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 faaa 	bl	80058ec <USBD_CtlError>
        err++;
 8005398:	7afb      	ldrb	r3, [r7, #11]
 800539a:	3301      	adds	r3, #1
 800539c:	72fb      	strb	r3, [r7, #11]
      break;
 800539e:	e089      	b.n	80054b4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d00b      	beq.n	80053c4 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	7c12      	ldrb	r2, [r2, #16]
 80053b8:	f107 0108 	add.w	r1, r7, #8
 80053bc:	4610      	mov	r0, r2
 80053be:	4798      	blx	r3
 80053c0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80053c2:	e077      	b.n	80054b4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80053c4:	6839      	ldr	r1, [r7, #0]
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f000 fa90 	bl	80058ec <USBD_CtlError>
        err++;
 80053cc:	7afb      	ldrb	r3, [r7, #11]
 80053ce:	3301      	adds	r3, #1
 80053d0:	72fb      	strb	r3, [r7, #11]
      break;
 80053d2:	e06f      	b.n	80054b4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d00b      	beq.n	80053f8 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	687a      	ldr	r2, [r7, #4]
 80053ea:	7c12      	ldrb	r2, [r2, #16]
 80053ec:	f107 0108 	add.w	r1, r7, #8
 80053f0:	4610      	mov	r0, r2
 80053f2:	4798      	blx	r3
 80053f4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80053f6:	e05d      	b.n	80054b4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80053f8:	6839      	ldr	r1, [r7, #0]
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f000 fa76 	bl	80058ec <USBD_CtlError>
        err++;
 8005400:	7afb      	ldrb	r3, [r7, #11]
 8005402:	3301      	adds	r3, #1
 8005404:	72fb      	strb	r3, [r7, #11]
      break;
 8005406:	e055      	b.n	80054b4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800540e:	691b      	ldr	r3, [r3, #16]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d00b      	beq.n	800542c <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800541a:	691b      	ldr	r3, [r3, #16]
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	7c12      	ldrb	r2, [r2, #16]
 8005420:	f107 0108 	add.w	r1, r7, #8
 8005424:	4610      	mov	r0, r2
 8005426:	4798      	blx	r3
 8005428:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800542a:	e043      	b.n	80054b4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800542c:	6839      	ldr	r1, [r7, #0]
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f000 fa5c 	bl	80058ec <USBD_CtlError>
        err++;
 8005434:	7afb      	ldrb	r3, [r7, #11]
 8005436:	3301      	adds	r3, #1
 8005438:	72fb      	strb	r3, [r7, #11]
      break;
 800543a:	e03b      	b.n	80054b4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005442:	695b      	ldr	r3, [r3, #20]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d00b      	beq.n	8005460 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800544e:	695b      	ldr	r3, [r3, #20]
 8005450:	687a      	ldr	r2, [r7, #4]
 8005452:	7c12      	ldrb	r2, [r2, #16]
 8005454:	f107 0108 	add.w	r1, r7, #8
 8005458:	4610      	mov	r0, r2
 800545a:	4798      	blx	r3
 800545c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800545e:	e029      	b.n	80054b4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005460:	6839      	ldr	r1, [r7, #0]
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f000 fa42 	bl	80058ec <USBD_CtlError>
        err++;
 8005468:	7afb      	ldrb	r3, [r7, #11]
 800546a:	3301      	adds	r3, #1
 800546c:	72fb      	strb	r3, [r7, #11]
      break;
 800546e:	e021      	b.n	80054b4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005476:	699b      	ldr	r3, [r3, #24]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d00b      	beq.n	8005494 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005482:	699b      	ldr	r3, [r3, #24]
 8005484:	687a      	ldr	r2, [r7, #4]
 8005486:	7c12      	ldrb	r2, [r2, #16]
 8005488:	f107 0108 	add.w	r1, r7, #8
 800548c:	4610      	mov	r0, r2
 800548e:	4798      	blx	r3
 8005490:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005492:	e00f      	b.n	80054b4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005494:	6839      	ldr	r1, [r7, #0]
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f000 fa28 	bl	80058ec <USBD_CtlError>
        err++;
 800549c:	7afb      	ldrb	r3, [r7, #11]
 800549e:	3301      	adds	r3, #1
 80054a0:	72fb      	strb	r3, [r7, #11]
      break;
 80054a2:	e007      	b.n	80054b4 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 80054a4:	6839      	ldr	r1, [r7, #0]
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 fa20 	bl	80058ec <USBD_CtlError>
      err++;
 80054ac:	7afb      	ldrb	r3, [r7, #11]
 80054ae:	3301      	adds	r3, #1
 80054b0:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 80054b2:	bf00      	nop
    }
    break;
 80054b4:	e037      	b.n	8005526 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	7c1b      	ldrb	r3, [r3, #16]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d109      	bne.n	80054d2 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054c6:	f107 0208 	add.w	r2, r7, #8
 80054ca:	4610      	mov	r0, r2
 80054cc:	4798      	blx	r3
 80054ce:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80054d0:	e029      	b.n	8005526 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 80054d2:	6839      	ldr	r1, [r7, #0]
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f000 fa09 	bl	80058ec <USBD_CtlError>
      err++;
 80054da:	7afb      	ldrb	r3, [r7, #11]
 80054dc:	3301      	adds	r3, #1
 80054de:	72fb      	strb	r3, [r7, #11]
    break;
 80054e0:	e021      	b.n	8005526 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	7c1b      	ldrb	r3, [r3, #16]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d10d      	bne.n	8005506 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f2:	f107 0208 	add.w	r2, r7, #8
 80054f6:	4610      	mov	r0, r2
 80054f8:	4798      	blx	r3
 80054fa:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	3301      	adds	r3, #1
 8005500:	2207      	movs	r2, #7
 8005502:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8005504:	e00f      	b.n	8005526 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8005506:	6839      	ldr	r1, [r7, #0]
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f000 f9ef 	bl	80058ec <USBD_CtlError>
      err++;
 800550e:	7afb      	ldrb	r3, [r7, #11]
 8005510:	3301      	adds	r3, #1
 8005512:	72fb      	strb	r3, [r7, #11]
    break;
 8005514:	e007      	b.n	8005526 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8005516:	6839      	ldr	r1, [r7, #0]
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f000 f9e7 	bl	80058ec <USBD_CtlError>
    err++;
 800551e:	7afb      	ldrb	r3, [r7, #11]
 8005520:	3301      	adds	r3, #1
 8005522:	72fb      	strb	r3, [r7, #11]
    break;
 8005524:	bf00      	nop
  }

  if (err != 0U)
 8005526:	7afb      	ldrb	r3, [r7, #11]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d11e      	bne.n	800556a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	88db      	ldrh	r3, [r3, #6]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d016      	beq.n	8005562 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8005534:	893b      	ldrh	r3, [r7, #8]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d00e      	beq.n	8005558 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	88da      	ldrh	r2, [r3, #6]
 800553e:	893b      	ldrh	r3, [r7, #8]
 8005540:	4293      	cmp	r3, r2
 8005542:	bf28      	it	cs
 8005544:	4613      	movcs	r3, r2
 8005546:	b29b      	uxth	r3, r3
 8005548:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800554a:	893b      	ldrh	r3, [r7, #8]
 800554c:	461a      	mov	r2, r3
 800554e:	68f9      	ldr	r1, [r7, #12]
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f000 fa3c 	bl	80059ce <USBD_CtlSendData>
 8005556:	e009      	b.n	800556c <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8005558:	6839      	ldr	r1, [r7, #0]
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f000 f9c6 	bl	80058ec <USBD_CtlError>
 8005560:	e004      	b.n	800556c <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f000 fa8d 	bl	8005a82 <USBD_CtlSendStatus>
 8005568:	e000      	b.n	800556c <USBD_GetDescriptor+0x2cc>
    return;
 800556a:	bf00      	nop
    }
  }
}
 800556c:	3710      	adds	r7, #16
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
 8005572:	bf00      	nop

08005574 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b084      	sub	sp, #16
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	889b      	ldrh	r3, [r3, #4]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d130      	bne.n	80055e8 <USBD_SetAddress+0x74>
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	88db      	ldrh	r3, [r3, #6]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d12c      	bne.n	80055e8 <USBD_SetAddress+0x74>
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	885b      	ldrh	r3, [r3, #2]
 8005592:	2b7f      	cmp	r3, #127	; 0x7f
 8005594:	d828      	bhi.n	80055e8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	885b      	ldrh	r3, [r3, #2]
 800559a:	b2db      	uxtb	r3, r3
 800559c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055a0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055a8:	2b03      	cmp	r3, #3
 80055aa:	d104      	bne.n	80055b6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80055ac:	6839      	ldr	r1, [r7, #0]
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 f99c 	bl	80058ec <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055b4:	e01c      	b.n	80055f0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	7bfa      	ldrb	r2, [r7, #15]
 80055ba:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80055be:	7bfb      	ldrb	r3, [r7, #15]
 80055c0:	4619      	mov	r1, r3
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 ff34 	bl	8006430 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f000 fa5a 	bl	8005a82 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80055ce:	7bfb      	ldrb	r3, [r7, #15]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d004      	beq.n	80055de <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2202      	movs	r2, #2
 80055d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055dc:	e008      	b.n	80055f0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2201      	movs	r2, #1
 80055e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055e6:	e003      	b.n	80055f0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80055e8:	6839      	ldr	r1, [r7, #0]
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 f97e 	bl	80058ec <USBD_CtlError>
  }
}
 80055f0:	bf00      	nop
 80055f2:	3710      	adds	r7, #16
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b084      	sub	sp, #16
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005602:	2300      	movs	r3, #0
 8005604:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	885b      	ldrh	r3, [r3, #2]
 800560a:	b2da      	uxtb	r2, r3
 800560c:	4b4b      	ldr	r3, [pc, #300]	; (800573c <USBD_SetConfig+0x144>)
 800560e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005610:	4b4a      	ldr	r3, [pc, #296]	; (800573c <USBD_SetConfig+0x144>)
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	2b01      	cmp	r3, #1
 8005616:	d905      	bls.n	8005624 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005618:	6839      	ldr	r1, [r7, #0]
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f000 f966 	bl	80058ec <USBD_CtlError>
    return USBD_FAIL;
 8005620:	2303      	movs	r3, #3
 8005622:	e087      	b.n	8005734 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800562a:	2b02      	cmp	r3, #2
 800562c:	d002      	beq.n	8005634 <USBD_SetConfig+0x3c>
 800562e:	2b03      	cmp	r3, #3
 8005630:	d025      	beq.n	800567e <USBD_SetConfig+0x86>
 8005632:	e071      	b.n	8005718 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8005634:	4b41      	ldr	r3, [pc, #260]	; (800573c <USBD_SetConfig+0x144>)
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d01c      	beq.n	8005676 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800563c:	4b3f      	ldr	r3, [pc, #252]	; (800573c <USBD_SetConfig+0x144>)
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	461a      	mov	r2, r3
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8005646:	4b3d      	ldr	r3, [pc, #244]	; (800573c <USBD_SetConfig+0x144>)
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	4619      	mov	r1, r3
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f7ff f9a7 	bl	80049a0 <USBD_SetClassConfig>
 8005652:	4603      	mov	r3, r0
 8005654:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8005656:	7bfb      	ldrb	r3, [r7, #15]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d004      	beq.n	8005666 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800565c:	6839      	ldr	r1, [r7, #0]
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f000 f944 	bl	80058ec <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8005664:	e065      	b.n	8005732 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f000 fa0b 	bl	8005a82 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2203      	movs	r2, #3
 8005670:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8005674:	e05d      	b.n	8005732 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f000 fa03 	bl	8005a82 <USBD_CtlSendStatus>
    break;
 800567c:	e059      	b.n	8005732 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800567e:	4b2f      	ldr	r3, [pc, #188]	; (800573c <USBD_SetConfig+0x144>)
 8005680:	781b      	ldrb	r3, [r3, #0]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d112      	bne.n	80056ac <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2202      	movs	r2, #2
 800568a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800568e:	4b2b      	ldr	r3, [pc, #172]	; (800573c <USBD_SetConfig+0x144>)
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	461a      	mov	r2, r3
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005698:	4b28      	ldr	r3, [pc, #160]	; (800573c <USBD_SetConfig+0x144>)
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	4619      	mov	r1, r3
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f7ff f99a 	bl	80049d8 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f000 f9ec 	bl	8005a82 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80056aa:	e042      	b.n	8005732 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 80056ac:	4b23      	ldr	r3, [pc, #140]	; (800573c <USBD_SetConfig+0x144>)
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	461a      	mov	r2, r3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d02a      	beq.n	8005710 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	4619      	mov	r1, r3
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f7ff f988 	bl	80049d8 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 80056c8:	4b1c      	ldr	r3, [pc, #112]	; (800573c <USBD_SetConfig+0x144>)
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	461a      	mov	r2, r3
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80056d2:	4b1a      	ldr	r3, [pc, #104]	; (800573c <USBD_SetConfig+0x144>)
 80056d4:	781b      	ldrb	r3, [r3, #0]
 80056d6:	4619      	mov	r1, r3
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f7ff f961 	bl	80049a0 <USBD_SetClassConfig>
 80056de:	4603      	mov	r3, r0
 80056e0:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 80056e2:	7bfb      	ldrb	r3, [r7, #15]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d00f      	beq.n	8005708 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 80056e8:	6839      	ldr	r1, [r7, #0]
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 f8fe 	bl	80058ec <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	4619      	mov	r1, r3
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f7ff f96d 	bl	80049d8 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2202      	movs	r2, #2
 8005702:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8005706:	e014      	b.n	8005732 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f000 f9ba 	bl	8005a82 <USBD_CtlSendStatus>
    break;
 800570e:	e010      	b.n	8005732 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f000 f9b6 	bl	8005a82 <USBD_CtlSendStatus>
    break;
 8005716:	e00c      	b.n	8005732 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8005718:	6839      	ldr	r1, [r7, #0]
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 f8e6 	bl	80058ec <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005720:	4b06      	ldr	r3, [pc, #24]	; (800573c <USBD_SetConfig+0x144>)
 8005722:	781b      	ldrb	r3, [r3, #0]
 8005724:	4619      	mov	r1, r3
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f7ff f956 	bl	80049d8 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800572c:	2303      	movs	r3, #3
 800572e:	73fb      	strb	r3, [r7, #15]
    break;
 8005730:	bf00      	nop
  }

  return ret;
 8005732:	7bfb      	ldrb	r3, [r7, #15]
}
 8005734:	4618      	mov	r0, r3
 8005736:	3710      	adds	r7, #16
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}
 800573c:	20000220 	.word	0x20000220

08005740 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b082      	sub	sp, #8
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	88db      	ldrh	r3, [r3, #6]
 800574e:	2b01      	cmp	r3, #1
 8005750:	d004      	beq.n	800575c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005752:	6839      	ldr	r1, [r7, #0]
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f000 f8c9 	bl	80058ec <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800575a:	e021      	b.n	80057a0 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005762:	2b01      	cmp	r3, #1
 8005764:	db17      	blt.n	8005796 <USBD_GetConfig+0x56>
 8005766:	2b02      	cmp	r3, #2
 8005768:	dd02      	ble.n	8005770 <USBD_GetConfig+0x30>
 800576a:	2b03      	cmp	r3, #3
 800576c:	d00b      	beq.n	8005786 <USBD_GetConfig+0x46>
 800576e:	e012      	b.n	8005796 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2200      	movs	r2, #0
 8005774:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	3308      	adds	r3, #8
 800577a:	2201      	movs	r2, #1
 800577c:	4619      	mov	r1, r3
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f000 f925 	bl	80059ce <USBD_CtlSendData>
      break;
 8005784:	e00c      	b.n	80057a0 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	3304      	adds	r3, #4
 800578a:	2201      	movs	r2, #1
 800578c:	4619      	mov	r1, r3
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f000 f91d 	bl	80059ce <USBD_CtlSendData>
      break;
 8005794:	e004      	b.n	80057a0 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8005796:	6839      	ldr	r1, [r7, #0]
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f000 f8a7 	bl	80058ec <USBD_CtlError>
      break;
 800579e:	bf00      	nop
}
 80057a0:	bf00      	nop
 80057a2:	3708      	adds	r7, #8
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}

080057a8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b082      	sub	sp, #8
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057b8:	3b01      	subs	r3, #1
 80057ba:	2b02      	cmp	r3, #2
 80057bc:	d81e      	bhi.n	80057fc <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	88db      	ldrh	r3, [r3, #6]
 80057c2:	2b02      	cmp	r3, #2
 80057c4:	d004      	beq.n	80057d0 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80057c6:	6839      	ldr	r1, [r7, #0]
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f000 f88f 	bl	80058ec <USBD_CtlError>
      break;
 80057ce:	e01a      	b.n	8005806 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2201      	movs	r2, #1
 80057d4:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d005      	beq.n	80057ec <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	68db      	ldr	r3, [r3, #12]
 80057e4:	f043 0202 	orr.w	r2, r3, #2
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	330c      	adds	r3, #12
 80057f0:	2202      	movs	r2, #2
 80057f2:	4619      	mov	r1, r3
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f000 f8ea 	bl	80059ce <USBD_CtlSendData>
    break;
 80057fa:	e004      	b.n	8005806 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 80057fc:	6839      	ldr	r1, [r7, #0]
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f000 f874 	bl	80058ec <USBD_CtlError>
    break;
 8005804:	bf00      	nop
  }
}
 8005806:	bf00      	nop
 8005808:	3708      	adds	r7, #8
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}

0800580e <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800580e:	b580      	push	{r7, lr}
 8005810:	b082      	sub	sp, #8
 8005812:	af00      	add	r7, sp, #0
 8005814:	6078      	str	r0, [r7, #4]
 8005816:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	885b      	ldrh	r3, [r3, #2]
 800581c:	2b01      	cmp	r3, #1
 800581e:	d106      	bne.n	800582e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2201      	movs	r2, #1
 8005824:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f000 f92a 	bl	8005a82 <USBD_CtlSendStatus>
  }
}
 800582e:	bf00      	nop
 8005830:	3708      	adds	r7, #8
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}

08005836 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005836:	b580      	push	{r7, lr}
 8005838:	b082      	sub	sp, #8
 800583a:	af00      	add	r7, sp, #0
 800583c:	6078      	str	r0, [r7, #4]
 800583e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005846:	3b01      	subs	r3, #1
 8005848:	2b02      	cmp	r3, #2
 800584a:	d80b      	bhi.n	8005864 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	885b      	ldrh	r3, [r3, #2]
 8005850:	2b01      	cmp	r3, #1
 8005852:	d10c      	bne.n	800586e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2200      	movs	r2, #0
 8005858:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f000 f910 	bl	8005a82 <USBD_CtlSendStatus>
      }
      break;
 8005862:	e004      	b.n	800586e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8005864:	6839      	ldr	r1, [r7, #0]
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f000 f840 	bl	80058ec <USBD_CtlError>
      break;
 800586c:	e000      	b.n	8005870 <USBD_ClrFeature+0x3a>
      break;
 800586e:	bf00      	nop
  }
}
 8005870:	bf00      	nop
 8005872:	3708      	adds	r7, #8
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}

08005878 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	781a      	ldrb	r2, [r3, #0]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	3301      	adds	r3, #1
 8005892:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	781a      	ldrb	r2, [r3, #0]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	3301      	adds	r3, #1
 80058a0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80058a2:	68f8      	ldr	r0, [r7, #12]
 80058a4:	f7ff fad3 	bl	8004e4e <SWAPBYTE>
 80058a8:	4603      	mov	r3, r0
 80058aa:	461a      	mov	r2, r3
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	3301      	adds	r3, #1
 80058b4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	3301      	adds	r3, #1
 80058ba:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80058bc:	68f8      	ldr	r0, [r7, #12]
 80058be:	f7ff fac6 	bl	8004e4e <SWAPBYTE>
 80058c2:	4603      	mov	r3, r0
 80058c4:	461a      	mov	r2, r3
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	3301      	adds	r3, #1
 80058ce:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	3301      	adds	r3, #1
 80058d4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80058d6:	68f8      	ldr	r0, [r7, #12]
 80058d8:	f7ff fab9 	bl	8004e4e <SWAPBYTE>
 80058dc:	4603      	mov	r3, r0
 80058de:	461a      	mov	r2, r3
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	80da      	strh	r2, [r3, #6]
}
 80058e4:	bf00      	nop
 80058e6:	3710      	adds	r7, #16
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}

080058ec <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b082      	sub	sp, #8
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
 80058f4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80058f6:	2180      	movs	r1, #128	; 0x80
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f000 fd2f 	bl	800635c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80058fe:	2100      	movs	r1, #0
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f000 fd2b 	bl	800635c <USBD_LL_StallEP>
}
 8005906:	bf00      	nop
 8005908:	3708      	adds	r7, #8
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}

0800590e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800590e:	b580      	push	{r7, lr}
 8005910:	b086      	sub	sp, #24
 8005912:	af00      	add	r7, sp, #0
 8005914:	60f8      	str	r0, [r7, #12]
 8005916:	60b9      	str	r1, [r7, #8]
 8005918:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800591a:	2300      	movs	r3, #0
 800591c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d036      	beq.n	8005992 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8005928:	6938      	ldr	r0, [r7, #16]
 800592a:	f000 f836 	bl	800599a <USBD_GetLen>
 800592e:	4603      	mov	r3, r0
 8005930:	3301      	adds	r3, #1
 8005932:	b29b      	uxth	r3, r3
 8005934:	005b      	lsls	r3, r3, #1
 8005936:	b29a      	uxth	r2, r3
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800593c:	7dfb      	ldrb	r3, [r7, #23]
 800593e:	68ba      	ldr	r2, [r7, #8]
 8005940:	4413      	add	r3, r2
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	7812      	ldrb	r2, [r2, #0]
 8005946:	701a      	strb	r2, [r3, #0]
  idx++;
 8005948:	7dfb      	ldrb	r3, [r7, #23]
 800594a:	3301      	adds	r3, #1
 800594c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800594e:	7dfb      	ldrb	r3, [r7, #23]
 8005950:	68ba      	ldr	r2, [r7, #8]
 8005952:	4413      	add	r3, r2
 8005954:	2203      	movs	r2, #3
 8005956:	701a      	strb	r2, [r3, #0]
  idx++;
 8005958:	7dfb      	ldrb	r3, [r7, #23]
 800595a:	3301      	adds	r3, #1
 800595c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800595e:	e013      	b.n	8005988 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8005960:	7dfb      	ldrb	r3, [r7, #23]
 8005962:	68ba      	ldr	r2, [r7, #8]
 8005964:	4413      	add	r3, r2
 8005966:	693a      	ldr	r2, [r7, #16]
 8005968:	7812      	ldrb	r2, [r2, #0]
 800596a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	3301      	adds	r3, #1
 8005970:	613b      	str	r3, [r7, #16]
    idx++;
 8005972:	7dfb      	ldrb	r3, [r7, #23]
 8005974:	3301      	adds	r3, #1
 8005976:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8005978:	7dfb      	ldrb	r3, [r7, #23]
 800597a:	68ba      	ldr	r2, [r7, #8]
 800597c:	4413      	add	r3, r2
 800597e:	2200      	movs	r2, #0
 8005980:	701a      	strb	r2, [r3, #0]
    idx++;
 8005982:	7dfb      	ldrb	r3, [r7, #23]
 8005984:	3301      	adds	r3, #1
 8005986:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d1e7      	bne.n	8005960 <USBD_GetString+0x52>
 8005990:	e000      	b.n	8005994 <USBD_GetString+0x86>
    return;
 8005992:	bf00      	nop
  }
}
 8005994:	3718      	adds	r7, #24
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}

0800599a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800599a:	b480      	push	{r7}
 800599c:	b085      	sub	sp, #20
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80059a2:	2300      	movs	r3, #0
 80059a4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80059aa:	e005      	b.n	80059b8 <USBD_GetLen+0x1e>
  {
    len++;
 80059ac:	7bfb      	ldrb	r3, [r7, #15]
 80059ae:	3301      	adds	r3, #1
 80059b0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	3301      	adds	r3, #1
 80059b6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d1f5      	bne.n	80059ac <USBD_GetLen+0x12>
  }

  return len;
 80059c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3714      	adds	r7, #20
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr

080059ce <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80059ce:	b580      	push	{r7, lr}
 80059d0:	b084      	sub	sp, #16
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	60f8      	str	r0, [r7, #12]
 80059d6:	60b9      	str	r1, [r7, #8]
 80059d8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2202      	movs	r2, #2
 80059de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	68ba      	ldr	r2, [r7, #8]
 80059f2:	2100      	movs	r1, #0
 80059f4:	68f8      	ldr	r0, [r7, #12]
 80059f6:	f000 fd3a 	bl	800646e <USBD_LL_Transmit>

  return USBD_OK;
 80059fa:	2300      	movs	r3, #0
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3710      	adds	r7, #16
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	60b9      	str	r1, [r7, #8]
 8005a0e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	68ba      	ldr	r2, [r7, #8]
 8005a14:	2100      	movs	r1, #0
 8005a16:	68f8      	ldr	r0, [r7, #12]
 8005a18:	f000 fd29 	bl	800646e <USBD_LL_Transmit>

  return USBD_OK;
 8005a1c:	2300      	movs	r3, #0
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3710      	adds	r7, #16
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}

08005a26 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8005a26:	b580      	push	{r7, lr}
 8005a28:	b084      	sub	sp, #16
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	60f8      	str	r0, [r7, #12]
 8005a2e:	60b9      	str	r1, [r7, #8]
 8005a30:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2203      	movs	r2, #3
 8005a36:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	687a      	ldr	r2, [r7, #4]
 8005a3e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	68ba      	ldr	r2, [r7, #8]
 8005a4e:	2100      	movs	r1, #0
 8005a50:	68f8      	ldr	r0, [r7, #12]
 8005a52:	f000 fd2d 	bl	80064b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005a56:	2300      	movs	r3, #0
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3710      	adds	r7, #16
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}

08005a60 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b084      	sub	sp, #16
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	60f8      	str	r0, [r7, #12]
 8005a68:	60b9      	str	r1, [r7, #8]
 8005a6a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	68ba      	ldr	r2, [r7, #8]
 8005a70:	2100      	movs	r1, #0
 8005a72:	68f8      	ldr	r0, [r7, #12]
 8005a74:	f000 fd1c 	bl	80064b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005a78:	2300      	movs	r3, #0
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3710      	adds	r7, #16
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}

08005a82 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005a82:	b580      	push	{r7, lr}
 8005a84:	b082      	sub	sp, #8
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2204      	movs	r2, #4
 8005a8e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005a92:	2300      	movs	r3, #0
 8005a94:	2200      	movs	r2, #0
 8005a96:	2100      	movs	r1, #0
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f000 fce8 	bl	800646e <USBD_LL_Transmit>

  return USBD_OK;
 8005a9e:	2300      	movs	r3, #0
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3708      	adds	r7, #8
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}

08005aa8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b082      	sub	sp, #8
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2205      	movs	r2, #5
 8005ab4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005ab8:	2300      	movs	r3, #0
 8005aba:	2200      	movs	r2, #0
 8005abc:	2100      	movs	r1, #0
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 fcf6 	bl	80064b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005ac4:	2300      	movs	r3, #0
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3708      	adds	r7, #8
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
	...

08005ad0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	4912      	ldr	r1, [pc, #72]	; (8005b20 <MX_USB_DEVICE_Init+0x50>)
 8005ad8:	4812      	ldr	r0, [pc, #72]	; (8005b24 <MX_USB_DEVICE_Init+0x54>)
 8005ada:	f7fe fef3 	bl	80048c4 <USBD_Init>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d001      	beq.n	8005ae8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005ae4:	f7fa fe26 	bl	8000734 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8005ae8:	490f      	ldr	r1, [pc, #60]	; (8005b28 <MX_USB_DEVICE_Init+0x58>)
 8005aea:	480e      	ldr	r0, [pc, #56]	; (8005b24 <MX_USB_DEVICE_Init+0x54>)
 8005aec:	f7fe ff20 	bl	8004930 <USBD_RegisterClass>
 8005af0:	4603      	mov	r3, r0
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d001      	beq.n	8005afa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8005af6:	f7fa fe1d 	bl	8000734 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8005afa:	490c      	ldr	r1, [pc, #48]	; (8005b2c <MX_USB_DEVICE_Init+0x5c>)
 8005afc:	4809      	ldr	r0, [pc, #36]	; (8005b24 <MX_USB_DEVICE_Init+0x54>)
 8005afe:	f7fe fe45 	bl	800478c <USBD_CDC_RegisterInterface>
 8005b02:	4603      	mov	r3, r0
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d001      	beq.n	8005b0c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8005b08:	f7fa fe14 	bl	8000734 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005b0c:	4805      	ldr	r0, [pc, #20]	; (8005b24 <MX_USB_DEVICE_Init+0x54>)
 8005b0e:	f7fe ff30 	bl	8004972 <USBD_Start>
 8005b12:	4603      	mov	r3, r0
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d001      	beq.n	8005b1c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8005b18:	f7fa fe0c 	bl	8000734 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005b1c:	bf00      	nop
 8005b1e:	bd80      	pop	{r7, pc}
 8005b20:	2000014c 	.word	0x2000014c
 8005b24:	20000a0c 	.word	0x20000a0c
 8005b28:	2000002c 	.word	0x2000002c
 8005b2c:	20000138 	.word	0x20000138

08005b30 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8005b34:	2200      	movs	r2, #0
 8005b36:	4905      	ldr	r1, [pc, #20]	; (8005b4c <CDC_Init_FS+0x1c>)
 8005b38:	4805      	ldr	r0, [pc, #20]	; (8005b50 <CDC_Init_FS+0x20>)
 8005b3a:	f7fe fe3c 	bl	80047b6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8005b3e:	4905      	ldr	r1, [pc, #20]	; (8005b54 <CDC_Init_FS+0x24>)
 8005b40:	4803      	ldr	r0, [pc, #12]	; (8005b50 <CDC_Init_FS+0x20>)
 8005b42:	f7fe fe51 	bl	80047e8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8005b46:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	bd80      	pop	{r7, pc}
 8005b4c:	200014dc 	.word	0x200014dc
 8005b50:	20000a0c 	.word	0x20000a0c
 8005b54:	20000cdc 	.word	0x20000cdc

08005b58 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8005b5c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr

08005b68 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b083      	sub	sp, #12
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	4603      	mov	r3, r0
 8005b70:	6039      	str	r1, [r7, #0]
 8005b72:	71fb      	strb	r3, [r7, #7]
 8005b74:	4613      	mov	r3, r2
 8005b76:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8005b78:	79fb      	ldrb	r3, [r7, #7]
 8005b7a:	2b23      	cmp	r3, #35	; 0x23
 8005b7c:	f200 8098 	bhi.w	8005cb0 <CDC_Control_FS+0x148>
 8005b80:	a201      	add	r2, pc, #4	; (adr r2, 8005b88 <CDC_Control_FS+0x20>)
 8005b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b86:	bf00      	nop
 8005b88:	08005cb1 	.word	0x08005cb1
 8005b8c:	08005cb1 	.word	0x08005cb1
 8005b90:	08005cb1 	.word	0x08005cb1
 8005b94:	08005cb1 	.word	0x08005cb1
 8005b98:	08005cb1 	.word	0x08005cb1
 8005b9c:	08005cb1 	.word	0x08005cb1
 8005ba0:	08005cb1 	.word	0x08005cb1
 8005ba4:	08005cb1 	.word	0x08005cb1
 8005ba8:	08005cb1 	.word	0x08005cb1
 8005bac:	08005cb1 	.word	0x08005cb1
 8005bb0:	08005cb1 	.word	0x08005cb1
 8005bb4:	08005cb1 	.word	0x08005cb1
 8005bb8:	08005cb1 	.word	0x08005cb1
 8005bbc:	08005cb1 	.word	0x08005cb1
 8005bc0:	08005cb1 	.word	0x08005cb1
 8005bc4:	08005cb1 	.word	0x08005cb1
 8005bc8:	08005cb1 	.word	0x08005cb1
 8005bcc:	08005cb1 	.word	0x08005cb1
 8005bd0:	08005cb1 	.word	0x08005cb1
 8005bd4:	08005cb1 	.word	0x08005cb1
 8005bd8:	08005cb1 	.word	0x08005cb1
 8005bdc:	08005cb1 	.word	0x08005cb1
 8005be0:	08005cb1 	.word	0x08005cb1
 8005be4:	08005cb1 	.word	0x08005cb1
 8005be8:	08005cb1 	.word	0x08005cb1
 8005bec:	08005cb1 	.word	0x08005cb1
 8005bf0:	08005cb1 	.word	0x08005cb1
 8005bf4:	08005cb1 	.word	0x08005cb1
 8005bf8:	08005cb1 	.word	0x08005cb1
 8005bfc:	08005cb1 	.word	0x08005cb1
 8005c00:	08005cb1 	.word	0x08005cb1
 8005c04:	08005cb1 	.word	0x08005cb1
 8005c08:	08005c19 	.word	0x08005c19
 8005c0c:	08005c5d 	.word	0x08005c5d
 8005c10:	08005cb1 	.word	0x08005cb1
 8005c14:	08005cb1 	.word	0x08005cb1
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	3301      	adds	r3, #1
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	021b      	lsls	r3, r3, #8
 8005c26:	431a      	orrs	r2, r3
    									 (pbuf[2] << 16) | (pbuf[3] << 24));
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	3302      	adds	r3, #2
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	041b      	lsls	r3, r3, #16
    	LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 8005c30:	431a      	orrs	r2, r3
    									 (pbuf[2] << 16) | (pbuf[3] << 24));
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	3303      	adds	r3, #3
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	061b      	lsls	r3, r3, #24
 8005c3a:	4313      	orrs	r3, r2
    	LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	4b20      	ldr	r3, [pc, #128]	; (8005cc0 <CDC_Control_FS+0x158>)
 8005c40:	601a      	str	r2, [r3, #0]
    			LineCoding.format     = pbuf[4];
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	791a      	ldrb	r2, [r3, #4]
 8005c46:	4b1e      	ldr	r3, [pc, #120]	; (8005cc0 <CDC_Control_FS+0x158>)
 8005c48:	711a      	strb	r2, [r3, #4]
    			LineCoding.paritytype = pbuf[5];
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	795a      	ldrb	r2, [r3, #5]
 8005c4e:	4b1c      	ldr	r3, [pc, #112]	; (8005cc0 <CDC_Control_FS+0x158>)
 8005c50:	715a      	strb	r2, [r3, #5]
    			LineCoding.datatype   = pbuf[6];
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	799a      	ldrb	r2, [r3, #6]
 8005c56:	4b1a      	ldr	r3, [pc, #104]	; (8005cc0 <CDC_Control_FS+0x158>)
 8005c58:	719a      	strb	r2, [r3, #6]

    break;
 8005c5a:	e02a      	b.n	8005cb2 <CDC_Control_FS+0x14a>

    case CDC_GET_LINE_CODING:

    	pbuf[0] = (uint8_t)(LineCoding.bitrate);
 8005c5c:	4b18      	ldr	r3, [pc, #96]	; (8005cc0 <CDC_Control_FS+0x158>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	b2da      	uxtb	r2, r3
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	701a      	strb	r2, [r3, #0]
    			pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 8005c66:	4b16      	ldr	r3, [pc, #88]	; (8005cc0 <CDC_Control_FS+0x158>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	0a1a      	lsrs	r2, r3, #8
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	3301      	adds	r3, #1
 8005c70:	b2d2      	uxtb	r2, r2
 8005c72:	701a      	strb	r2, [r3, #0]
    			pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 8005c74:	4b12      	ldr	r3, [pc, #72]	; (8005cc0 <CDC_Control_FS+0x158>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	0c1a      	lsrs	r2, r3, #16
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	3302      	adds	r3, #2
 8005c7e:	b2d2      	uxtb	r2, r2
 8005c80:	701a      	strb	r2, [r3, #0]
    			pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 8005c82:	4b0f      	ldr	r3, [pc, #60]	; (8005cc0 <CDC_Control_FS+0x158>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	0e1a      	lsrs	r2, r3, #24
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	3303      	adds	r3, #3
 8005c8c:	b2d2      	uxtb	r2, r2
 8005c8e:	701a      	strb	r2, [r3, #0]
    			pbuf[4] = LineCoding.format;
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	3304      	adds	r3, #4
 8005c94:	4a0a      	ldr	r2, [pc, #40]	; (8005cc0 <CDC_Control_FS+0x158>)
 8005c96:	7912      	ldrb	r2, [r2, #4]
 8005c98:	701a      	strb	r2, [r3, #0]
    			pbuf[5] = LineCoding.paritytype;
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	3305      	adds	r3, #5
 8005c9e:	4a08      	ldr	r2, [pc, #32]	; (8005cc0 <CDC_Control_FS+0x158>)
 8005ca0:	7952      	ldrb	r2, [r2, #5]
 8005ca2:	701a      	strb	r2, [r3, #0]
    			pbuf[6] = LineCoding.datatype;
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	3306      	adds	r3, #6
 8005ca8:	4a05      	ldr	r2, [pc, #20]	; (8005cc0 <CDC_Control_FS+0x158>)
 8005caa:	7992      	ldrb	r2, [r2, #6]
 8005cac:	701a      	strb	r2, [r3, #0]

    break;
 8005cae:	e000      	b.n	8005cb2 <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8005cb0:	bf00      	nop
  }

  return (USBD_OK);
 8005cb2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	370c      	adds	r7, #12
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr
 8005cc0:	20000130 	.word	0x20000130

08005cc4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b082      	sub	sp, #8
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8005cce:	6879      	ldr	r1, [r7, #4]
 8005cd0:	4805      	ldr	r0, [pc, #20]	; (8005ce8 <CDC_Receive_FS+0x24>)
 8005cd2:	f7fe fd89 	bl	80047e8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8005cd6:	4804      	ldr	r0, [pc, #16]	; (8005ce8 <CDC_Receive_FS+0x24>)
 8005cd8:	f7fe fdca 	bl	8004870 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8005cdc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3708      	adds	r7, #8
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
 8005ce6:	bf00      	nop
 8005ce8:	20000a0c 	.word	0x20000a0c

08005cec <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b084      	sub	sp, #16
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	460b      	mov	r3, r1
 8005cf6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8005cfc:	4b0d      	ldr	r3, [pc, #52]	; (8005d34 <CDC_Transmit_FS+0x48>)
 8005cfe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d02:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d001      	beq.n	8005d12 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e00b      	b.n	8005d2a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8005d12:	887b      	ldrh	r3, [r7, #2]
 8005d14:	461a      	mov	r2, r3
 8005d16:	6879      	ldr	r1, [r7, #4]
 8005d18:	4806      	ldr	r0, [pc, #24]	; (8005d34 <CDC_Transmit_FS+0x48>)
 8005d1a:	f7fe fd4c 	bl	80047b6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8005d1e:	4805      	ldr	r0, [pc, #20]	; (8005d34 <CDC_Transmit_FS+0x48>)
 8005d20:	f7fe fd76 	bl	8004810 <USBD_CDC_TransmitPacket>
 8005d24:	4603      	mov	r3, r0
 8005d26:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8005d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3710      	adds	r7, #16
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}
 8005d32:	bf00      	nop
 8005d34:	20000a0c 	.word	0x20000a0c

08005d38 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b086      	sub	sp, #24
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	60f8      	str	r0, [r7, #12]
 8005d40:	60b9      	str	r1, [r7, #8]
 8005d42:	4613      	mov	r3, r2
 8005d44:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8005d46:	2300      	movs	r3, #0
 8005d48:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  mynonstatictxcomplete();
 8005d4a:	f7fa fccf 	bl	80006ec <mynonstatictxcomplete>
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8005d4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3718      	adds	r7, #24
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}
	...

08005d5c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b083      	sub	sp, #12
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	4603      	mov	r3, r0
 8005d64:	6039      	str	r1, [r7, #0]
 8005d66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	2212      	movs	r2, #18
 8005d6c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8005d6e:	4b03      	ldr	r3, [pc, #12]	; (8005d7c <USBD_FS_DeviceDescriptor+0x20>)
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	370c      	adds	r7, #12
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr
 8005d7c:	20000168 	.word	0x20000168

08005d80 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b083      	sub	sp, #12
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	4603      	mov	r3, r0
 8005d88:	6039      	str	r1, [r7, #0]
 8005d8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	2204      	movs	r2, #4
 8005d90:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8005d92:	4b03      	ldr	r3, [pc, #12]	; (8005da0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	370c      	adds	r7, #12
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr
 8005da0:	2000017c 	.word	0x2000017c

08005da4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b082      	sub	sp, #8
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	4603      	mov	r3, r0
 8005dac:	6039      	str	r1, [r7, #0]
 8005dae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005db0:	79fb      	ldrb	r3, [r7, #7]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d105      	bne.n	8005dc2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005db6:	683a      	ldr	r2, [r7, #0]
 8005db8:	4907      	ldr	r1, [pc, #28]	; (8005dd8 <USBD_FS_ProductStrDescriptor+0x34>)
 8005dba:	4808      	ldr	r0, [pc, #32]	; (8005ddc <USBD_FS_ProductStrDescriptor+0x38>)
 8005dbc:	f7ff fda7 	bl	800590e <USBD_GetString>
 8005dc0:	e004      	b.n	8005dcc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005dc2:	683a      	ldr	r2, [r7, #0]
 8005dc4:	4904      	ldr	r1, [pc, #16]	; (8005dd8 <USBD_FS_ProductStrDescriptor+0x34>)
 8005dc6:	4805      	ldr	r0, [pc, #20]	; (8005ddc <USBD_FS_ProductStrDescriptor+0x38>)
 8005dc8:	f7ff fda1 	bl	800590e <USBD_GetString>
  }
  return USBD_StrDesc;
 8005dcc:	4b02      	ldr	r3, [pc, #8]	; (8005dd8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3708      	adds	r7, #8
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
 8005dd6:	bf00      	nop
 8005dd8:	20001cdc 	.word	0x20001cdc
 8005ddc:	080067a8 	.word	0x080067a8

08005de0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b082      	sub	sp, #8
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	4603      	mov	r3, r0
 8005de8:	6039      	str	r1, [r7, #0]
 8005dea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005dec:	683a      	ldr	r2, [r7, #0]
 8005dee:	4904      	ldr	r1, [pc, #16]	; (8005e00 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8005df0:	4804      	ldr	r0, [pc, #16]	; (8005e04 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8005df2:	f7ff fd8c 	bl	800590e <USBD_GetString>
  return USBD_StrDesc;
 8005df6:	4b02      	ldr	r3, [pc, #8]	; (8005e00 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3708      	adds	r7, #8
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}
 8005e00:	20001cdc 	.word	0x20001cdc
 8005e04:	080067c0 	.word	0x080067c0

08005e08 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b082      	sub	sp, #8
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	4603      	mov	r3, r0
 8005e10:	6039      	str	r1, [r7, #0]
 8005e12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	221a      	movs	r2, #26
 8005e18:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8005e1a:	f000 f843 	bl	8005ea4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8005e1e:	4b02      	ldr	r3, [pc, #8]	; (8005e28 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3708      	adds	r7, #8
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}
 8005e28:	20000180 	.word	0x20000180

08005e2c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b082      	sub	sp, #8
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	4603      	mov	r3, r0
 8005e34:	6039      	str	r1, [r7, #0]
 8005e36:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8005e38:	79fb      	ldrb	r3, [r7, #7]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d105      	bne.n	8005e4a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005e3e:	683a      	ldr	r2, [r7, #0]
 8005e40:	4907      	ldr	r1, [pc, #28]	; (8005e60 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005e42:	4808      	ldr	r0, [pc, #32]	; (8005e64 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005e44:	f7ff fd63 	bl	800590e <USBD_GetString>
 8005e48:	e004      	b.n	8005e54 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005e4a:	683a      	ldr	r2, [r7, #0]
 8005e4c:	4904      	ldr	r1, [pc, #16]	; (8005e60 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005e4e:	4805      	ldr	r0, [pc, #20]	; (8005e64 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005e50:	f7ff fd5d 	bl	800590e <USBD_GetString>
  }
  return USBD_StrDesc;
 8005e54:	4b02      	ldr	r3, [pc, #8]	; (8005e60 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3708      	adds	r7, #8
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
 8005e5e:	bf00      	nop
 8005e60:	20001cdc 	.word	0x20001cdc
 8005e64:	080067d4 	.word	0x080067d4

08005e68 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b082      	sub	sp, #8
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	4603      	mov	r3, r0
 8005e70:	6039      	str	r1, [r7, #0]
 8005e72:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005e74:	79fb      	ldrb	r3, [r7, #7]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d105      	bne.n	8005e86 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005e7a:	683a      	ldr	r2, [r7, #0]
 8005e7c:	4907      	ldr	r1, [pc, #28]	; (8005e9c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005e7e:	4808      	ldr	r0, [pc, #32]	; (8005ea0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005e80:	f7ff fd45 	bl	800590e <USBD_GetString>
 8005e84:	e004      	b.n	8005e90 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005e86:	683a      	ldr	r2, [r7, #0]
 8005e88:	4904      	ldr	r1, [pc, #16]	; (8005e9c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005e8a:	4805      	ldr	r0, [pc, #20]	; (8005ea0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005e8c:	f7ff fd3f 	bl	800590e <USBD_GetString>
  }
  return USBD_StrDesc;
 8005e90:	4b02      	ldr	r3, [pc, #8]	; (8005e9c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3708      	adds	r7, #8
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
 8005e9a:	bf00      	nop
 8005e9c:	20001cdc 	.word	0x20001cdc
 8005ea0:	080067e0 	.word	0x080067e0

08005ea4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b084      	sub	sp, #16
 8005ea8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005eaa:	4b0f      	ldr	r3, [pc, #60]	; (8005ee8 <Get_SerialNum+0x44>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005eb0:	4b0e      	ldr	r3, [pc, #56]	; (8005eec <Get_SerialNum+0x48>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8005eb6:	4b0e      	ldr	r3, [pc, #56]	; (8005ef0 <Get_SerialNum+0x4c>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8005ebc:	68fa      	ldr	r2, [r7, #12]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	4413      	add	r3, r2
 8005ec2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d009      	beq.n	8005ede <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005eca:	2208      	movs	r2, #8
 8005ecc:	4909      	ldr	r1, [pc, #36]	; (8005ef4 <Get_SerialNum+0x50>)
 8005ece:	68f8      	ldr	r0, [r7, #12]
 8005ed0:	f000 f814 	bl	8005efc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8005ed4:	2204      	movs	r2, #4
 8005ed6:	4908      	ldr	r1, [pc, #32]	; (8005ef8 <Get_SerialNum+0x54>)
 8005ed8:	68b8      	ldr	r0, [r7, #8]
 8005eda:	f000 f80f 	bl	8005efc <IntToUnicode>
  }
}
 8005ede:	bf00      	nop
 8005ee0:	3710      	adds	r7, #16
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}
 8005ee6:	bf00      	nop
 8005ee8:	1fff7a10 	.word	0x1fff7a10
 8005eec:	1fff7a14 	.word	0x1fff7a14
 8005ef0:	1fff7a18 	.word	0x1fff7a18
 8005ef4:	20000182 	.word	0x20000182
 8005ef8:	20000192 	.word	0x20000192

08005efc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b087      	sub	sp, #28
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	60f8      	str	r0, [r7, #12]
 8005f04:	60b9      	str	r1, [r7, #8]
 8005f06:	4613      	mov	r3, r2
 8005f08:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8005f0e:	2300      	movs	r3, #0
 8005f10:	75fb      	strb	r3, [r7, #23]
 8005f12:	e027      	b.n	8005f64 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	0f1b      	lsrs	r3, r3, #28
 8005f18:	2b09      	cmp	r3, #9
 8005f1a:	d80b      	bhi.n	8005f34 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	0f1b      	lsrs	r3, r3, #28
 8005f20:	b2da      	uxtb	r2, r3
 8005f22:	7dfb      	ldrb	r3, [r7, #23]
 8005f24:	005b      	lsls	r3, r3, #1
 8005f26:	4619      	mov	r1, r3
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	440b      	add	r3, r1
 8005f2c:	3230      	adds	r2, #48	; 0x30
 8005f2e:	b2d2      	uxtb	r2, r2
 8005f30:	701a      	strb	r2, [r3, #0]
 8005f32:	e00a      	b.n	8005f4a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	0f1b      	lsrs	r3, r3, #28
 8005f38:	b2da      	uxtb	r2, r3
 8005f3a:	7dfb      	ldrb	r3, [r7, #23]
 8005f3c:	005b      	lsls	r3, r3, #1
 8005f3e:	4619      	mov	r1, r3
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	440b      	add	r3, r1
 8005f44:	3237      	adds	r2, #55	; 0x37
 8005f46:	b2d2      	uxtb	r2, r2
 8005f48:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	011b      	lsls	r3, r3, #4
 8005f4e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8005f50:	7dfb      	ldrb	r3, [r7, #23]
 8005f52:	005b      	lsls	r3, r3, #1
 8005f54:	3301      	adds	r3, #1
 8005f56:	68ba      	ldr	r2, [r7, #8]
 8005f58:	4413      	add	r3, r2
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8005f5e:	7dfb      	ldrb	r3, [r7, #23]
 8005f60:	3301      	adds	r3, #1
 8005f62:	75fb      	strb	r3, [r7, #23]
 8005f64:	7dfa      	ldrb	r2, [r7, #23]
 8005f66:	79fb      	ldrb	r3, [r7, #7]
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d3d3      	bcc.n	8005f14 <IntToUnicode+0x18>
  }
}
 8005f6c:	bf00      	nop
 8005f6e:	371c      	adds	r7, #28
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr

08005f78 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b08a      	sub	sp, #40	; 0x28
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f80:	f107 0314 	add.w	r3, r7, #20
 8005f84:	2200      	movs	r2, #0
 8005f86:	601a      	str	r2, [r3, #0]
 8005f88:	605a      	str	r2, [r3, #4]
 8005f8a:	609a      	str	r2, [r3, #8]
 8005f8c:	60da      	str	r2, [r3, #12]
 8005f8e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005f98:	d13a      	bne.n	8006010 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	613b      	str	r3, [r7, #16]
 8005f9e:	4b1e      	ldr	r3, [pc, #120]	; (8006018 <HAL_PCD_MspInit+0xa0>)
 8005fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fa2:	4a1d      	ldr	r2, [pc, #116]	; (8006018 <HAL_PCD_MspInit+0xa0>)
 8005fa4:	f043 0301 	orr.w	r3, r3, #1
 8005fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8005faa:	4b1b      	ldr	r3, [pc, #108]	; (8006018 <HAL_PCD_MspInit+0xa0>)
 8005fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fae:	f003 0301 	and.w	r3, r3, #1
 8005fb2:	613b      	str	r3, [r7, #16]
 8005fb4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005fb6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8005fba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fbc:	2302      	movs	r3, #2
 8005fbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005fc4:	2303      	movs	r3, #3
 8005fc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005fc8:	230a      	movs	r3, #10
 8005fca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005fcc:	f107 0314 	add.w	r3, r7, #20
 8005fd0:	4619      	mov	r1, r3
 8005fd2:	4812      	ldr	r0, [pc, #72]	; (800601c <HAL_PCD_MspInit+0xa4>)
 8005fd4:	f7fa fef2 	bl	8000dbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8005fd8:	4b0f      	ldr	r3, [pc, #60]	; (8006018 <HAL_PCD_MspInit+0xa0>)
 8005fda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fdc:	4a0e      	ldr	r2, [pc, #56]	; (8006018 <HAL_PCD_MspInit+0xa0>)
 8005fde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fe2:	6353      	str	r3, [r2, #52]	; 0x34
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	60fb      	str	r3, [r7, #12]
 8005fe8:	4b0b      	ldr	r3, [pc, #44]	; (8006018 <HAL_PCD_MspInit+0xa0>)
 8005fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fec:	4a0a      	ldr	r2, [pc, #40]	; (8006018 <HAL_PCD_MspInit+0xa0>)
 8005fee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005ff2:	6453      	str	r3, [r2, #68]	; 0x44
 8005ff4:	4b08      	ldr	r3, [pc, #32]	; (8006018 <HAL_PCD_MspInit+0xa0>)
 8005ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ff8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ffc:	60fb      	str	r3, [r7, #12]
 8005ffe:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006000:	2200      	movs	r2, #0
 8006002:	2100      	movs	r1, #0
 8006004:	2043      	movs	r0, #67	; 0x43
 8006006:	f7fa fea2 	bl	8000d4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800600a:	2043      	movs	r0, #67	; 0x43
 800600c:	f7fa febb 	bl	8000d86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006010:	bf00      	nop
 8006012:	3728      	adds	r7, #40	; 0x28
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}
 8006018:	40023800 	.word	0x40023800
 800601c:	40020000 	.word	0x40020000

08006020 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b082      	sub	sp, #8
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006034:	4619      	mov	r1, r3
 8006036:	4610      	mov	r0, r2
 8006038:	f7fe fce6 	bl	8004a08 <USBD_LL_SetupStage>
}
 800603c:	bf00      	nop
 800603e:	3708      	adds	r7, #8
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}

08006044 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b082      	sub	sp, #8
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	460b      	mov	r3, r1
 800604e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006056:	78fa      	ldrb	r2, [r7, #3]
 8006058:	6879      	ldr	r1, [r7, #4]
 800605a:	4613      	mov	r3, r2
 800605c:	00db      	lsls	r3, r3, #3
 800605e:	1a9b      	subs	r3, r3, r2
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	440b      	add	r3, r1
 8006064:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	78fb      	ldrb	r3, [r7, #3]
 800606c:	4619      	mov	r1, r3
 800606e:	f7fe fd1e 	bl	8004aae <USBD_LL_DataOutStage>
}
 8006072:	bf00      	nop
 8006074:	3708      	adds	r7, #8
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}

0800607a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800607a:	b580      	push	{r7, lr}
 800607c:	b082      	sub	sp, #8
 800607e:	af00      	add	r7, sp, #0
 8006080:	6078      	str	r0, [r7, #4]
 8006082:	460b      	mov	r3, r1
 8006084:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800608c:	78fa      	ldrb	r2, [r7, #3]
 800608e:	6879      	ldr	r1, [r7, #4]
 8006090:	4613      	mov	r3, r2
 8006092:	00db      	lsls	r3, r3, #3
 8006094:	1a9b      	subs	r3, r3, r2
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	440b      	add	r3, r1
 800609a:	3348      	adds	r3, #72	; 0x48
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	78fb      	ldrb	r3, [r7, #3]
 80060a0:	4619      	mov	r1, r3
 80060a2:	f7fe fd67 	bl	8004b74 <USBD_LL_DataInStage>
}
 80060a6:	bf00      	nop
 80060a8:	3708      	adds	r7, #8
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}

080060ae <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80060ae:	b580      	push	{r7, lr}
 80060b0:	b082      	sub	sp, #8
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80060bc:	4618      	mov	r0, r3
 80060be:	f7fe fe6b 	bl	8004d98 <USBD_LL_SOF>
}
 80060c2:	bf00      	nop
 80060c4:	3708      	adds	r7, #8
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}

080060ca <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80060ca:	b580      	push	{r7, lr}
 80060cc:	b084      	sub	sp, #16
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80060d2:	2301      	movs	r3, #1
 80060d4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	68db      	ldr	r3, [r3, #12]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d102      	bne.n	80060e4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80060de:	2300      	movs	r3, #0
 80060e0:	73fb      	strb	r3, [r7, #15]
 80060e2:	e008      	b.n	80060f6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	2b02      	cmp	r3, #2
 80060ea:	d102      	bne.n	80060f2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80060ec:	2301      	movs	r3, #1
 80060ee:	73fb      	strb	r3, [r7, #15]
 80060f0:	e001      	b.n	80060f6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80060f2:	f7fa fb1f 	bl	8000734 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80060fc:	7bfa      	ldrb	r2, [r7, #15]
 80060fe:	4611      	mov	r1, r2
 8006100:	4618      	mov	r0, r3
 8006102:	f7fe fe0e 	bl	8004d22 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800610c:	4618      	mov	r0, r3
 800610e:	f7fe fdc7 	bl	8004ca0 <USBD_LL_Reset>
}
 8006112:	bf00      	nop
 8006114:	3710      	adds	r7, #16
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
	...

0800611c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b082      	sub	sp, #8
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800612a:	4618      	mov	r0, r3
 800612c:	f7fe fe09 	bl	8004d42 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	6812      	ldr	r2, [r2, #0]
 800613e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006142:	f043 0301 	orr.w	r3, r3, #1
 8006146:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6a1b      	ldr	r3, [r3, #32]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d005      	beq.n	800615c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006150:	4b04      	ldr	r3, [pc, #16]	; (8006164 <HAL_PCD_SuspendCallback+0x48>)
 8006152:	691b      	ldr	r3, [r3, #16]
 8006154:	4a03      	ldr	r2, [pc, #12]	; (8006164 <HAL_PCD_SuspendCallback+0x48>)
 8006156:	f043 0306 	orr.w	r3, r3, #6
 800615a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800615c:	bf00      	nop
 800615e:	3708      	adds	r7, #8
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}
 8006164:	e000ed00 	.word	0xe000ed00

08006168 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b082      	sub	sp, #8
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006176:	4618      	mov	r0, r3
 8006178:	f7fe fdf8 	bl	8004d6c <USBD_LL_Resume>
}
 800617c:	bf00      	nop
 800617e:	3708      	adds	r7, #8
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}

08006184 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b082      	sub	sp, #8
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	460b      	mov	r3, r1
 800618e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006196:	78fa      	ldrb	r2, [r7, #3]
 8006198:	4611      	mov	r1, r2
 800619a:	4618      	mov	r0, r3
 800619c:	f7fe fe23 	bl	8004de6 <USBD_LL_IsoOUTIncomplete>
}
 80061a0:	bf00      	nop
 80061a2:	3708      	adds	r7, #8
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}

080061a8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b082      	sub	sp, #8
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	460b      	mov	r3, r1
 80061b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80061ba:	78fa      	ldrb	r2, [r7, #3]
 80061bc:	4611      	mov	r1, r2
 80061be:	4618      	mov	r0, r3
 80061c0:	f7fe fe04 	bl	8004dcc <USBD_LL_IsoINIncomplete>
}
 80061c4:	bf00      	nop
 80061c6:	3708      	adds	r7, #8
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}

080061cc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b082      	sub	sp, #8
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80061da:	4618      	mov	r0, r3
 80061dc:	f7fe fe10 	bl	8004e00 <USBD_LL_DevConnected>
}
 80061e0:	bf00      	nop
 80061e2:	3708      	adds	r7, #8
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}

080061e8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b082      	sub	sp, #8
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80061f6:	4618      	mov	r0, r3
 80061f8:	f7fe fe0d 	bl	8004e16 <USBD_LL_DevDisconnected>
}
 80061fc:	bf00      	nop
 80061fe:	3708      	adds	r7, #8
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}

08006204 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b082      	sub	sp, #8
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	781b      	ldrb	r3, [r3, #0]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d13c      	bne.n	800628e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006214:	4a20      	ldr	r2, [pc, #128]	; (8006298 <USBD_LL_Init+0x94>)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	4a1e      	ldr	r2, [pc, #120]	; (8006298 <USBD_LL_Init+0x94>)
 8006220:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006224:	4b1c      	ldr	r3, [pc, #112]	; (8006298 <USBD_LL_Init+0x94>)
 8006226:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800622a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800622c:	4b1a      	ldr	r3, [pc, #104]	; (8006298 <USBD_LL_Init+0x94>)
 800622e:	2204      	movs	r2, #4
 8006230:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006232:	4b19      	ldr	r3, [pc, #100]	; (8006298 <USBD_LL_Init+0x94>)
 8006234:	2202      	movs	r2, #2
 8006236:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006238:	4b17      	ldr	r3, [pc, #92]	; (8006298 <USBD_LL_Init+0x94>)
 800623a:	2200      	movs	r2, #0
 800623c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800623e:	4b16      	ldr	r3, [pc, #88]	; (8006298 <USBD_LL_Init+0x94>)
 8006240:	2202      	movs	r2, #2
 8006242:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006244:	4b14      	ldr	r3, [pc, #80]	; (8006298 <USBD_LL_Init+0x94>)
 8006246:	2200      	movs	r2, #0
 8006248:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800624a:	4b13      	ldr	r3, [pc, #76]	; (8006298 <USBD_LL_Init+0x94>)
 800624c:	2200      	movs	r2, #0
 800624e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006250:	4b11      	ldr	r3, [pc, #68]	; (8006298 <USBD_LL_Init+0x94>)
 8006252:	2200      	movs	r2, #0
 8006254:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006256:	4b10      	ldr	r3, [pc, #64]	; (8006298 <USBD_LL_Init+0x94>)
 8006258:	2200      	movs	r2, #0
 800625a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800625c:	4b0e      	ldr	r3, [pc, #56]	; (8006298 <USBD_LL_Init+0x94>)
 800625e:	2200      	movs	r2, #0
 8006260:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006262:	480d      	ldr	r0, [pc, #52]	; (8006298 <USBD_LL_Init+0x94>)
 8006264:	f7fa ff44 	bl	80010f0 <HAL_PCD_Init>
 8006268:	4603      	mov	r3, r0
 800626a:	2b00      	cmp	r3, #0
 800626c:	d001      	beq.n	8006272 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800626e:	f7fa fa61 	bl	8000734 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006272:	2180      	movs	r1, #128	; 0x80
 8006274:	4808      	ldr	r0, [pc, #32]	; (8006298 <USBD_LL_Init+0x94>)
 8006276:	f7fc f8a2 	bl	80023be <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800627a:	2240      	movs	r2, #64	; 0x40
 800627c:	2100      	movs	r1, #0
 800627e:	4806      	ldr	r0, [pc, #24]	; (8006298 <USBD_LL_Init+0x94>)
 8006280:	f7fc f856 	bl	8002330 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006284:	2280      	movs	r2, #128	; 0x80
 8006286:	2101      	movs	r1, #1
 8006288:	4803      	ldr	r0, [pc, #12]	; (8006298 <USBD_LL_Init+0x94>)
 800628a:	f7fc f851 	bl	8002330 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800628e:	2300      	movs	r3, #0
}
 8006290:	4618      	mov	r0, r3
 8006292:	3708      	adds	r7, #8
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}
 8006298:	20001edc 	.word	0x20001edc

0800629c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b084      	sub	sp, #16
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80062a4:	2300      	movs	r3, #0
 80062a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80062a8:	2300      	movs	r3, #0
 80062aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80062b2:	4618      	mov	r0, r3
 80062b4:	f7fb f839 	bl	800132a <HAL_PCD_Start>
 80062b8:	4603      	mov	r3, r0
 80062ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80062bc:	7bfb      	ldrb	r3, [r7, #15]
 80062be:	4618      	mov	r0, r3
 80062c0:	f000 f92a 	bl	8006518 <USBD_Get_USB_Status>
 80062c4:	4603      	mov	r3, r0
 80062c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80062c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3710      	adds	r7, #16
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}

080062d2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80062d2:	b580      	push	{r7, lr}
 80062d4:	b084      	sub	sp, #16
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	6078      	str	r0, [r7, #4]
 80062da:	4608      	mov	r0, r1
 80062dc:	4611      	mov	r1, r2
 80062de:	461a      	mov	r2, r3
 80062e0:	4603      	mov	r3, r0
 80062e2:	70fb      	strb	r3, [r7, #3]
 80062e4:	460b      	mov	r3, r1
 80062e6:	70bb      	strb	r3, [r7, #2]
 80062e8:	4613      	mov	r3, r2
 80062ea:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80062ec:	2300      	movs	r3, #0
 80062ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80062f0:	2300      	movs	r3, #0
 80062f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80062fa:	78bb      	ldrb	r3, [r7, #2]
 80062fc:	883a      	ldrh	r2, [r7, #0]
 80062fe:	78f9      	ldrb	r1, [r7, #3]
 8006300:	f7fb fc1d 	bl	8001b3e <HAL_PCD_EP_Open>
 8006304:	4603      	mov	r3, r0
 8006306:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006308:	7bfb      	ldrb	r3, [r7, #15]
 800630a:	4618      	mov	r0, r3
 800630c:	f000 f904 	bl	8006518 <USBD_Get_USB_Status>
 8006310:	4603      	mov	r3, r0
 8006312:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006314:	7bbb      	ldrb	r3, [r7, #14]
}
 8006316:	4618      	mov	r0, r3
 8006318:	3710      	adds	r7, #16
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}

0800631e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800631e:	b580      	push	{r7, lr}
 8006320:	b084      	sub	sp, #16
 8006322:	af00      	add	r7, sp, #0
 8006324:	6078      	str	r0, [r7, #4]
 8006326:	460b      	mov	r3, r1
 8006328:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800632a:	2300      	movs	r3, #0
 800632c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800632e:	2300      	movs	r3, #0
 8006330:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006338:	78fa      	ldrb	r2, [r7, #3]
 800633a:	4611      	mov	r1, r2
 800633c:	4618      	mov	r0, r3
 800633e:	f7fb fc66 	bl	8001c0e <HAL_PCD_EP_Close>
 8006342:	4603      	mov	r3, r0
 8006344:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006346:	7bfb      	ldrb	r3, [r7, #15]
 8006348:	4618      	mov	r0, r3
 800634a:	f000 f8e5 	bl	8006518 <USBD_Get_USB_Status>
 800634e:	4603      	mov	r3, r0
 8006350:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006352:	7bbb      	ldrb	r3, [r7, #14]
}
 8006354:	4618      	mov	r0, r3
 8006356:	3710      	adds	r7, #16
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}

0800635c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b084      	sub	sp, #16
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	460b      	mov	r3, r1
 8006366:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006368:	2300      	movs	r3, #0
 800636a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800636c:	2300      	movs	r3, #0
 800636e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006376:	78fa      	ldrb	r2, [r7, #3]
 8006378:	4611      	mov	r1, r2
 800637a:	4618      	mov	r0, r3
 800637c:	f7fb fd3e 	bl	8001dfc <HAL_PCD_EP_SetStall>
 8006380:	4603      	mov	r3, r0
 8006382:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006384:	7bfb      	ldrb	r3, [r7, #15]
 8006386:	4618      	mov	r0, r3
 8006388:	f000 f8c6 	bl	8006518 <USBD_Get_USB_Status>
 800638c:	4603      	mov	r3, r0
 800638e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006390:	7bbb      	ldrb	r3, [r7, #14]
}
 8006392:	4618      	mov	r0, r3
 8006394:	3710      	adds	r7, #16
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}

0800639a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800639a:	b580      	push	{r7, lr}
 800639c:	b084      	sub	sp, #16
 800639e:	af00      	add	r7, sp, #0
 80063a0:	6078      	str	r0, [r7, #4]
 80063a2:	460b      	mov	r3, r1
 80063a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80063a6:	2300      	movs	r3, #0
 80063a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80063aa:	2300      	movs	r3, #0
 80063ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80063b4:	78fa      	ldrb	r2, [r7, #3]
 80063b6:	4611      	mov	r1, r2
 80063b8:	4618      	mov	r0, r3
 80063ba:	f7fb fd83 	bl	8001ec4 <HAL_PCD_EP_ClrStall>
 80063be:	4603      	mov	r3, r0
 80063c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80063c2:	7bfb      	ldrb	r3, [r7, #15]
 80063c4:	4618      	mov	r0, r3
 80063c6:	f000 f8a7 	bl	8006518 <USBD_Get_USB_Status>
 80063ca:	4603      	mov	r3, r0
 80063cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80063ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3710      	adds	r7, #16
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}

080063d8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80063d8:	b480      	push	{r7}
 80063da:	b085      	sub	sp, #20
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
 80063e0:	460b      	mov	r3, r1
 80063e2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80063ea:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80063ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	da0b      	bge.n	800640c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80063f4:	78fb      	ldrb	r3, [r7, #3]
 80063f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80063fa:	68f9      	ldr	r1, [r7, #12]
 80063fc:	4613      	mov	r3, r2
 80063fe:	00db      	lsls	r3, r3, #3
 8006400:	1a9b      	subs	r3, r3, r2
 8006402:	009b      	lsls	r3, r3, #2
 8006404:	440b      	add	r3, r1
 8006406:	333e      	adds	r3, #62	; 0x3e
 8006408:	781b      	ldrb	r3, [r3, #0]
 800640a:	e00b      	b.n	8006424 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800640c:	78fb      	ldrb	r3, [r7, #3]
 800640e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006412:	68f9      	ldr	r1, [r7, #12]
 8006414:	4613      	mov	r3, r2
 8006416:	00db      	lsls	r3, r3, #3
 8006418:	1a9b      	subs	r3, r3, r2
 800641a:	009b      	lsls	r3, r3, #2
 800641c:	440b      	add	r3, r1
 800641e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006422:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006424:	4618      	mov	r0, r3
 8006426:	3714      	adds	r7, #20
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr

08006430 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b084      	sub	sp, #16
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	460b      	mov	r3, r1
 800643a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800643c:	2300      	movs	r3, #0
 800643e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006440:	2300      	movs	r3, #0
 8006442:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800644a:	78fa      	ldrb	r2, [r7, #3]
 800644c:	4611      	mov	r1, r2
 800644e:	4618      	mov	r0, r3
 8006450:	f7fb fb50 	bl	8001af4 <HAL_PCD_SetAddress>
 8006454:	4603      	mov	r3, r0
 8006456:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006458:	7bfb      	ldrb	r3, [r7, #15]
 800645a:	4618      	mov	r0, r3
 800645c:	f000 f85c 	bl	8006518 <USBD_Get_USB_Status>
 8006460:	4603      	mov	r3, r0
 8006462:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006464:	7bbb      	ldrb	r3, [r7, #14]
}
 8006466:	4618      	mov	r0, r3
 8006468:	3710      	adds	r7, #16
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}

0800646e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800646e:	b580      	push	{r7, lr}
 8006470:	b086      	sub	sp, #24
 8006472:	af00      	add	r7, sp, #0
 8006474:	60f8      	str	r0, [r7, #12]
 8006476:	607a      	str	r2, [r7, #4]
 8006478:	603b      	str	r3, [r7, #0]
 800647a:	460b      	mov	r3, r1
 800647c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800647e:	2300      	movs	r3, #0
 8006480:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006482:	2300      	movs	r3, #0
 8006484:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800648c:	7af9      	ldrb	r1, [r7, #11]
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	f7fb fc69 	bl	8001d68 <HAL_PCD_EP_Transmit>
 8006496:	4603      	mov	r3, r0
 8006498:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800649a:	7dfb      	ldrb	r3, [r7, #23]
 800649c:	4618      	mov	r0, r3
 800649e:	f000 f83b 	bl	8006518 <USBD_Get_USB_Status>
 80064a2:	4603      	mov	r3, r0
 80064a4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80064a6:	7dbb      	ldrb	r3, [r7, #22]
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3718      	adds	r7, #24
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}

080064b0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b086      	sub	sp, #24
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	60f8      	str	r0, [r7, #12]
 80064b8:	607a      	str	r2, [r7, #4]
 80064ba:	603b      	str	r3, [r7, #0]
 80064bc:	460b      	mov	r3, r1
 80064be:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80064c0:	2300      	movs	r3, #0
 80064c2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80064c4:	2300      	movs	r3, #0
 80064c6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80064ce:	7af9      	ldrb	r1, [r7, #11]
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	687a      	ldr	r2, [r7, #4]
 80064d4:	f7fb fbe5 	bl	8001ca2 <HAL_PCD_EP_Receive>
 80064d8:	4603      	mov	r3, r0
 80064da:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80064dc:	7dfb      	ldrb	r3, [r7, #23]
 80064de:	4618      	mov	r0, r3
 80064e0:	f000 f81a 	bl	8006518 <USBD_Get_USB_Status>
 80064e4:	4603      	mov	r3, r0
 80064e6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80064e8:	7dbb      	ldrb	r3, [r7, #22]
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3718      	adds	r7, #24
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}

080064f2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80064f2:	b580      	push	{r7, lr}
 80064f4:	b082      	sub	sp, #8
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
 80064fa:	460b      	mov	r3, r1
 80064fc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006504:	78fa      	ldrb	r2, [r7, #3]
 8006506:	4611      	mov	r1, r2
 8006508:	4618      	mov	r0, r3
 800650a:	f7fb fc15 	bl	8001d38 <HAL_PCD_EP_GetRxCount>
 800650e:	4603      	mov	r3, r0
}
 8006510:	4618      	mov	r0, r3
 8006512:	3708      	adds	r7, #8
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}

08006518 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006518:	b480      	push	{r7}
 800651a:	b085      	sub	sp, #20
 800651c:	af00      	add	r7, sp, #0
 800651e:	4603      	mov	r3, r0
 8006520:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006522:	2300      	movs	r3, #0
 8006524:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006526:	79fb      	ldrb	r3, [r7, #7]
 8006528:	2b03      	cmp	r3, #3
 800652a:	d817      	bhi.n	800655c <USBD_Get_USB_Status+0x44>
 800652c:	a201      	add	r2, pc, #4	; (adr r2, 8006534 <USBD_Get_USB_Status+0x1c>)
 800652e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006532:	bf00      	nop
 8006534:	08006545 	.word	0x08006545
 8006538:	0800654b 	.word	0x0800654b
 800653c:	08006551 	.word	0x08006551
 8006540:	08006557 	.word	0x08006557
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006544:	2300      	movs	r3, #0
 8006546:	73fb      	strb	r3, [r7, #15]
    break;
 8006548:	e00b      	b.n	8006562 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800654a:	2303      	movs	r3, #3
 800654c:	73fb      	strb	r3, [r7, #15]
    break;
 800654e:	e008      	b.n	8006562 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006550:	2301      	movs	r3, #1
 8006552:	73fb      	strb	r3, [r7, #15]
    break;
 8006554:	e005      	b.n	8006562 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006556:	2303      	movs	r3, #3
 8006558:	73fb      	strb	r3, [r7, #15]
    break;
 800655a:	e002      	b.n	8006562 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800655c:	2303      	movs	r3, #3
 800655e:	73fb      	strb	r3, [r7, #15]
    break;
 8006560:	bf00      	nop
  }
  return usb_status;
 8006562:	7bfb      	ldrb	r3, [r7, #15]
}
 8006564:	4618      	mov	r0, r3
 8006566:	3714      	adds	r7, #20
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr

08006570 <__errno>:
 8006570:	4b01      	ldr	r3, [pc, #4]	; (8006578 <__errno+0x8>)
 8006572:	6818      	ldr	r0, [r3, #0]
 8006574:	4770      	bx	lr
 8006576:	bf00      	nop
 8006578:	2000019c 	.word	0x2000019c

0800657c <__libc_init_array>:
 800657c:	b570      	push	{r4, r5, r6, lr}
 800657e:	4e0d      	ldr	r6, [pc, #52]	; (80065b4 <__libc_init_array+0x38>)
 8006580:	4c0d      	ldr	r4, [pc, #52]	; (80065b8 <__libc_init_array+0x3c>)
 8006582:	1ba4      	subs	r4, r4, r6
 8006584:	10a4      	asrs	r4, r4, #2
 8006586:	2500      	movs	r5, #0
 8006588:	42a5      	cmp	r5, r4
 800658a:	d109      	bne.n	80065a0 <__libc_init_array+0x24>
 800658c:	4e0b      	ldr	r6, [pc, #44]	; (80065bc <__libc_init_array+0x40>)
 800658e:	4c0c      	ldr	r4, [pc, #48]	; (80065c0 <__libc_init_array+0x44>)
 8006590:	f000 f8ea 	bl	8006768 <_init>
 8006594:	1ba4      	subs	r4, r4, r6
 8006596:	10a4      	asrs	r4, r4, #2
 8006598:	2500      	movs	r5, #0
 800659a:	42a5      	cmp	r5, r4
 800659c:	d105      	bne.n	80065aa <__libc_init_array+0x2e>
 800659e:	bd70      	pop	{r4, r5, r6, pc}
 80065a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80065a4:	4798      	blx	r3
 80065a6:	3501      	adds	r5, #1
 80065a8:	e7ee      	b.n	8006588 <__libc_init_array+0xc>
 80065aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80065ae:	4798      	blx	r3
 80065b0:	3501      	adds	r5, #1
 80065b2:	e7f2      	b.n	800659a <__libc_init_array+0x1e>
 80065b4:	08006808 	.word	0x08006808
 80065b8:	08006808 	.word	0x08006808
 80065bc:	08006808 	.word	0x08006808
 80065c0:	0800680c 	.word	0x0800680c

080065c4 <malloc>:
 80065c4:	4b02      	ldr	r3, [pc, #8]	; (80065d0 <malloc+0xc>)
 80065c6:	4601      	mov	r1, r0
 80065c8:	6818      	ldr	r0, [r3, #0]
 80065ca:	f000 b861 	b.w	8006690 <_malloc_r>
 80065ce:	bf00      	nop
 80065d0:	2000019c 	.word	0x2000019c

080065d4 <free>:
 80065d4:	4b02      	ldr	r3, [pc, #8]	; (80065e0 <free+0xc>)
 80065d6:	4601      	mov	r1, r0
 80065d8:	6818      	ldr	r0, [r3, #0]
 80065da:	f000 b80b 	b.w	80065f4 <_free_r>
 80065de:	bf00      	nop
 80065e0:	2000019c 	.word	0x2000019c

080065e4 <memset>:
 80065e4:	4402      	add	r2, r0
 80065e6:	4603      	mov	r3, r0
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d100      	bne.n	80065ee <memset+0xa>
 80065ec:	4770      	bx	lr
 80065ee:	f803 1b01 	strb.w	r1, [r3], #1
 80065f2:	e7f9      	b.n	80065e8 <memset+0x4>

080065f4 <_free_r>:
 80065f4:	b538      	push	{r3, r4, r5, lr}
 80065f6:	4605      	mov	r5, r0
 80065f8:	2900      	cmp	r1, #0
 80065fa:	d045      	beq.n	8006688 <_free_r+0x94>
 80065fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006600:	1f0c      	subs	r4, r1, #4
 8006602:	2b00      	cmp	r3, #0
 8006604:	bfb8      	it	lt
 8006606:	18e4      	addlt	r4, r4, r3
 8006608:	f000 f8ac 	bl	8006764 <__malloc_lock>
 800660c:	4a1f      	ldr	r2, [pc, #124]	; (800668c <_free_r+0x98>)
 800660e:	6813      	ldr	r3, [r2, #0]
 8006610:	4610      	mov	r0, r2
 8006612:	b933      	cbnz	r3, 8006622 <_free_r+0x2e>
 8006614:	6063      	str	r3, [r4, #4]
 8006616:	6014      	str	r4, [r2, #0]
 8006618:	4628      	mov	r0, r5
 800661a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800661e:	f000 b8a2 	b.w	8006766 <__malloc_unlock>
 8006622:	42a3      	cmp	r3, r4
 8006624:	d90c      	bls.n	8006640 <_free_r+0x4c>
 8006626:	6821      	ldr	r1, [r4, #0]
 8006628:	1862      	adds	r2, r4, r1
 800662a:	4293      	cmp	r3, r2
 800662c:	bf04      	itt	eq
 800662e:	681a      	ldreq	r2, [r3, #0]
 8006630:	685b      	ldreq	r3, [r3, #4]
 8006632:	6063      	str	r3, [r4, #4]
 8006634:	bf04      	itt	eq
 8006636:	1852      	addeq	r2, r2, r1
 8006638:	6022      	streq	r2, [r4, #0]
 800663a:	6004      	str	r4, [r0, #0]
 800663c:	e7ec      	b.n	8006618 <_free_r+0x24>
 800663e:	4613      	mov	r3, r2
 8006640:	685a      	ldr	r2, [r3, #4]
 8006642:	b10a      	cbz	r2, 8006648 <_free_r+0x54>
 8006644:	42a2      	cmp	r2, r4
 8006646:	d9fa      	bls.n	800663e <_free_r+0x4a>
 8006648:	6819      	ldr	r1, [r3, #0]
 800664a:	1858      	adds	r0, r3, r1
 800664c:	42a0      	cmp	r0, r4
 800664e:	d10b      	bne.n	8006668 <_free_r+0x74>
 8006650:	6820      	ldr	r0, [r4, #0]
 8006652:	4401      	add	r1, r0
 8006654:	1858      	adds	r0, r3, r1
 8006656:	4282      	cmp	r2, r0
 8006658:	6019      	str	r1, [r3, #0]
 800665a:	d1dd      	bne.n	8006618 <_free_r+0x24>
 800665c:	6810      	ldr	r0, [r2, #0]
 800665e:	6852      	ldr	r2, [r2, #4]
 8006660:	605a      	str	r2, [r3, #4]
 8006662:	4401      	add	r1, r0
 8006664:	6019      	str	r1, [r3, #0]
 8006666:	e7d7      	b.n	8006618 <_free_r+0x24>
 8006668:	d902      	bls.n	8006670 <_free_r+0x7c>
 800666a:	230c      	movs	r3, #12
 800666c:	602b      	str	r3, [r5, #0]
 800666e:	e7d3      	b.n	8006618 <_free_r+0x24>
 8006670:	6820      	ldr	r0, [r4, #0]
 8006672:	1821      	adds	r1, r4, r0
 8006674:	428a      	cmp	r2, r1
 8006676:	bf04      	itt	eq
 8006678:	6811      	ldreq	r1, [r2, #0]
 800667a:	6852      	ldreq	r2, [r2, #4]
 800667c:	6062      	str	r2, [r4, #4]
 800667e:	bf04      	itt	eq
 8006680:	1809      	addeq	r1, r1, r0
 8006682:	6021      	streq	r1, [r4, #0]
 8006684:	605c      	str	r4, [r3, #4]
 8006686:	e7c7      	b.n	8006618 <_free_r+0x24>
 8006688:	bd38      	pop	{r3, r4, r5, pc}
 800668a:	bf00      	nop
 800668c:	20000224 	.word	0x20000224

08006690 <_malloc_r>:
 8006690:	b570      	push	{r4, r5, r6, lr}
 8006692:	1ccd      	adds	r5, r1, #3
 8006694:	f025 0503 	bic.w	r5, r5, #3
 8006698:	3508      	adds	r5, #8
 800669a:	2d0c      	cmp	r5, #12
 800669c:	bf38      	it	cc
 800669e:	250c      	movcc	r5, #12
 80066a0:	2d00      	cmp	r5, #0
 80066a2:	4606      	mov	r6, r0
 80066a4:	db01      	blt.n	80066aa <_malloc_r+0x1a>
 80066a6:	42a9      	cmp	r1, r5
 80066a8:	d903      	bls.n	80066b2 <_malloc_r+0x22>
 80066aa:	230c      	movs	r3, #12
 80066ac:	6033      	str	r3, [r6, #0]
 80066ae:	2000      	movs	r0, #0
 80066b0:	bd70      	pop	{r4, r5, r6, pc}
 80066b2:	f000 f857 	bl	8006764 <__malloc_lock>
 80066b6:	4a21      	ldr	r2, [pc, #132]	; (800673c <_malloc_r+0xac>)
 80066b8:	6814      	ldr	r4, [r2, #0]
 80066ba:	4621      	mov	r1, r4
 80066bc:	b991      	cbnz	r1, 80066e4 <_malloc_r+0x54>
 80066be:	4c20      	ldr	r4, [pc, #128]	; (8006740 <_malloc_r+0xb0>)
 80066c0:	6823      	ldr	r3, [r4, #0]
 80066c2:	b91b      	cbnz	r3, 80066cc <_malloc_r+0x3c>
 80066c4:	4630      	mov	r0, r6
 80066c6:	f000 f83d 	bl	8006744 <_sbrk_r>
 80066ca:	6020      	str	r0, [r4, #0]
 80066cc:	4629      	mov	r1, r5
 80066ce:	4630      	mov	r0, r6
 80066d0:	f000 f838 	bl	8006744 <_sbrk_r>
 80066d4:	1c43      	adds	r3, r0, #1
 80066d6:	d124      	bne.n	8006722 <_malloc_r+0x92>
 80066d8:	230c      	movs	r3, #12
 80066da:	6033      	str	r3, [r6, #0]
 80066dc:	4630      	mov	r0, r6
 80066de:	f000 f842 	bl	8006766 <__malloc_unlock>
 80066e2:	e7e4      	b.n	80066ae <_malloc_r+0x1e>
 80066e4:	680b      	ldr	r3, [r1, #0]
 80066e6:	1b5b      	subs	r3, r3, r5
 80066e8:	d418      	bmi.n	800671c <_malloc_r+0x8c>
 80066ea:	2b0b      	cmp	r3, #11
 80066ec:	d90f      	bls.n	800670e <_malloc_r+0x7e>
 80066ee:	600b      	str	r3, [r1, #0]
 80066f0:	50cd      	str	r5, [r1, r3]
 80066f2:	18cc      	adds	r4, r1, r3
 80066f4:	4630      	mov	r0, r6
 80066f6:	f000 f836 	bl	8006766 <__malloc_unlock>
 80066fa:	f104 000b 	add.w	r0, r4, #11
 80066fe:	1d23      	adds	r3, r4, #4
 8006700:	f020 0007 	bic.w	r0, r0, #7
 8006704:	1ac3      	subs	r3, r0, r3
 8006706:	d0d3      	beq.n	80066b0 <_malloc_r+0x20>
 8006708:	425a      	negs	r2, r3
 800670a:	50e2      	str	r2, [r4, r3]
 800670c:	e7d0      	b.n	80066b0 <_malloc_r+0x20>
 800670e:	428c      	cmp	r4, r1
 8006710:	684b      	ldr	r3, [r1, #4]
 8006712:	bf16      	itet	ne
 8006714:	6063      	strne	r3, [r4, #4]
 8006716:	6013      	streq	r3, [r2, #0]
 8006718:	460c      	movne	r4, r1
 800671a:	e7eb      	b.n	80066f4 <_malloc_r+0x64>
 800671c:	460c      	mov	r4, r1
 800671e:	6849      	ldr	r1, [r1, #4]
 8006720:	e7cc      	b.n	80066bc <_malloc_r+0x2c>
 8006722:	1cc4      	adds	r4, r0, #3
 8006724:	f024 0403 	bic.w	r4, r4, #3
 8006728:	42a0      	cmp	r0, r4
 800672a:	d005      	beq.n	8006738 <_malloc_r+0xa8>
 800672c:	1a21      	subs	r1, r4, r0
 800672e:	4630      	mov	r0, r6
 8006730:	f000 f808 	bl	8006744 <_sbrk_r>
 8006734:	3001      	adds	r0, #1
 8006736:	d0cf      	beq.n	80066d8 <_malloc_r+0x48>
 8006738:	6025      	str	r5, [r4, #0]
 800673a:	e7db      	b.n	80066f4 <_malloc_r+0x64>
 800673c:	20000224 	.word	0x20000224
 8006740:	20000228 	.word	0x20000228

08006744 <_sbrk_r>:
 8006744:	b538      	push	{r3, r4, r5, lr}
 8006746:	4c06      	ldr	r4, [pc, #24]	; (8006760 <_sbrk_r+0x1c>)
 8006748:	2300      	movs	r3, #0
 800674a:	4605      	mov	r5, r0
 800674c:	4608      	mov	r0, r1
 800674e:	6023      	str	r3, [r4, #0]
 8006750:	f7fa f918 	bl	8000984 <_sbrk>
 8006754:	1c43      	adds	r3, r0, #1
 8006756:	d102      	bne.n	800675e <_sbrk_r+0x1a>
 8006758:	6823      	ldr	r3, [r4, #0]
 800675a:	b103      	cbz	r3, 800675e <_sbrk_r+0x1a>
 800675c:	602b      	str	r3, [r5, #0]
 800675e:	bd38      	pop	{r3, r4, r5, pc}
 8006760:	200022e4 	.word	0x200022e4

08006764 <__malloc_lock>:
 8006764:	4770      	bx	lr

08006766 <__malloc_unlock>:
 8006766:	4770      	bx	lr

08006768 <_init>:
 8006768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800676a:	bf00      	nop
 800676c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800676e:	bc08      	pop	{r3}
 8006770:	469e      	mov	lr, r3
 8006772:	4770      	bx	lr

08006774 <_fini>:
 8006774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006776:	bf00      	nop
 8006778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800677a:	bc08      	pop	{r3}
 800677c:	469e      	mov	lr, r3
 800677e:	4770      	bx	lr
